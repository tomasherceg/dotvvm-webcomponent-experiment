@viewModel DotVVM.Samples.Common.ViewModels.FeatureSamples.LambdaExpressions.LambdaExpressionsViewModel, DotVVM.Samples.Common
@import DotVVM.Samples.BasicSamples

<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
    <head>
        <title>Hello from DotVVM!</title>
        <dot:RequiredResource Name="globalize:cs-CZ" />
    </head>
    <body>
        <h1>Lambda expressions testing</h1>

        <div>
            <h2>Test collection</h2>
            <dot:Repeater DataSource="{value: Array}">
                <ItemTemplate>
                    <div data-ui="client-rendered-item">
                        <span>[{{value: _index.ToString()}}] = </span>
                        <span>{{value: _this.ToString()}}</span>
                    </div>
                </ItemTemplate>
            </dot:Repeater>
        </div>

        <div>
            <h2>Operations</h2>
            <p>
            Showcasing LINQ and JsTranslator <br/>
            Note: you can use either explicit expressions (example: Enumerable.Where(Collection, ...)),
                 but also extension-method-like calls (example: Collection.Where(...))
            </p>

            <dot:Button Text="Get all even numbers" Validation.Enabled="false"
                        <%--Click="{command: SetResult(Enumerable.Where(Array, (int item) => item % 2 == 0))}" />--%>
                        Click="{command: SetResult(Array.Where((int item) => item % 2 == 0))}" />
            <dot:Button Text="Get all odd numbers" Validation.Enabled="false"
                        <%--Click="{command: SetResult(Enumerable.Where(Array, (int item) => item % 2 == 1))}" />--%>
                        Click="{command: SetResult(Array.Where((int item) => item % 2 == 1))}" />
            <dot:Button Text="Negate numbers" Validation.Enabled="false"
                        <%--Click="{command: SetResult(Enumerable.Select(Array, (int item) => -item))}" />--%>
                        Click="{command: SetResult(Array.Select((int item) => -item))}" />
        </div>

        <div>
            <h2>Result collection</h2>
            <dot:Repeater DataSource="{value: Result}">
                <ItemTemplate>
                    <div data-ui="client-rendered-item">
                        <span>[{{value: _index.ToString()}}] = </span>
                        <span>{{value: _this.ToString()}}</span>
                    </div>
                </ItemTemplate>
            </dot:Repeater>
        </div>

    </body>
</html>
