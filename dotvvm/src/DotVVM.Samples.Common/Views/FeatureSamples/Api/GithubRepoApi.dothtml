@viewModel DotVVM.Samples.Common.ViewModels.FeatureSamples.Api.GithubRepoApiViewModel, DotVVM.Samples.Common

<!DOCTYPE html>

<html lang="en" xmlns="http://www.w3.org/1999/xhtml">
<head>
    <meta charset="utf-8" />
    <title></title>
</head>
<body>

    <p>
        <dot:TextBox Text="{value: UserName}" placeholder="user name" />
        <dot:ComboBox SelectedValue="{value: Repo}" DataSource="{value: _api.RefreshOnChange(_github.Users.GetRepos(UserName), UserName)}" ItemValueBinding="{value: Name}" ItemTextBinding="{value: Name}" />
    </p>

    <p>
        Open Issues:
    </p>

    <dot:GridView DataSource="{value: _api.RefreshOnChange(_github.Repos.GetIssuesAll(UserName, Repo, 'All', 'Open', '', 'Updated', 'Desc', '1950-01-01T00:00:00Z'), Repo + UserName)}">
        <RowDecorators>
            <dot:Decorator Events.Click="{staticCommand: _root.CurrentIssueText = _github.Repos.GetIssues(_root.UserName, _root.Repo, Number).Body}" />
        </RowDecorators>
        <EmptyDataTemplate>No issues</EmptyDataTemplate>
        <dot:GridViewTextColumn ValueBinding="{value: _this.Title}" HeaderText="Title" />
        <dot:GridViewTextColumn ValueBinding="{value: User.Login}" HeaderText="User" />
        <dot:GridViewTemplateColumn HeaderText="get text">
            <dot:LinkButton Click="{staticCommand: _root.CurrentIssueText = _github.Repos.GetIssues(_root.UserName, _root.Repo, Number).Body}">get text</dot:LinkButton>
        </dot:GridViewTemplateColumn>
        <dot:GridViewTemplateColumn HeaderText="copy to new">
            <dot:LinkButton Click="{staticCommand: _root.NewIssue = _github.Repos.GetIssues(_root.UserName, _root.Repo, Number)}">copy to new</dot:LinkButton>
        </dot:GridViewTemplateColumn>
        <dot:GridViewTemplateColumn HeaderText="...">
            <a href="{value: "https://github.com/" + _root.UserName + "/" + _root.Repo + "/issues/" + Number}">github.com</a>
        </dot:GridViewTemplateColumn>
    </dot:GridView>

    <div class="id-current-issue-text">
        {{value: CurrentIssueText}}
    </div>

    <div DataContext="{value: NewIssue}" Visible="{value: _root.UserName != null && _root.Repo != null}">
        <h2>New Issue </h2>
        <dot:TextBox Text="{value: Title}" />
        <dot:TextBox Type="MultiLine" Text="{value: Body}" />
        <span Visible="{value: _api.RefreshOnChange(_github.Repos.GetWatchers(_root.UserName, _root.Repo), _root.Repo).Count > 0}"> You can only push issues to repos that have 0 watchers. </span>
        <dot:Button Click="{staticCommand: _github.Repos.PostIssues(_root.UserName, _root.Repo, _this);}" Enabled="{value: _api.RefreshOnChange(_github.Repos.GetWatchers(_root.UserName, _root.Repo), _root.Repo).Count == 0}"> Submit issue </dot:Button>
    </div>

    <dot:Button Text="Fill sample issue" Click="{staticCommand: NewIssue.Title = "Hello."; NewIssue.Body = "This project is simply awesome."}" />

    <dot:Button Text="Put star" Click="{staticCommand: _github.User.PutStarred(UserName, Repo)}" />

    <script type="text/javascript">
function basicAuthenticatedFetch(input, init) {
    function requestAuth() {
        const a = prompt("You credentials for " + (input["url"] || input)) || "";
        sessionStorage.setItem("dotvvm-api-fetch-basic", a);
        return a;
    }
    const auth = sessionStorage.getItem("dotvvm-api-fetch-basic");
    if (init == null) {
        init = {};
    }
    if (auth != null) {
        if (init.headers == null) {
            init.headers = {};
        }
        if (!init.headers['Authorization']) {
            init.headers["Authorization"] = 'Basic ' + btoa(auth);
        }
    }
    if (!init.cache) {
        init.cache = "no-cache";
    }
    return window.fetch(input, init).then(response => {
        if (response.status === 401 && auth == null) {
            if (sessionStorage.getItem("dotvvm-api-fetch-basic") == null) {
                requestAuth();
            }
            return basicAuthenticatedFetch(input, init);
        } else {
            return response;
        }
    });
}
    </script>
</body>
</html>
