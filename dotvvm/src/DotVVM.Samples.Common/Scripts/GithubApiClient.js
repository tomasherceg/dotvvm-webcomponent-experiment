var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GithubApiClient;
(function (GithubApiClient) {
    var ClientBase = /** @class */ (function () {
        function ClientBase() {
        }
        ClientBase.prototype.transformOptions = function (options) {
            options.credentials = "same-origin";
            return Promise.resolve(options);
        };
        return ClientBase;
    }());
    /* tslint:disable */
    //----------------------
    // <auto-generated>
    //     Generated using the NSwag toolchain v11.14.1.0 (NJsonSchema v9.10.24.0 (Newtonsoft.Json v10.0.0.0)) (http://NSwag.org)
    // </auto-generated>
    //----------------------
    // ReSharper disable InconsistentNaming
    var Client = /** @class */ (function (_super) {
        __extends(Client, _super);
        function Client(baseUrl, http) {
            var _this = _super.call(this) || this;
            _this.jsonParseReviver = undefined;
            _this.http = http ? http : window;
            _this.baseUrl = baseUrl ? baseUrl : "https://api.github.com";
            return _this;
        }
        /**
         * @accept (optional) Is used to set specified media type.
         * @return OK
         */
        Client.prototype.getEvents = function (accept) {
            var _this = this;
            var url_ = this.baseUrl + "/events";
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processGetEvents(_response);
            });
        };
        Client.prototype.processGetEvents = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    result200 = resultData200 ? Events.fromJS(resultData200) : new Events();
                    return result200;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @accept (optional) Is used to set specified media type.
         * @return OK
         */
        Client.prototype.getFeeds = function (accept) {
            var _this = this;
            var url_ = this.baseUrl + "/feeds";
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processGetFeeds(_response);
            });
        };
        Client.prototype.processGetFeeds = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    result200 = resultData200 ? Feeds.fromJS(resultData200) : new Feeds();
                    return result200;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @since (optional) Timestamp in ISO 8601 format YYYY-MM-DDTHH:MM:SSZ.
        Only gists updated at or after this time are returned.
         * @accept (optional) Is used to set specified media type.
         * @return OK
         */
        Client.prototype.getGistsAll = function (since, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/gists?";
            if (since !== undefined)
                url_ += "since=" + encodeURIComponent("" + since) + "&";
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processGetGistsAll(_response);
            });
        };
        Client.prototype.processGetGistsAll = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    if (resultData200 && resultData200.constructor === Array) {
                        result200 = [];
                        for (var _i = 0, resultData200_1 = resultData200; _i < resultData200_1.length; _i++) {
                            var item = resultData200_1[_i];
                            result200.push(Anonymous.fromJS(item));
                        }
                    }
                    return result200;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @accept (optional) Is used to set specified media type.
         * @return Created
         */
        Client.prototype.postGists = function (body, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/gists";
            url_ = url_.replace(/[?&]$/, "");
            var content_ = JSON.stringify(body);
            var options_ = {
                body: content_,
                method: "POST",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processPostGists(_response);
            });
        };
        Client.prototype.processPostGists = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 201) {
                return response.text().then(function (_responseText) {
                    var result201 = null;
                    var resultData201 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    result201 = resultData201 ? Gist.fromJS(resultData201) : new Gist();
                    return result201;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @id Id of gist.
         * @accept (optional) Is used to set specified media type.
         * @return No content.
         */
        Client.prototype.deleteGists = function (id, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/gists/{id}";
            if (id === undefined || id === null)
                throw new Error("The parameter 'id' must be defined.");
            url_ = url_.replace("{id}", encodeURIComponent("" + id));
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "DELETE",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processDeleteGists(_response);
            });
        };
        Client.prototype.processDeleteGists = function (response) {
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 204) {
                return response.text().then(function (_responseText) {
                    return;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @id Id of gist.
         * @accept (optional) Is used to set specified media type.
         * @return OK
         */
        Client.prototype.getGists = function (id, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/gists/{id}";
            if (id === undefined || id === null)
                throw new Error("The parameter 'id' must be defined.");
            url_ = url_.replace("{id}", encodeURIComponent("" + id));
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processGetGists(_response);
            });
        };
        Client.prototype.processGetGists = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    result200 = resultData200 ? Gist.fromJS(resultData200) : new Gist();
                    return result200;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @id Id of gist.
         * @accept (optional) Is used to set specified media type.
         * @return OK
         */
        Client.prototype.patchGists = function (id, body, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/gists/{id}";
            if (id === undefined || id === null)
                throw new Error("The parameter 'id' must be defined.");
            url_ = url_.replace("{id}", encodeURIComponent("" + id));
            url_ = url_.replace(/[?&]$/, "");
            var content_ = JSON.stringify(body);
            var options_ = {
                body: content_,
                method: "PATCH",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processPatchGists(_response);
            });
        };
        Client.prototype.processPatchGists = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    result200 = resultData200 ? Gist.fromJS(resultData200) : new Gist();
                    return result200;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @filter Issues assigned to you / created by you / mentioning you / you're
        subscribed to updates for / All issues the authenticated user can see
         * @labels String list of comma separated Label names. Example - bug,ui,@high.
         * @since (optional) Optional string of a timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.
        Only issues updated at or after this time are returned.
         * @accept (optional) Is used to set specified media type.
         * @return OK
         */
        Client.prototype.getIssues = function (filter, state, labels, sort, direction, since, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/issues?";
            if (filter === undefined || filter === null)
                throw new Error("The parameter 'filter' must be defined and cannot be null.");
            else
                url_ += "filter=" + encodeURIComponent("" + filter) + "&";
            if (state === undefined || state === null)
                throw new Error("The parameter 'state' must be defined and cannot be null.");
            else
                url_ += "state=" + encodeURIComponent("" + state) + "&";
            if (labels === undefined || labels === null)
                throw new Error("The parameter 'labels' must be defined and cannot be null.");
            else
                url_ += "labels=" + encodeURIComponent("" + labels) + "&";
            if (sort === undefined || sort === null)
                throw new Error("The parameter 'sort' must be defined and cannot be null.");
            else
                url_ += "sort=" + encodeURIComponent("" + sort) + "&";
            if (direction === undefined || direction === null)
                throw new Error("The parameter 'direction' must be defined and cannot be null.");
            else
                url_ += "direction=" + encodeURIComponent("" + direction) + "&";
            if (since !== undefined)
                url_ += "since=" + encodeURIComponent("" + since) + "&";
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processGetIssues(_response);
            });
        };
        Client.prototype.processGetIssues = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    if (resultData200 && resultData200.constructor === Array) {
                        result200 = [];
                        for (var _i = 0, resultData200_2 = resultData200; _i < resultData200_2.length; _i++) {
                            var item = resultData200_2[_i];
                            result200.push(Anonymous2.fromJS(item));
                        }
                    }
                    return result200;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @accept (optional) Is used to set specified media type.
         * @return OK
         */
        Client.prototype.postMarkdown = function (body, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/markdown";
            url_ = url_.replace(/[?&]$/, "");
            var content_ = JSON.stringify(body);
            var options_ = {
                body: content_,
                method: "POST",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processPostMarkdown(_response);
            });
        };
        Client.prototype.processPostMarkdown = function (response) {
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    return;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @accept (optional) Is used to set specified media type.
         * @return OK
         */
        Client.prototype.getMeta = function (accept) {
            var _this = this;
            var url_ = this.baseUrl + "/meta";
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processGetMeta(_response);
            });
        };
        Client.prototype.processGetMeta = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    result200 = resultData200 ? Meta.fromJS(resultData200) : new Meta();
                    return result200;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @all (optional) True to show notifications marked as read.
         * @participating (optional) True to show only notifications in which the user is directly participating
        or mentioned.
         * @since (optional) The time should be passed in as UTC in the ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.
        Example: "2012-10-09T23:39:01Z".
         * @accept (optional) Is used to set specified media type.
         * @return OK
         */
        Client.prototype.getNotifications = function (all, participating, since, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/notifications?";
            if (all !== undefined)
                url_ += "all=" + encodeURIComponent("" + all) + "&";
            if (participating !== undefined)
                url_ += "participating=" + encodeURIComponent("" + participating) + "&";
            if (since !== undefined)
                url_ += "since=" + encodeURIComponent("" + since) + "&";
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processGetNotifications(_response);
            });
        };
        Client.prototype.processGetNotifications = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    result200 = resultData200 ? Notifications.fromJS(resultData200) : new Notifications();
                    return result200;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @accept (optional) Is used to set specified media type.
         * @return Marked as read.
         */
        Client.prototype.putNotifications = function (body, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/notifications";
            url_ = url_.replace(/[?&]$/, "");
            var content_ = JSON.stringify(body);
            var options_ = {
                body: content_,
                method: "PUT",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processPutNotifications(_response);
            });
        };
        Client.prototype.processPutNotifications = function (response) {
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 205) {
                return response.text().then(function (_responseText) {
                    return;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @org Name of organisation.
         * @accept (optional) Is used to set specified media type.
         * @return OK
         */
        Client.prototype.getOrgs = function (org, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/orgs/{org}";
            if (org === undefined || org === null)
                throw new Error("The parameter 'org' must be defined.");
            url_ = url_.replace("{org}", encodeURIComponent("" + org));
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processGetOrgs(_response);
            });
        };
        Client.prototype.processGetOrgs = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    result200 = resultData200 ? Organization.fromJS(resultData200) : new Organization();
                    return result200;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @org Name of organisation.
         * @accept (optional) Is used to set specified media type.
         * @return OK
         */
        Client.prototype.patchOrgs = function (org, body, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/orgs/{org}";
            if (org === undefined || org === null)
                throw new Error("The parameter 'org' must be defined.");
            url_ = url_.replace("{org}", encodeURIComponent("" + org));
            url_ = url_.replace(/[?&]$/, "");
            var content_ = JSON.stringify(body);
            var options_ = {
                body: content_,
                method: "PATCH",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processPatchOrgs(_response);
            });
        };
        Client.prototype.processPatchOrgs = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    result200 = resultData200 ? Organization.fromJS(resultData200) : new Organization();
                    return result200;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @accept (optional) Is used to set specified media type.
         * @return OK
         */
        Client.prototype.getRateLimit = function (accept) {
            var _this = this;
            var url_ = this.baseUrl + "/rate_limit";
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processGetRateLimit(_response);
            });
        };
        Client.prototype.processGetRateLimit = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    result200 = resultData200 ? Rate_limit.fromJS(resultData200) : new Rate_limit();
                    return result200;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @owner Name of repository owner.
         * @repo Name of repository.
         * @accept (optional) Is used to set specified media type.
         * @return Item removed.
         */
        Client.prototype.deleteRepos = function (owner, repo, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/repos/{owner}/{repo}";
            if (owner === undefined || owner === null)
                throw new Error("The parameter 'owner' must be defined.");
            url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
            if (repo === undefined || repo === null)
                throw new Error("The parameter 'repo' must be defined.");
            url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "DELETE",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processDeleteRepos(_response);
            });
        };
        Client.prototype.processDeleteRepos = function (response) {
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 204) {
                return response.text().then(function (_responseText) {
                    return;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @owner Name of repository owner.
         * @repo Name of repository.
         * @accept (optional) Is used to set specified media type.
         * @return OK
         */
        Client.prototype.getRepos = function (owner, repo, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/repos/{owner}/{repo}";
            if (owner === undefined || owner === null)
                throw new Error("The parameter 'owner' must be defined.");
            url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
            if (repo === undefined || repo === null)
                throw new Error("The parameter 'repo' must be defined.");
            url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processGetRepos(_response);
            });
        };
        Client.prototype.processGetRepos = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    result200 = resultData200 ? Repo.fromJS(resultData200) : new Repo();
                    return result200;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @owner Name of repository owner.
         * @repo Name of repository.
         * @accept (optional) Is used to set specified media type.
         * @return OK
         */
        Client.prototype.patchRepos = function (owner, repo, body, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/repos/{owner}/{repo}";
            if (owner === undefined || owner === null)
                throw new Error("The parameter 'owner' must be defined.");
            url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
            if (repo === undefined || repo === null)
                throw new Error("The parameter 'repo' must be defined.");
            url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
            url_ = url_.replace(/[?&]$/, "");
            var content_ = JSON.stringify(body);
            var options_ = {
                body: content_,
                method: "PATCH",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processPatchRepos(_response);
            });
        };
        Client.prototype.processPatchRepos = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    result200 = resultData200 ? Repo.fromJS(resultData200) : new Repo();
                    return result200;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @owner Name of repository owner.
         * @repo Name of repository.
         * @path Valid Git reference, defaults to 'master'.
         * @accept (optional) Is used to set specified media type.
         */
        Client.prototype.getRepos2 = function (owner, repo, archive_format, path, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/repos/{owner}/{repo}/{archive_format}/{path}";
            if (owner === undefined || owner === null)
                throw new Error("The parameter 'owner' must be defined.");
            url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
            if (repo === undefined || repo === null)
                throw new Error("The parameter 'repo' must be defined.");
            url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
            if (archive_format === undefined || archive_format === null)
                throw new Error("The parameter 'archive_format' must be defined.");
            url_ = url_.replace("{archive_format}", encodeURIComponent("" + archive_format));
            if (path === undefined || path === null)
                throw new Error("The parameter 'path' must be defined.");
            url_ = url_.replace("{path}", encodeURIComponent("" + path));
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processGetRepos2(_response);
            });
        };
        Client.prototype.processGetRepos2 = function (response) {
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 302) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @since (optional) The time should be passed in as UTC in the ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.
        Example: "2012-10-09T23:39:01Z".
         * @accept (optional) Is used to set specified media type.
         * @return OK
         */
        Client.prototype.getRepositories = function (since, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/repositories?";
            if (since !== undefined)
                url_ += "since=" + encodeURIComponent("" + since) + "&";
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processGetRepositories(_response);
            });
        };
        Client.prototype.processGetRepositories = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    if (resultData200 && resultData200.constructor === Array) {
                        result200 = [];
                        for (var _i = 0, resultData200_3 = resultData200; _i < resultData200_3.length; _i++) {
                            var item = resultData200_3[_i];
                            result200.push(Anonymous3.fromJS(item));
                        }
                    }
                    return result200;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @teamId Id of team.
         * @accept (optional) Is used to set specified media type.
         * @return No content.
         */
        Client.prototype.deleteTeams = function (teamId, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/teams/{teamId}";
            if (teamId === undefined || teamId === null)
                throw new Error("The parameter 'teamId' must be defined.");
            url_ = url_.replace("{teamId}", encodeURIComponent("" + teamId));
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "DELETE",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processDeleteTeams(_response);
            });
        };
        Client.prototype.processDeleteTeams = function (response) {
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 204) {
                return response.text().then(function (_responseText) {
                    return;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @teamId Id of team.
         * @accept (optional) Is used to set specified media type.
         * @return OK
         */
        Client.prototype.getTeams = function (teamId, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/teams/{teamId}";
            if (teamId === undefined || teamId === null)
                throw new Error("The parameter 'teamId' must be defined.");
            url_ = url_.replace("{teamId}", encodeURIComponent("" + teamId));
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processGetTeams(_response);
            });
        };
        Client.prototype.processGetTeams = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    result200 = resultData200 ? Team.fromJS(resultData200) : new Team();
                    return result200;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @teamId Id of team.
         * @accept (optional) Is used to set specified media type.
         * @return OK
         */
        Client.prototype.patchTeams = function (teamId, body, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/teams/{teamId}";
            if (teamId === undefined || teamId === null)
                throw new Error("The parameter 'teamId' must be defined.");
            url_ = url_.replace("{teamId}", encodeURIComponent("" + teamId));
            url_ = url_.replace(/[?&]$/, "");
            var content_ = JSON.stringify(body);
            var options_ = {
                body: content_,
                method: "PATCH",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processPatchTeams(_response);
            });
        };
        Client.prototype.processPatchTeams = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    result200 = resultData200 ? Team.fromJS(resultData200) : new Team();
                    return result200;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @accept (optional) Is used to set specified media type.
         * @return OK
         */
        Client.prototype.getUser = function (accept) {
            var _this = this;
            var url_ = this.baseUrl + "/user";
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processGetUser(_response);
            });
        };
        Client.prototype.processGetUser = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    result200 = resultData200 ? User.fromJS(resultData200) : new User();
                    return result200;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @accept (optional) Is used to set specified media type.
         * @return OK
         */
        Client.prototype.patchUser = function (body, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/user";
            url_ = url_.replace(/[?&]$/, "");
            var content_ = JSON.stringify(body);
            var options_ = {
                body: content_,
                method: "PATCH",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processPatchUser(_response);
            });
        };
        Client.prototype.processPatchUser = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    result200 = resultData200 ? User.fromJS(resultData200) : new User();
                    return result200;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @since (optional) The integer ID of the last User that you've seen.
         * @accept (optional) Is used to set specified media type.
         * @return OK
         */
        Client.prototype.getUsersAll = function (since, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/users?";
            if (since !== undefined)
                url_ += "since=" + encodeURIComponent("" + since) + "&";
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processGetUsersAll(_response);
            });
        };
        Client.prototype.processGetUsersAll = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    if (resultData200 && resultData200.constructor === Array) {
                        result200 = [];
                        for (var _i = 0, resultData200_4 = resultData200; _i < resultData200_4.length; _i++) {
                            var item = resultData200_4[_i];
                            result200.push(Anonymous4.fromJS(item));
                        }
                    }
                    return result200;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @username Name of user.
         * @accept (optional) Is used to set specified media type.
         * @return OK
         */
        Client.prototype.getUsersAll2 = function (username, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/users/{username}";
            if (username === undefined || username === null)
                throw new Error("The parameter 'username' must be defined.");
            url_ = url_.replace("{username}", encodeURIComponent("" + username));
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processGetUsersAll2(_response);
            });
        };
        Client.prototype.processGetUsersAll2 = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    if (resultData200 && resultData200.constructor === Array) {
                        result200 = [];
                        for (var _i = 0, resultData200_5 = resultData200; _i < resultData200_5.length; _i++) {
                            var item = resultData200_5[_i];
                            result200.push(Anonymous4.fromJS(item));
                        }
                    }
                    return result200;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        return Client;
    }(ClientBase));
    GithubApiClient.Client = Client;
    var GistsClient = /** @class */ (function (_super) {
        __extends(GistsClient, _super);
        function GistsClient(baseUrl, http) {
            var _this = _super.call(this) || this;
            _this.jsonParseReviver = undefined;
            _this.http = http ? http : window;
            _this.baseUrl = baseUrl ? baseUrl : "https://api.github.com";
            return _this;
        }
        /**
         * @since (optional) Timestamp in ISO 8601 format YYYY-MM-DDTHH:MM:SSZ.
        Only gists updated at or after this time are returned.
         * @accept (optional) Is used to set specified media type.
         * @return OK
         */
        GistsClient.prototype.getPublic = function (since, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/gists/public?";
            if (since !== undefined)
                url_ += "since=" + encodeURIComponent("" + since) + "&";
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processGetPublic(_response);
            });
        };
        GistsClient.prototype.processGetPublic = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    if (resultData200 && resultData200.constructor === Array) {
                        result200 = [];
                        for (var _i = 0, resultData200_6 = resultData200; _i < resultData200_6.length; _i++) {
                            var item = resultData200_6[_i];
                            result200.push(Anonymous.fromJS(item));
                        }
                    }
                    return result200;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @since (optional) Timestamp in ISO 8601 format YYYY-MM-DDTHH:MM:SSZ.
        Only gists updated at or after this time are returned.
         * @accept (optional) Is used to set specified media type.
         * @return OK
         */
        GistsClient.prototype.getStarred = function (since, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/gists/starred?";
            if (since !== undefined)
                url_ += "since=" + encodeURIComponent("" + since) + "&";
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processGetStarred(_response);
            });
        };
        GistsClient.prototype.processGetStarred = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    if (resultData200 && resultData200.constructor === Array) {
                        result200 = [];
                        for (var _i = 0, resultData200_7 = resultData200; _i < resultData200_7.length; _i++) {
                            var item = resultData200_7[_i];
                            result200.push(Anonymous.fromJS(item));
                        }
                    }
                    return result200;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @id Id of gist.
         * @accept (optional) Is used to set specified media type.
         * @return OK
         */
        GistsClient.prototype.getCommentsAll = function (id, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/gists/{id}/comments";
            if (id === undefined || id === null)
                throw new Error("The parameter 'id' must be defined.");
            url_ = url_.replace("{id}", encodeURIComponent("" + id));
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processGetCommentsAll(_response);
            });
        };
        GistsClient.prototype.processGetCommentsAll = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    if (resultData200 && resultData200.constructor === Array) {
                        result200 = [];
                        for (var _i = 0, resultData200_8 = resultData200; _i < resultData200_8.length; _i++) {
                            var item = resultData200_8[_i];
                            result200.push(Anonymous5.fromJS(item));
                        }
                    }
                    return result200;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @id Id of gist.
         * @accept (optional) Is used to set specified media type.
         * @return Created
         */
        GistsClient.prototype.postComments = function (id, body, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/gists/{id}/comments";
            if (id === undefined || id === null)
                throw new Error("The parameter 'id' must be defined.");
            url_ = url_.replace("{id}", encodeURIComponent("" + id));
            url_ = url_.replace(/[?&]$/, "");
            var content_ = JSON.stringify(body);
            var options_ = {
                body: content_,
                method: "POST",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processPostComments(_response);
            });
        };
        GistsClient.prototype.processPostComments = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 201) {
                return response.text().then(function (_responseText) {
                    var result201 = null;
                    var resultData201 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    result201 = resultData201 ? Comment.fromJS(resultData201) : new Comment();
                    return result201;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @id Id of gist.
         * @commentId Id of comment.
         * @accept (optional) Is used to set specified media type.
         * @return No content.
         */
        GistsClient.prototype.deleteComments = function (id, commentId, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/gists/{id}/comments/{commentId}";
            if (id === undefined || id === null)
                throw new Error("The parameter 'id' must be defined.");
            url_ = url_.replace("{id}", encodeURIComponent("" + id));
            if (commentId === undefined || commentId === null)
                throw new Error("The parameter 'commentId' must be defined.");
            url_ = url_.replace("{commentId}", encodeURIComponent("" + commentId));
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "DELETE",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processDeleteComments(_response);
            });
        };
        GistsClient.prototype.processDeleteComments = function (response) {
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 204) {
                return response.text().then(function (_responseText) {
                    return;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @id Id of gist.
         * @commentId Id of comment.
         * @accept (optional) Is used to set specified media type.
         * @return OK
         */
        GistsClient.prototype.getComments = function (id, commentId, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/gists/{id}/comments/{commentId}";
            if (id === undefined || id === null)
                throw new Error("The parameter 'id' must be defined.");
            url_ = url_.replace("{id}", encodeURIComponent("" + id));
            if (commentId === undefined || commentId === null)
                throw new Error("The parameter 'commentId' must be defined.");
            url_ = url_.replace("{commentId}", encodeURIComponent("" + commentId));
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processGetComments(_response);
            });
        };
        GistsClient.prototype.processGetComments = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    result200 = resultData200 ? Comment.fromJS(resultData200) : new Comment();
                    return result200;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @id Id of gist.
         * @commentId Id of comment.
         * @accept (optional) Is used to set specified media type.
         * @return OK
         */
        GistsClient.prototype.patchComments = function (id, commentId, body, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/gists/{id}/comments/{commentId}";
            if (id === undefined || id === null)
                throw new Error("The parameter 'id' must be defined.");
            url_ = url_.replace("{id}", encodeURIComponent("" + id));
            if (commentId === undefined || commentId === null)
                throw new Error("The parameter 'commentId' must be defined.");
            url_ = url_.replace("{commentId}", encodeURIComponent("" + commentId));
            url_ = url_.replace(/[?&]$/, "");
            var content_ = JSON.stringify(body);
            var options_ = {
                body: content_,
                method: "PATCH",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processPatchComments(_response);
            });
        };
        GistsClient.prototype.processPatchComments = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    result200 = resultData200 ? Comment.fromJS(resultData200) : new Comment();
                    return result200;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @id Id of gist.
         * @accept (optional) Is used to set specified media type.
         * @return Exists.
         */
        GistsClient.prototype.postForks = function (id, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/gists/{id}/forks";
            if (id === undefined || id === null)
                throw new Error("The parameter 'id' must be defined.");
            url_ = url_.replace("{id}", encodeURIComponent("" + id));
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "POST",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processPostForks(_response);
            });
        };
        GistsClient.prototype.processPostForks = function (response) {
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 204) {
                return response.text().then(function (_responseText) {
                    return;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 404) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @id Id of gist.
         * @accept (optional) Is used to set specified media type.
         * @return Item removed.
         */
        GistsClient.prototype.deleteStar = function (id, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/gists/{id}/star";
            if (id === undefined || id === null)
                throw new Error("The parameter 'id' must be defined.");
            url_ = url_.replace("{id}", encodeURIComponent("" + id));
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "DELETE",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processDeleteStar(_response);
            });
        };
        GistsClient.prototype.processDeleteStar = function (response) {
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 204) {
                return response.text().then(function (_responseText) {
                    return;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @id Id of gist.
         * @accept (optional) Is used to set specified media type.
         * @return Exists.
         */
        GistsClient.prototype.getStar = function (id, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/gists/{id}/star";
            if (id === undefined || id === null)
                throw new Error("The parameter 'id' must be defined.");
            url_ = url_.replace("{id}", encodeURIComponent("" + id));
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processGetStar(_response);
            });
        };
        GistsClient.prototype.processGetStar = function (response) {
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 204) {
                return response.text().then(function (_responseText) {
                    return;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 404) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @id Id of gist.
         * @accept (optional) Is used to set specified media type.
         * @return Starred.
         */
        GistsClient.prototype.putStar = function (id, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/gists/{id}/star";
            if (id === undefined || id === null)
                throw new Error("The parameter 'id' must be defined.");
            url_ = url_.replace("{id}", encodeURIComponent("" + id));
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "PUT",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processPutStar(_response);
            });
        };
        GistsClient.prototype.processPutStar = function (response) {
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 204) {
                return response.text().then(function (_responseText) {
                    return;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        return GistsClient;
    }(ClientBase));
    GithubApiClient.GistsClient = GistsClient;
    var GitignoreClient = /** @class */ (function (_super) {
        __extends(GitignoreClient, _super);
        function GitignoreClient(baseUrl, http) {
            var _this = _super.call(this) || this;
            _this.jsonParseReviver = undefined;
            _this.http = http ? http : window;
            _this.baseUrl = baseUrl ? baseUrl : "https://api.github.com";
            return _this;
        }
        /**
         * @accept (optional) Is used to set specified media type.
         * @return OK
         */
        GitignoreClient.prototype.getTemplatesAll = function (accept) {
            var _this = this;
            var url_ = this.baseUrl + "/gitignore/templates";
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processGetTemplatesAll(_response);
            });
        };
        GitignoreClient.prototype.processGetTemplatesAll = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    if (resultData200 && resultData200.constructor === Array) {
                        result200 = [];
                        for (var _i = 0, resultData200_9 = resultData200; _i < resultData200_9.length; _i++) {
                            var item = resultData200_9[_i];
                            result200.push(item);
                        }
                    }
                    return result200;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @accept (optional) Is used to set specified media type.
         * @return OK
         */
        GitignoreClient.prototype.getTemplates = function (language, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/gitignore/templates/{language}";
            if (language === undefined || language === null)
                throw new Error("The parameter 'language' must be defined.");
            url_ = url_.replace("{language}", encodeURIComponent("" + language));
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processGetTemplates(_response);
            });
        };
        GitignoreClient.prototype.processGetTemplates = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    result200 = resultData200 ? GitignoreLang.fromJS(resultData200) : new GitignoreLang();
                    return result200;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        return GitignoreClient;
    }(ClientBase));
    GithubApiClient.GitignoreClient = GitignoreClient;
    var LegacyClient = /** @class */ (function (_super) {
        __extends(LegacyClient, _super);
        function LegacyClient(baseUrl, http) {
            var _this = _super.call(this) || this;
            _this.jsonParseReviver = undefined;
            _this.http = http ? http : window;
            _this.baseUrl = baseUrl ? baseUrl : "https://api.github.com";
            return _this;
        }
        /**
         * @keyword The search term.
         * @state Indicates the state of the issues to return. Can be either open or closed.
         * @accept (optional) Is used to set specified media type.
         * @return OK
         */
        LegacyClient.prototype.issuesGetSearch = function (keyword, state, owner, repository, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/legacy/issues/search/{owner}/{repository}/{state}/{keyword}";
            if (keyword === undefined || keyword === null)
                throw new Error("The parameter 'keyword' must be defined.");
            url_ = url_.replace("{keyword}", encodeURIComponent("" + keyword));
            if (state === undefined || state === null)
                throw new Error("The parameter 'state' must be defined.");
            url_ = url_.replace("{state}", encodeURIComponent("" + state));
            if (owner === undefined || owner === null)
                throw new Error("The parameter 'owner' must be defined.");
            url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
            if (repository === undefined || repository === null)
                throw new Error("The parameter 'repository' must be defined.");
            url_ = url_.replace("{repository}", encodeURIComponent("" + repository));
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processIssuesGetSearch(_response);
            });
        };
        LegacyClient.prototype.processIssuesGetSearch = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    result200 = resultData200 ? SearchIssuesByKeyword.fromJS(resultData200) : new SearchIssuesByKeyword();
                    return result200;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @keyword The search term
         * @order (optional) The sort field. if sort param is provided. Can be either asc or desc.
         * @language (optional) Filter results by language
         * @start_page (optional) The page number to fetch
         * @sort (optional) The sort field. One of stars, forks, or updated. Default: results are sorted by best match.
         * @accept (optional) Is used to set specified media type.
         * @return OK
         */
        LegacyClient.prototype.reposGetSearch = function (keyword, order, language, start_page, sort, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/legacy/repos/search/{keyword}?";
            if (keyword === undefined || keyword === null)
                throw new Error("The parameter 'keyword' must be defined.");
            url_ = url_.replace("{keyword}", encodeURIComponent("" + keyword));
            if (order !== undefined)
                url_ += "order=" + encodeURIComponent("" + order) + "&";
            if (language !== undefined)
                url_ += "language=" + encodeURIComponent("" + language) + "&";
            if (start_page !== undefined)
                url_ += "start_page=" + encodeURIComponent("" + start_page) + "&";
            if (sort !== undefined)
                url_ += "sort=" + encodeURIComponent("" + sort) + "&";
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processReposGetSearch(_response);
            });
        };
        LegacyClient.prototype.processReposGetSearch = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    result200 = resultData200 ? SearchRepositoriesByKeyword.fromJS(resultData200) : new SearchRepositoriesByKeyword();
                    return result200;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @email The email address
         * @accept (optional) Is used to set specified media type.
         * @return OK
         */
        LegacyClient.prototype.userGetEmail = function (email, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/legacy/user/email/{email}";
            if (email === undefined || email === null)
                throw new Error("The parameter 'email' must be defined.");
            url_ = url_.replace("{email}", encodeURIComponent("" + email));
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processUserGetEmail(_response);
            });
        };
        LegacyClient.prototype.processUserGetEmail = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    result200 = resultData200 ? SearchUserByEmail.fromJS(resultData200) : new SearchUserByEmail();
                    return result200;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @keyword The search term
         * @order (optional) The sort field. if sort param is provided. Can be either asc or desc.
         * @start_page (optional) The page number to fetch
         * @sort (optional) The sort field. One of stars, forks, or updated. Default: results are sorted by best match.
         * @accept (optional) Is used to set specified media type.
         * @return OK
         */
        LegacyClient.prototype.userGetSearch = function (keyword, order, start_page, sort, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/legacy/user/search/{keyword}?";
            if (keyword === undefined || keyword === null)
                throw new Error("The parameter 'keyword' must be defined.");
            url_ = url_.replace("{keyword}", encodeURIComponent("" + keyword));
            if (order !== undefined)
                url_ += "order=" + encodeURIComponent("" + order) + "&";
            if (start_page !== undefined)
                url_ += "start_page=" + encodeURIComponent("" + start_page) + "&";
            if (sort !== undefined)
                url_ += "sort=" + encodeURIComponent("" + sort) + "&";
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processUserGetSearch(_response);
            });
        };
        LegacyClient.prototype.processUserGetSearch = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    result200 = resultData200 ? SearchUsersByKeyword.fromJS(resultData200) : new SearchUsersByKeyword();
                    return result200;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        return LegacyClient;
    }(ClientBase));
    GithubApiClient.LegacyClient = LegacyClient;
    var MarkdownClient = /** @class */ (function (_super) {
        __extends(MarkdownClient, _super);
        function MarkdownClient(baseUrl, http) {
            var _this = _super.call(this) || this;
            _this.jsonParseReviver = undefined;
            _this.http = http ? http : window;
            _this.baseUrl = baseUrl ? baseUrl : "https://api.github.com";
            return _this;
        }
        /**
         * @accept (optional) Is used to set specified media type.
         * @return OK
         */
        MarkdownClient.prototype.postRaw = function (accept) {
            var _this = this;
            var url_ = this.baseUrl + "/markdown/raw";
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "POST",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "text/plain",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processPostRaw(_response);
            });
        };
        MarkdownClient.prototype.processPostRaw = function (response) {
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    return;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        return MarkdownClient;
    }(ClientBase));
    GithubApiClient.MarkdownClient = MarkdownClient;
    var NetworksClient = /** @class */ (function (_super) {
        __extends(NetworksClient, _super);
        function NetworksClient(baseUrl, http) {
            var _this = _super.call(this) || this;
            _this.jsonParseReviver = undefined;
            _this.http = http ? http : window;
            _this.baseUrl = baseUrl ? baseUrl : "https://api.github.com";
            return _this;
        }
        /**
         * @owner Name of the owner.
         * @repo Name of repository.
         * @accept (optional) Is used to set specified media type.
         * @return OK
         */
        NetworksClient.prototype.getEvents = function (owner, repo, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/networks/{owner}/{repo}/events";
            if (owner === undefined || owner === null)
                throw new Error("The parameter 'owner' must be defined.");
            url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
            if (repo === undefined || repo === null)
                throw new Error("The parameter 'repo' must be defined.");
            url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processGetEvents(_response);
            });
        };
        NetworksClient.prototype.processGetEvents = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    result200 = resultData200 ? Events.fromJS(resultData200) : new Events();
                    return result200;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        return NetworksClient;
    }(ClientBase));
    GithubApiClient.NetworksClient = NetworksClient;
    var NotificationsClient = /** @class */ (function (_super) {
        __extends(NotificationsClient, _super);
        function NotificationsClient(baseUrl, http) {
            var _this = _super.call(this) || this;
            _this.jsonParseReviver = undefined;
            _this.http = http ? http : window;
            _this.baseUrl = baseUrl ? baseUrl : "https://api.github.com";
            return _this;
        }
        /**
         * @id Id of thread.
         * @accept (optional) Is used to set specified media type.
         * @return OK
         */
        NotificationsClient.prototype.getThreads = function (id, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/notifications/threads/{id}";
            if (id === undefined || id === null)
                throw new Error("The parameter 'id' must be defined.");
            url_ = url_.replace("{id}", encodeURIComponent("" + id));
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processGetThreads(_response);
            });
        };
        NotificationsClient.prototype.processGetThreads = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    result200 = resultData200 ? Notifications.fromJS(resultData200) : new Notifications();
                    return result200;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @id Id of thread.
         * @accept (optional) Is used to set specified media type.
         * @return Thread marked as read.
         */
        NotificationsClient.prototype.patchThreads = function (id, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/notifications/threads/{id}";
            if (id === undefined || id === null)
                throw new Error("The parameter 'id' must be defined.");
            url_ = url_.replace("{id}", encodeURIComponent("" + id));
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "PATCH",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processPatchThreads(_response);
            });
        };
        NotificationsClient.prototype.processPatchThreads = function (response) {
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 205) {
                return response.text().then(function (_responseText) {
                    return;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @id Id of thread.
         * @accept (optional) Is used to set specified media type.
         * @return No Content
         */
        NotificationsClient.prototype.threadsDeleteSubscription = function (id, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/notifications/threads/{id}/subscription";
            if (id === undefined || id === null)
                throw new Error("The parameter 'id' must be defined.");
            url_ = url_.replace("{id}", encodeURIComponent("" + id));
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "DELETE",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processThreadsDeleteSubscription(_response);
            });
        };
        NotificationsClient.prototype.processThreadsDeleteSubscription = function (response) {
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 204) {
                return response.text().then(function (_responseText) {
                    return;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @id Id of thread.
         * @accept (optional) Is used to set specified media type.
         * @return OK
         */
        NotificationsClient.prototype.threadsGetSubscription = function (id, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/notifications/threads/{id}/subscription";
            if (id === undefined || id === null)
                throw new Error("The parameter 'id' must be defined.");
            url_ = url_.replace("{id}", encodeURIComponent("" + id));
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processThreadsGetSubscription(_response);
            });
        };
        NotificationsClient.prototype.processThreadsGetSubscription = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    result200 = resultData200 ? Subscription.fromJS(resultData200) : new Subscription();
                    return result200;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @id Id of thread.
         * @accept (optional) Is used to set specified media type.
         * @return OK
         */
        NotificationsClient.prototype.threadsPutSubscription = function (id, body, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/notifications/threads/{id}/subscription";
            if (id === undefined || id === null)
                throw new Error("The parameter 'id' must be defined.");
            url_ = url_.replace("{id}", encodeURIComponent("" + id));
            url_ = url_.replace(/[?&]$/, "");
            var content_ = JSON.stringify(body);
            var options_ = {
                body: content_,
                method: "PUT",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processThreadsPutSubscription(_response);
            });
        };
        NotificationsClient.prototype.processThreadsPutSubscription = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    result200 = resultData200 ? Subscription.fromJS(resultData200) : new Subscription();
                    return result200;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        return NotificationsClient;
    }(ClientBase));
    GithubApiClient.NotificationsClient = NotificationsClient;
    var OrgsClient = /** @class */ (function (_super) {
        __extends(OrgsClient, _super);
        function OrgsClient(baseUrl, http) {
            var _this = _super.call(this) || this;
            _this.jsonParseReviver = undefined;
            _this.http = http ? http : window;
            _this.baseUrl = baseUrl ? baseUrl : "https://api.github.com";
            return _this;
        }
        /**
         * @org Name of organisation.
         * @accept (optional) Is used to set specified media type.
         * @return OK
         */
        OrgsClient.prototype.getEvents = function (org, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/orgs/{org}/events";
            if (org === undefined || org === null)
                throw new Error("The parameter 'org' must be defined.");
            url_ = url_.replace("{org}", encodeURIComponent("" + org));
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processGetEvents(_response);
            });
        };
        OrgsClient.prototype.processGetEvents = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    result200 = resultData200 ? Events.fromJS(resultData200) : new Events();
                    return result200;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @org Name of organisation.
         * @filter Issues assigned to you / created by you / mentioning you / you're
        subscribed to updates for / All issues the authenticated user can see
         * @labels String list of comma separated Label names. Example - bug,ui,@high.
         * @since (optional) Optional string of a timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.
        Only issues updated at or after this time are returned.
         * @accept (optional) Is used to set specified media type.
         * @return OK
         */
        OrgsClient.prototype.getIssues = function (org, filter, state, labels, sort, direction, since, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/orgs/{org}/issues?";
            if (org === undefined || org === null)
                throw new Error("The parameter 'org' must be defined.");
            url_ = url_.replace("{org}", encodeURIComponent("" + org));
            if (filter === undefined || filter === null)
                throw new Error("The parameter 'filter' must be defined and cannot be null.");
            else
                url_ += "filter=" + encodeURIComponent("" + filter) + "&";
            if (state === undefined || state === null)
                throw new Error("The parameter 'state' must be defined and cannot be null.");
            else
                url_ += "state=" + encodeURIComponent("" + state) + "&";
            if (labels === undefined || labels === null)
                throw new Error("The parameter 'labels' must be defined and cannot be null.");
            else
                url_ += "labels=" + encodeURIComponent("" + labels) + "&";
            if (sort === undefined || sort === null)
                throw new Error("The parameter 'sort' must be defined and cannot be null.");
            else
                url_ += "sort=" + encodeURIComponent("" + sort) + "&";
            if (direction === undefined || direction === null)
                throw new Error("The parameter 'direction' must be defined and cannot be null.");
            else
                url_ += "direction=" + encodeURIComponent("" + direction) + "&";
            if (since !== undefined)
                url_ += "since=" + encodeURIComponent("" + since) + "&";
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processGetIssues(_response);
            });
        };
        OrgsClient.prototype.processGetIssues = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    if (resultData200 && resultData200.constructor === Array) {
                        result200 = [];
                        for (var _i = 0, resultData200_10 = resultData200; _i < resultData200_10.length; _i++) {
                            var item = resultData200_10[_i];
                            result200.push(Anonymous2.fromJS(item));
                        }
                    }
                    return result200;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @org Name of organisation.
         * @accept (optional) Is used to set specified media type.
         * @return OK
         */
        OrgsClient.prototype.getMembersAll = function (org, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/orgs/{org}/members";
            if (org === undefined || org === null)
                throw new Error("The parameter 'org' must be defined.");
            url_ = url_.replace("{org}", encodeURIComponent("" + org));
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processGetMembersAll(_response);
            });
        };
        OrgsClient.prototype.processGetMembersAll = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    if (resultData200 && resultData200.constructor === Array) {
                        result200 = [];
                        for (var _i = 0, resultData200_11 = resultData200; _i < resultData200_11.length; _i++) {
                            var item = resultData200_11[_i];
                            result200.push(Anonymous4.fromJS(item));
                        }
                    }
                    return result200;
                });
            }
            else if (status === 302) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @org Name of organisation.
         * @username Name of the user.
         * @accept (optional) Is used to set specified media type.
         * @return No content.
         */
        OrgsClient.prototype.deleteMembers = function (org, username, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/orgs/{org}/members/{username}";
            if (org === undefined || org === null)
                throw new Error("The parameter 'org' must be defined.");
            url_ = url_.replace("{org}", encodeURIComponent("" + org));
            if (username === undefined || username === null)
                throw new Error("The parameter 'username' must be defined.");
            url_ = url_.replace("{username}", encodeURIComponent("" + username));
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "DELETE",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processDeleteMembers(_response);
            });
        };
        OrgsClient.prototype.processDeleteMembers = function (response) {
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 204) {
                return response.text().then(function (_responseText) {
                    return;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @org Name of organisation.
         * @username Name of the user.
         * @accept (optional) Is used to set specified media type.
         * @return No content. Response if requester is an organization member and user is a member
         */
        OrgsClient.prototype.getMembers = function (org, username, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/orgs/{org}/members/{username}";
            if (org === undefined || org === null)
                throw new Error("The parameter 'org' must be defined.");
            url_ = url_.replace("{org}", encodeURIComponent("" + org));
            if (username === undefined || username === null)
                throw new Error("The parameter 'username' must be defined.");
            url_ = url_.replace("{username}", encodeURIComponent("" + username));
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processGetMembers(_response);
            });
        };
        OrgsClient.prototype.processGetMembers = function (response) {
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 204) {
                return response.text().then(function (_responseText) {
                    return;
                });
            }
            else if (status === 302) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 404) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @org Name of organisation.
         * @accept (optional) Is used to set specified media type.
         * @return OK
         */
        OrgsClient.prototype.getPublicMembersAll = function (org, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/orgs/{org}/public_members";
            if (org === undefined || org === null)
                throw new Error("The parameter 'org' must be defined.");
            url_ = url_.replace("{org}", encodeURIComponent("" + org));
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processGetPublicMembersAll(_response);
            });
        };
        OrgsClient.prototype.processGetPublicMembersAll = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    if (resultData200 && resultData200.constructor === Array) {
                        result200 = [];
                        for (var _i = 0, resultData200_12 = resultData200; _i < resultData200_12.length; _i++) {
                            var item = resultData200_12[_i];
                            result200.push(Anonymous4.fromJS(item));
                        }
                    }
                    return result200;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @org Name of organisation.
         * @username Name of the user.
         * @accept (optional) Is used to set specified media type.
         * @return Concealed.
         */
        OrgsClient.prototype.deletePublicMembers = function (org, username, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/orgs/{org}/public_members/{username}";
            if (org === undefined || org === null)
                throw new Error("The parameter 'org' must be defined.");
            url_ = url_.replace("{org}", encodeURIComponent("" + org));
            if (username === undefined || username === null)
                throw new Error("The parameter 'username' must be defined.");
            url_ = url_.replace("{username}", encodeURIComponent("" + username));
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "DELETE",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processDeletePublicMembers(_response);
            });
        };
        OrgsClient.prototype.processDeletePublicMembers = function (response) {
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 204) {
                return response.text().then(function (_responseText) {
                    return;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @org Name of organisation.
         * @username Name of the user.
         * @accept (optional) Is used to set specified media type.
         * @return User is a public member.
         */
        OrgsClient.prototype.getPublicMembers = function (org, username, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/orgs/{org}/public_members/{username}";
            if (org === undefined || org === null)
                throw new Error("The parameter 'org' must be defined.");
            url_ = url_.replace("{org}", encodeURIComponent("" + org));
            if (username === undefined || username === null)
                throw new Error("The parameter 'username' must be defined.");
            url_ = url_.replace("{username}", encodeURIComponent("" + username));
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processGetPublicMembers(_response);
            });
        };
        OrgsClient.prototype.processGetPublicMembers = function (response) {
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 204) {
                return response.text().then(function (_responseText) {
                    return;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 404) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @org Name of organisation.
         * @username Name of the user.
         * @accept (optional) Is used to set specified media type.
         * @return Publicized.
         */
        OrgsClient.prototype.putPublicMembers = function (org, username, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/orgs/{org}/public_members/{username}";
            if (org === undefined || org === null)
                throw new Error("The parameter 'org' must be defined.");
            url_ = url_.replace("{org}", encodeURIComponent("" + org));
            if (username === undefined || username === null)
                throw new Error("The parameter 'username' must be defined.");
            url_ = url_.replace("{username}", encodeURIComponent("" + username));
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "PUT",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processPutPublicMembers(_response);
            });
        };
        OrgsClient.prototype.processPutPublicMembers = function (response) {
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 204) {
                return response.text().then(function (_responseText) {
                    return;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @org Name of organisation.
         * @type (optional)
         * @accept (optional) Is used to set specified media type.
         * @return OK
         */
        OrgsClient.prototype.getRepos = function (org, type, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/orgs/{org}/repos?";
            if (org === undefined || org === null)
                throw new Error("The parameter 'org' must be defined.");
            url_ = url_.replace("{org}", encodeURIComponent("" + org));
            if (type !== undefined)
                url_ += "type=" + encodeURIComponent("" + type) + "&";
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processGetRepos(_response);
            });
        };
        OrgsClient.prototype.processGetRepos = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    if (resultData200 && resultData200.constructor === Array) {
                        result200 = [];
                        for (var _i = 0, resultData200_13 = resultData200; _i < resultData200_13.length; _i++) {
                            var item = resultData200_13[_i];
                            result200.push(Anonymous6.fromJS(item));
                        }
                    }
                    return result200;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @org Name of organisation.
         * @accept (optional) Is used to set specified media type.
         * @return Created
         */
        OrgsClient.prototype.postRepos = function (org, body, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/orgs/{org}/repos";
            if (org === undefined || org === null)
                throw new Error("The parameter 'org' must be defined.");
            url_ = url_.replace("{org}", encodeURIComponent("" + org));
            url_ = url_.replace(/[?&]$/, "");
            var content_ = JSON.stringify(body);
            var options_ = {
                body: content_,
                method: "POST",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processPostRepos(_response);
            });
        };
        OrgsClient.prototype.processPostRepos = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 201) {
                return response.text().then(function (_responseText) {
                    var result201 = null;
                    var resultData201 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    if (resultData201 && resultData201.constructor === Array) {
                        result201 = [];
                        for (var _i = 0, resultData201_1 = resultData201; _i < resultData201_1.length; _i++) {
                            var item = resultData201_1[_i];
                            result201.push(Anonymous6.fromJS(item));
                        }
                    }
                    return result201;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @org Name of organisation.
         * @accept (optional) Is used to set specified media type.
         * @return OK
         */
        OrgsClient.prototype.getTeams = function (org, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/orgs/{org}/teams";
            if (org === undefined || org === null)
                throw new Error("The parameter 'org' must be defined.");
            url_ = url_.replace("{org}", encodeURIComponent("" + org));
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processGetTeams(_response);
            });
        };
        OrgsClient.prototype.processGetTeams = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    if (resultData200 && resultData200.constructor === Array) {
                        result200 = [];
                        for (var _i = 0, resultData200_14 = resultData200; _i < resultData200_14.length; _i++) {
                            var item = resultData200_14[_i];
                            result200.push(Anonymous7.fromJS(item));
                        }
                    }
                    return result200;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @org Name of organisation.
         * @accept (optional) Is used to set specified media type.
         * @return Created
         */
        OrgsClient.prototype.postTeams = function (org, body, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/orgs/{org}/teams";
            if (org === undefined || org === null)
                throw new Error("The parameter 'org' must be defined.");
            url_ = url_.replace("{org}", encodeURIComponent("" + org));
            url_ = url_.replace(/[?&]$/, "");
            var content_ = JSON.stringify(body);
            var options_ = {
                body: content_,
                method: "POST",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processPostTeams(_response);
            });
        };
        OrgsClient.prototype.processPostTeams = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 201) {
                return response.text().then(function (_responseText) {
                    var result201 = null;
                    var resultData201 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    result201 = resultData201 ? Team.fromJS(resultData201) : new Team();
                    return result201;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        return OrgsClient;
    }(ClientBase));
    GithubApiClient.OrgsClient = OrgsClient;
    var ReposClient = /** @class */ (function (_super) {
        __extends(ReposClient, _super);
        function ReposClient(baseUrl, http) {
            var _this = _super.call(this) || this;
            _this.jsonParseReviver = undefined;
            _this.http = http ? http : window;
            _this.baseUrl = baseUrl ? baseUrl : "https://api.github.com";
            return _this;
        }
        /**
         * @owner Name of repository owner.
         * @repo Name of repository.
         * @accept (optional) Is used to set specified media type.
         * @return OK
         */
        ReposClient.prototype.getAssigneesAll = function (owner, repo, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/repos/{owner}/{repo}/assignees";
            if (owner === undefined || owner === null)
                throw new Error("The parameter 'owner' must be defined.");
            url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
            if (repo === undefined || repo === null)
                throw new Error("The parameter 'repo' must be defined.");
            url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processGetAssigneesAll(_response);
            });
        };
        ReposClient.prototype.processGetAssigneesAll = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    if (resultData200 && resultData200.constructor === Array) {
                        result200 = [];
                        for (var _i = 0, resultData200_15 = resultData200; _i < resultData200_15.length; _i++) {
                            var item = resultData200_15[_i];
                            result200.push(Anonymous8.fromJS(item));
                        }
                    }
                    return result200;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @owner Name of repository owner.
         * @repo Name of repository.
         * @assignee Login of the assignee.
         * @accept (optional) Is used to set specified media type.
         * @return User is an assignee.
         */
        ReposClient.prototype.getAssignees = function (owner, repo, assignee, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/repos/{owner}/{repo}/assignees/{assignee}";
            if (owner === undefined || owner === null)
                throw new Error("The parameter 'owner' must be defined.");
            url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
            if (repo === undefined || repo === null)
                throw new Error("The parameter 'repo' must be defined.");
            url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
            if (assignee === undefined || assignee === null)
                throw new Error("The parameter 'assignee' must be defined.");
            url_ = url_.replace("{assignee}", encodeURIComponent("" + assignee));
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processGetAssignees(_response);
            });
        };
        ReposClient.prototype.processGetAssignees = function (response) {
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 204) {
                return response.text().then(function (_responseText) {
                    return;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 404) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @owner Name of repository owner.
         * @repo Name of repository.
         * @accept (optional) Is used to set specified media type.
         * @return OK
         */
        ReposClient.prototype.getBranchesAll = function (owner, repo, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/repos/{owner}/{repo}/branches";
            if (owner === undefined || owner === null)
                throw new Error("The parameter 'owner' must be defined.");
            url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
            if (repo === undefined || repo === null)
                throw new Error("The parameter 'repo' must be defined.");
            url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processGetBranchesAll(_response);
            });
        };
        ReposClient.prototype.processGetBranchesAll = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    if (resultData200 && resultData200.constructor === Array) {
                        result200 = [];
                        for (var _i = 0, resultData200_16 = resultData200; _i < resultData200_16.length; _i++) {
                            var item = resultData200_16[_i];
                            result200.push(Anonymous9.fromJS(item));
                        }
                    }
                    return result200;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @owner Name of repository owner.
         * @repo Name of repository.
         * @branch Name of the branch.
         * @accept (optional) Is used to set specified media type.
         * @return OK
         */
        ReposClient.prototype.getBranches = function (owner, repo, branch, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/repos/{owner}/{repo}/branches/{branch}";
            if (owner === undefined || owner === null)
                throw new Error("The parameter 'owner' must be defined.");
            url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
            if (repo === undefined || repo === null)
                throw new Error("The parameter 'repo' must be defined.");
            url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
            if (branch === undefined || branch === null)
                throw new Error("The parameter 'branch' must be defined.");
            url_ = url_.replace("{branch}", encodeURIComponent("" + branch));
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processGetBranches(_response);
            });
        };
        ReposClient.prototype.processGetBranches = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    result200 = resultData200 ? Branch.fromJS(resultData200) : new Branch();
                    return result200;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @owner Name of repository owner.
         * @repo Name of repository.
         * @accept (optional) Is used to set specified media type.
         * @return OK
         */
        ReposClient.prototype.getCollaboratorsAll = function (owner, repo, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/repos/{owner}/{repo}/collaborators";
            if (owner === undefined || owner === null)
                throw new Error("The parameter 'owner' must be defined.");
            url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
            if (repo === undefined || repo === null)
                throw new Error("The parameter 'repo' must be defined.");
            url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processGetCollaboratorsAll(_response);
            });
        };
        ReposClient.prototype.processGetCollaboratorsAll = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    if (resultData200 && resultData200.constructor === Array) {
                        result200 = [];
                        for (var _i = 0, resultData200_17 = resultData200; _i < resultData200_17.length; _i++) {
                            var item = resultData200_17[_i];
                            result200.push(Anonymous4.fromJS(item));
                        }
                    }
                    return result200;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @owner Name of repository owner.
         * @repo Name of repository.
         * @user Login of the user.
         * @accept (optional) Is used to set specified media type.
         * @return Collaborator removed.
         */
        ReposClient.prototype.deleteCollaborators = function (owner, repo, user, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/repos/{owner}/{repo}/collaborators/{user}";
            if (owner === undefined || owner === null)
                throw new Error("The parameter 'owner' must be defined.");
            url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
            if (repo === undefined || repo === null)
                throw new Error("The parameter 'repo' must be defined.");
            url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
            if (user === undefined || user === null)
                throw new Error("The parameter 'user' must be defined.");
            url_ = url_.replace("{user}", encodeURIComponent("" + user));
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "DELETE",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processDeleteCollaborators(_response);
            });
        };
        ReposClient.prototype.processDeleteCollaborators = function (response) {
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 204) {
                return response.text().then(function (_responseText) {
                    return;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @owner Name of repository owner.
         * @repo Name of repository.
         * @user Login of the user.
         * @accept (optional) Is used to set specified media type.
         * @return User is a collaborator.
         */
        ReposClient.prototype.getCollaborators = function (owner, repo, user, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/repos/{owner}/{repo}/collaborators/{user}";
            if (owner === undefined || owner === null)
                throw new Error("The parameter 'owner' must be defined.");
            url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
            if (repo === undefined || repo === null)
                throw new Error("The parameter 'repo' must be defined.");
            url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
            if (user === undefined || user === null)
                throw new Error("The parameter 'user' must be defined.");
            url_ = url_.replace("{user}", encodeURIComponent("" + user));
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processGetCollaborators(_response);
            });
        };
        ReposClient.prototype.processGetCollaborators = function (response) {
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 204) {
                return response.text().then(function (_responseText) {
                    return;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 404) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @owner Name of repository owner.
         * @repo Name of repository.
         * @user Login of the user.
         * @accept (optional) Is used to set specified media type.
         * @return Collaborator added.
         */
        ReposClient.prototype.putCollaborators = function (owner, repo, user, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/repos/{owner}/{repo}/collaborators/{user}";
            if (owner === undefined || owner === null)
                throw new Error("The parameter 'owner' must be defined.");
            url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
            if (repo === undefined || repo === null)
                throw new Error("The parameter 'repo' must be defined.");
            url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
            if (user === undefined || user === null)
                throw new Error("The parameter 'user' must be defined.");
            url_ = url_.replace("{user}", encodeURIComponent("" + user));
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "PUT",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processPutCollaborators(_response);
            });
        };
        ReposClient.prototype.processPutCollaborators = function (response) {
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 204) {
                return response.text().then(function (_responseText) {
                    return;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @owner Name of repository owner.
         * @repo Name of repository.
         * @accept (optional) Is used to set specified media type.
         * @return OK
         */
        ReposClient.prototype.getCommentsAll = function (owner, repo, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/repos/{owner}/{repo}/comments";
            if (owner === undefined || owner === null)
                throw new Error("The parameter 'owner' must be defined.");
            url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
            if (repo === undefined || repo === null)
                throw new Error("The parameter 'repo' must be defined.");
            url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processGetCommentsAll(_response);
            });
        };
        ReposClient.prototype.processGetCommentsAll = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    if (resultData200 && resultData200.constructor === Array) {
                        result200 = [];
                        for (var _i = 0, resultData200_18 = resultData200; _i < resultData200_18.length; _i++) {
                            var item = resultData200_18[_i];
                            result200.push(Anonymous10.fromJS(item));
                        }
                    }
                    return result200;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @owner Name of repository owner.
         * @repo Name of repository.
         * @commentId Id of comment.
         * @accept (optional) Is used to set specified media type.
         * @return No content.
         */
        ReposClient.prototype.deleteComments = function (owner, repo, commentId, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/repos/{owner}/{repo}/comments/{commentId}";
            if (owner === undefined || owner === null)
                throw new Error("The parameter 'owner' must be defined.");
            url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
            if (repo === undefined || repo === null)
                throw new Error("The parameter 'repo' must be defined.");
            url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
            if (commentId === undefined || commentId === null)
                throw new Error("The parameter 'commentId' must be defined.");
            url_ = url_.replace("{commentId}", encodeURIComponent("" + commentId));
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "DELETE",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processDeleteComments(_response);
            });
        };
        ReposClient.prototype.processDeleteComments = function (response) {
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 204) {
                return response.text().then(function (_responseText) {
                    return;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @owner Name of repository owner.
         * @repo Name of repository.
         * @commentId Id of comment.
         * @accept (optional) Is used to set specified media type.
         * @return OK
         */
        ReposClient.prototype.getComments = function (owner, repo, commentId, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/repos/{owner}/{repo}/comments/{commentId}";
            if (owner === undefined || owner === null)
                throw new Error("The parameter 'owner' must be defined.");
            url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
            if (repo === undefined || repo === null)
                throw new Error("The parameter 'repo' must be defined.");
            url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
            if (commentId === undefined || commentId === null)
                throw new Error("The parameter 'commentId' must be defined.");
            url_ = url_.replace("{commentId}", encodeURIComponent("" + commentId));
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processGetComments(_response);
            });
        };
        ReposClient.prototype.processGetComments = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    result200 = resultData200 ? CommitComments.fromJS(resultData200) : new CommitComments();
                    return result200;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @owner Name of repository owner.
         * @repo Name of repository.
         * @commentId Id of comment.
         * @accept (optional) Is used to set specified media type.
         * @return OK
         */
        ReposClient.prototype.patchComments = function (owner, repo, commentId, body, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/repos/{owner}/{repo}/comments/{commentId}";
            if (owner === undefined || owner === null)
                throw new Error("The parameter 'owner' must be defined.");
            url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
            if (repo === undefined || repo === null)
                throw new Error("The parameter 'repo' must be defined.");
            url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
            if (commentId === undefined || commentId === null)
                throw new Error("The parameter 'commentId' must be defined.");
            url_ = url_.replace("{commentId}", encodeURIComponent("" + commentId));
            url_ = url_.replace(/[?&]$/, "");
            var content_ = JSON.stringify(body);
            var options_ = {
                body: content_,
                method: "PATCH",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processPatchComments(_response);
            });
        };
        ReposClient.prototype.processPatchComments = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    result200 = resultData200 ? CommitComments.fromJS(resultData200) : new CommitComments();
                    return result200;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @owner Name of repository owner.
         * @repo Name of repository.
         * @since (optional) The time should be passed in as UTC in the ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.
        Example: "2012-10-09T23:39:01Z".
         * @sha (optional) Sha or branch to start listing commits from.
         * @path (optional) Only commits containing this file path will be returned.
         * @author (optional) GitHub login, name, or email by which to filter by commit author.
         * @until (optional) ISO 8601 Date - Only commits before this date will be returned.
         * @accept (optional) Is used to set specified media type.
         * @return OK
         */
        ReposClient.prototype.getCommitsAll = function (owner, repo, since, sha, path, author, until, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/repos/{owner}/{repo}/commits?";
            if (owner === undefined || owner === null)
                throw new Error("The parameter 'owner' must be defined.");
            url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
            if (repo === undefined || repo === null)
                throw new Error("The parameter 'repo' must be defined.");
            url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
            if (since !== undefined)
                url_ += "since=" + encodeURIComponent("" + since) + "&";
            if (sha !== undefined)
                url_ += "sha=" + encodeURIComponent("" + sha) + "&";
            if (path !== undefined)
                url_ += "path=" + encodeURIComponent("" + path) + "&";
            if (author !== undefined)
                url_ += "author=" + encodeURIComponent("" + author) + "&";
            if (until !== undefined)
                url_ += "until=" + encodeURIComponent("" + until) + "&";
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processGetCommitsAll(_response);
            });
        };
        ReposClient.prototype.processGetCommitsAll = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    if (resultData200 && resultData200.constructor === Array) {
                        result200 = [];
                        for (var _i = 0, resultData200_19 = resultData200; _i < resultData200_19.length; _i++) {
                            var item = resultData200_19[_i];
                            result200.push(Anonymous11.fromJS(item));
                        }
                    }
                    return result200;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @owner Name of repository owner.
         * @repo Name of repository.
         * @accept (optional) Is used to set specified media type.
         * @return OK
         */
        ReposClient.prototype.commitsGetStatus = function (owner, repo, ref, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/repos/{owner}/{repo}/commits/{ref}/status";
            if (owner === undefined || owner === null)
                throw new Error("The parameter 'owner' must be defined.");
            url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
            if (repo === undefined || repo === null)
                throw new Error("The parameter 'repo' must be defined.");
            url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
            if (ref === undefined || ref === null)
                throw new Error("The parameter 'ref' must be defined.");
            url_ = url_.replace("{ref}", encodeURIComponent("" + ref));
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processCommitsGetStatus(_response);
            });
        };
        ReposClient.prototype.processCommitsGetStatus = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    if (resultData200 && resultData200.constructor === Array) {
                        result200 = [];
                        for (var _i = 0, resultData200_20 = resultData200; _i < resultData200_20.length; _i++) {
                            var item = resultData200_20[_i];
                            result200.push(Anonymous12.fromJS(item));
                        }
                    }
                    return result200;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @owner Name of repository owner.
         * @repo Name of repository.
         * @shaCode SHA-1 code of the commit.
         * @accept (optional) Is used to set specified media type.
         * @return OK
         */
        ReposClient.prototype.getCommits = function (owner, repo, shaCode, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/repos/{owner}/{repo}/commits/{shaCode}";
            if (owner === undefined || owner === null)
                throw new Error("The parameter 'owner' must be defined.");
            url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
            if (repo === undefined || repo === null)
                throw new Error("The parameter 'repo' must be defined.");
            url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
            if (shaCode === undefined || shaCode === null)
                throw new Error("The parameter 'shaCode' must be defined.");
            url_ = url_.replace("{shaCode}", encodeURIComponent("" + shaCode));
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processGetCommits(_response);
            });
        };
        ReposClient.prototype.processGetCommits = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    result200 = resultData200 ? Commit.fromJS(resultData200) : new Commit();
                    return result200;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @owner Name of repository owner.
         * @repo Name of repository.
         * @shaCode SHA-1 code of the commit.
         * @accept (optional) Is used to set specified media type.
         * @return OK
         */
        ReposClient.prototype.commitsGetComments = function (owner, repo, shaCode, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/repos/{owner}/{repo}/commits/{shaCode}/comments";
            if (owner === undefined || owner === null)
                throw new Error("The parameter 'owner' must be defined.");
            url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
            if (repo === undefined || repo === null)
                throw new Error("The parameter 'repo' must be defined.");
            url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
            if (shaCode === undefined || shaCode === null)
                throw new Error("The parameter 'shaCode' must be defined.");
            url_ = url_.replace("{shaCode}", encodeURIComponent("" + shaCode));
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processCommitsGetComments(_response);
            });
        };
        ReposClient.prototype.processCommitsGetComments = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    if (resultData200 && resultData200.constructor === Array) {
                        result200 = [];
                        for (var _i = 0, resultData200_21 = resultData200; _i < resultData200_21.length; _i++) {
                            var item = resultData200_21[_i];
                            result200.push(Anonymous10.fromJS(item));
                        }
                    }
                    return result200;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @owner Name of repository owner.
         * @repo Name of repository.
         * @shaCode SHA-1 code of the commit.
         * @accept (optional) Is used to set specified media type.
         * @return Created
         */
        ReposClient.prototype.commitsPostComments = function (owner, repo, shaCode, body, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/repos/{owner}/{repo}/commits/{shaCode}/comments";
            if (owner === undefined || owner === null)
                throw new Error("The parameter 'owner' must be defined.");
            url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
            if (repo === undefined || repo === null)
                throw new Error("The parameter 'repo' must be defined.");
            url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
            if (shaCode === undefined || shaCode === null)
                throw new Error("The parameter 'shaCode' must be defined.");
            url_ = url_.replace("{shaCode}", encodeURIComponent("" + shaCode));
            url_ = url_.replace(/[?&]$/, "");
            var content_ = JSON.stringify(body);
            var options_ = {
                body: content_,
                method: "POST",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processCommitsPostComments(_response);
            });
        };
        ReposClient.prototype.processCommitsPostComments = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 201) {
                return response.text().then(function (_responseText) {
                    var result201 = null;
                    var resultData201 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    result201 = resultData201 ? CommitComments.fromJS(resultData201) : new CommitComments();
                    return result201;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @owner Name of repository owner.
         * @repo Name of repository.
         * @accept (optional) Is used to set specified media type.
         * @return OK
         */
        ReposClient.prototype.getCompare = function (owner, repo, baseId, headId, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/repos/{owner}/{repo}/compare/{baseId}...{headId}";
            if (owner === undefined || owner === null)
                throw new Error("The parameter 'owner' must be defined.");
            url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
            if (repo === undefined || repo === null)
                throw new Error("The parameter 'repo' must be defined.");
            url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
            if (baseId === undefined || baseId === null)
                throw new Error("The parameter 'baseId' must be defined.");
            url_ = url_.replace("{baseId}", encodeURIComponent("" + baseId));
            if (headId === undefined || headId === null)
                throw new Error("The parameter 'headId' must be defined.");
            url_ = url_.replace("{headId}", encodeURIComponent("" + headId));
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processGetCompare(_response);
            });
        };
        ReposClient.prototype.processGetCompare = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    result200 = resultData200 ? CompareCommits.fromJS(resultData200) : new CompareCommits();
                    return result200;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @owner Name of repository owner.
         * @repo Name of repository.
         * @accept (optional) Is used to set specified media type.
         * @return OK
         */
        ReposClient.prototype.deleteContents = function (owner, repo, path, body, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/repos/{owner}/{repo}/contents/{path}";
            if (owner === undefined || owner === null)
                throw new Error("The parameter 'owner' must be defined.");
            url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
            if (repo === undefined || repo === null)
                throw new Error("The parameter 'repo' must be defined.");
            url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
            if (path === undefined || path === null)
                throw new Error("The parameter 'path' must be defined.");
            url_ = url_.replace("{path}", encodeURIComponent("" + path));
            url_ = url_.replace(/[?&]$/, "");
            var content_ = JSON.stringify(body);
            var options_ = {
                body: content_,
                method: "DELETE",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processDeleteContents(_response);
            });
        };
        ReposClient.prototype.processDeleteContents = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    result200 = resultData200 ? DeleteFile.fromJS(resultData200) : new DeleteFile();
                    return result200;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @owner Name of repository owner.
         * @repo Name of repository.
         * @pathQuery (optional) The content path.
         * @ref (optional) The String name of the Commit/Branch/Tag. Defaults to 'master'.
         * @accept (optional) Is used to set specified media type.
         * @return OK
         */
        ReposClient.prototype.getContents = function (owner, repo, pathPath, pathQuery, ref, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/repos/{owner}/{repo}/contents/{path}?";
            if (owner === undefined || owner === null)
                throw new Error("The parameter 'owner' must be defined.");
            url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
            if (repo === undefined || repo === null)
                throw new Error("The parameter 'repo' must be defined.");
            url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
            if (pathPath === undefined || pathPath === null)
                throw new Error("The parameter 'pathPath' must be defined.");
            url_ = url_.replace("{path}", encodeURIComponent("" + pathPath));
            if (pathQuery !== undefined)
                url_ += "path=" + encodeURIComponent("" + pathQuery) + "&";
            if (ref !== undefined)
                url_ += "ref=" + encodeURIComponent("" + ref) + "&";
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processGetContents(_response);
            });
        };
        ReposClient.prototype.processGetContents = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    result200 = resultData200 ? ContentsPath.fromJS(resultData200) : new ContentsPath();
                    return result200;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @owner Name of repository owner.
         * @repo Name of repository.
         * @accept (optional) Is used to set specified media type.
         * @return OK
         */
        ReposClient.prototype.putContents = function (owner, repo, path, body, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/repos/{owner}/{repo}/contents/{path}";
            if (owner === undefined || owner === null)
                throw new Error("The parameter 'owner' must be defined.");
            url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
            if (repo === undefined || repo === null)
                throw new Error("The parameter 'repo' must be defined.");
            url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
            if (path === undefined || path === null)
                throw new Error("The parameter 'path' must be defined.");
            url_ = url_.replace("{path}", encodeURIComponent("" + path));
            url_ = url_.replace(/[?&]$/, "");
            var content_ = JSON.stringify(body);
            var options_ = {
                body: content_,
                method: "PUT",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processPutContents(_response);
            });
        };
        ReposClient.prototype.processPutContents = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    result200 = resultData200 ? CreateFile.fromJS(resultData200) : new CreateFile();
                    return result200;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @owner Name of repository owner.
         * @repo Name of repository.
         * @anon Set to 1 or true to include anonymous contributors in results.
         * @accept (optional) Is used to set specified media type.
         * @return OK
         */
        ReposClient.prototype.getContributors = function (owner, repo, anon, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/repos/{owner}/{repo}/contributors?";
            if (owner === undefined || owner === null)
                throw new Error("The parameter 'owner' must be defined.");
            url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
            if (repo === undefined || repo === null)
                throw new Error("The parameter 'repo' must be defined.");
            url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
            if (anon === undefined || anon === null)
                throw new Error("The parameter 'anon' must be defined and cannot be null.");
            else
                url_ += "anon=" + encodeURIComponent("" + anon) + "&";
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processGetContributors(_response);
            });
        };
        ReposClient.prototype.processGetContributors = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    if (resultData200 && resultData200.constructor === Array) {
                        result200 = [];
                        for (var _i = 0, resultData200_22 = resultData200; _i < resultData200_22.length; _i++) {
                            var item = resultData200_22[_i];
                            result200.push(Anonymous13.fromJS(item));
                        }
                    }
                    return result200;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @owner Name of repository owner.
         * @repo Name of repository.
         * @accept (optional) Is used to set specified media type.
         * @return OK
         */
        ReposClient.prototype.getDeployments = function (owner, repo, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/repos/{owner}/{repo}/deployments";
            if (owner === undefined || owner === null)
                throw new Error("The parameter 'owner' must be defined.");
            url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
            if (repo === undefined || repo === null)
                throw new Error("The parameter 'repo' must be defined.");
            url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processGetDeployments(_response);
            });
        };
        ReposClient.prototype.processGetDeployments = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    if (resultData200 && resultData200.constructor === Array) {
                        result200 = [];
                        for (var _i = 0, resultData200_23 = resultData200; _i < resultData200_23.length; _i++) {
                            var item = resultData200_23[_i];
                            result200.push(Anonymous14.fromJS(item));
                        }
                    }
                    return result200;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @owner Name of repository owner.
         * @repo Name of repository.
         * @accept (optional) Is used to set specified media type.
         * @return Created
         */
        ReposClient.prototype.postDeployments = function (owner, repo, body, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/repos/{owner}/{repo}/deployments";
            if (owner === undefined || owner === null)
                throw new Error("The parameter 'owner' must be defined.");
            url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
            if (repo === undefined || repo === null)
                throw new Error("The parameter 'repo' must be defined.");
            url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
            url_ = url_.replace(/[?&]$/, "");
            var content_ = JSON.stringify(body);
            var options_ = {
                body: content_,
                method: "POST",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processPostDeployments(_response);
            });
        };
        ReposClient.prototype.processPostDeployments = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 201) {
                return response.text().then(function (_responseText) {
                    var result201 = null;
                    var resultData201 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    result201 = resultData201 ? DeploymentResp.fromJS(resultData201) : new DeploymentResp();
                    return result201;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @owner Name of repository owner.
         * @repo Name of repository.
         * @id The Deployment ID to list the statuses from.
         * @accept (optional) Is used to set specified media type.
         * @return OK
         */
        ReposClient.prototype.deploymentsGetStatuses = function (owner, repo, id, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/repos/{owner}/{repo}/deployments/{id}/statuses";
            if (owner === undefined || owner === null)
                throw new Error("The parameter 'owner' must be defined.");
            url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
            if (repo === undefined || repo === null)
                throw new Error("The parameter 'repo' must be defined.");
            url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
            if (id === undefined || id === null)
                throw new Error("The parameter 'id' must be defined.");
            url_ = url_.replace("{id}", encodeURIComponent("" + id));
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processDeploymentsGetStatuses(_response);
            });
        };
        ReposClient.prototype.processDeploymentsGetStatuses = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    if (resultData200 && resultData200.constructor === Array) {
                        result200 = [];
                        for (var _i = 0, resultData200_24 = resultData200; _i < resultData200_24.length; _i++) {
                            var item = resultData200_24[_i];
                            result200.push(Anonymous15.fromJS(item));
                        }
                    }
                    return result200;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @owner Name of repository owner.
         * @repo Name of repository.
         * @id The Deployment ID to list the statuses from.
         * @accept (optional) Is used to set specified media type.
         * @return ok
         */
        ReposClient.prototype.deploymentsPostStatuses = function (owner, repo, id, body, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/repos/{owner}/{repo}/deployments/{id}/statuses";
            if (owner === undefined || owner === null)
                throw new Error("The parameter 'owner' must be defined.");
            url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
            if (repo === undefined || repo === null)
                throw new Error("The parameter 'repo' must be defined.");
            url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
            if (id === undefined || id === null)
                throw new Error("The parameter 'id' must be defined.");
            url_ = url_.replace("{id}", encodeURIComponent("" + id));
            url_ = url_.replace(/[?&]$/, "");
            var content_ = JSON.stringify(body);
            var options_ = {
                body: content_,
                method: "POST",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processDeploymentsPostStatuses(_response);
            });
        };
        ReposClient.prototype.processDeploymentsPostStatuses = function (response) {
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 201) {
                return response.text().then(function (_responseText) {
                    return;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @owner Name of repository owner.
         * @repo Name of repository.
         * @accept (optional) Is used to set specified media type.
         * @return OK
         */
        ReposClient.prototype.getDownloads = function (owner, repo, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/repos/{owner}/{repo}/downloads";
            if (owner === undefined || owner === null)
                throw new Error("The parameter 'owner' must be defined.");
            url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
            if (repo === undefined || repo === null)
                throw new Error("The parameter 'repo' must be defined.");
            url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processGetDownloads(_response);
            });
        };
        ReposClient.prototype.processGetDownloads = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    result200 = resultData200 ? Downloads.fromJS(resultData200) : new Downloads();
                    return result200;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @owner Name of repository owner.
         * @repo Name of repository.
         * @downloadId Id of download.
         * @accept (optional) Is used to set specified media type.
         * @return No content.
         */
        ReposClient.prototype.deleteDownloads = function (owner, repo, downloadId, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/repos/{owner}/{repo}/downloads/{downloadId}";
            if (owner === undefined || owner === null)
                throw new Error("The parameter 'owner' must be defined.");
            url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
            if (repo === undefined || repo === null)
                throw new Error("The parameter 'repo' must be defined.");
            url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
            if (downloadId === undefined || downloadId === null)
                throw new Error("The parameter 'downloadId' must be defined.");
            url_ = url_.replace("{downloadId}", encodeURIComponent("" + downloadId));
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "DELETE",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processDeleteDownloads(_response);
            });
        };
        ReposClient.prototype.processDeleteDownloads = function (response) {
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 204) {
                return response.text().then(function (_responseText) {
                    return;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @owner Name of repository owner.
         * @repo Name of repository.
         * @downloadId Id of download.
         * @accept (optional) Is used to set specified media type.
         * @return OK
         */
        ReposClient.prototype.getDownloads2 = function (owner, repo, downloadId, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/repos/{owner}/{repo}/downloads/{downloadId}";
            if (owner === undefined || owner === null)
                throw new Error("The parameter 'owner' must be defined.");
            url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
            if (repo === undefined || repo === null)
                throw new Error("The parameter 'repo' must be defined.");
            url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
            if (downloadId === undefined || downloadId === null)
                throw new Error("The parameter 'downloadId' must be defined.");
            url_ = url_.replace("{downloadId}", encodeURIComponent("" + downloadId));
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processGetDownloads2(_response);
            });
        };
        ReposClient.prototype.processGetDownloads2 = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    result200 = resultData200 ? Downloads.fromJS(resultData200) : new Downloads();
                    return result200;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @owner Name of repository owner.
         * @repo Name of repository.
         * @accept (optional) Is used to set specified media type.
         * @return OK
         */
        ReposClient.prototype.getEvents = function (owner, repo, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/repos/{owner}/{repo}/events";
            if (owner === undefined || owner === null)
                throw new Error("The parameter 'owner' must be defined.");
            url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
            if (repo === undefined || repo === null)
                throw new Error("The parameter 'repo' must be defined.");
            url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processGetEvents(_response);
            });
        };
        ReposClient.prototype.processGetEvents = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    result200 = resultData200 ? Events.fromJS(resultData200) : new Events();
                    return result200;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @owner Name of repository owner.
         * @repo Name of repository.
         * @sort (optional)
         * @accept (optional) Is used to set specified media type.
         * @return OK
         */
        ReposClient.prototype.getForks = function (owner, repo, sort, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/repos/{owner}/{repo}/forks?";
            if (owner === undefined || owner === null)
                throw new Error("The parameter 'owner' must be defined.");
            url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
            if (repo === undefined || repo === null)
                throw new Error("The parameter 'repo' must be defined.");
            url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
            if (sort !== undefined)
                url_ += "sort=" + encodeURIComponent("" + sort) + "&";
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processGetForks(_response);
            });
        };
        ReposClient.prototype.processGetForks = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    if (resultData200 && resultData200.constructor === Array) {
                        result200 = [];
                        for (var _i = 0, resultData200_25 = resultData200; _i < resultData200_25.length; _i++) {
                            var item = resultData200_25[_i];
                            result200.push(Anonymous16.fromJS(item));
                        }
                    }
                    return result200;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @owner Name of repository owner.
         * @repo Name of repository.
         * @accept (optional) Is used to set specified media type.
         * @return Created
         */
        ReposClient.prototype.postForks = function (owner, repo, body, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/repos/{owner}/{repo}/forks";
            if (owner === undefined || owner === null)
                throw new Error("The parameter 'owner' must be defined.");
            url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
            if (repo === undefined || repo === null)
                throw new Error("The parameter 'repo' must be defined.");
            url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
            url_ = url_.replace(/[?&]$/, "");
            var content_ = JSON.stringify(body);
            var options_ = {
                body: content_,
                method: "POST",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processPostForks(_response);
            });
        };
        ReposClient.prototype.processPostForks = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 201) {
                return response.text().then(function (_responseText) {
                    var result201 = null;
                    var resultData201 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    result201 = resultData201 ? Fork.fromJS(resultData201) : new Fork();
                    return result201;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @owner Name of repository owner.
         * @repo Name of repository.
         * @accept (optional) Is used to set specified media type.
         * @return Created
         */
        ReposClient.prototype.gitPostBlobs = function (owner, repo, body, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/repos/{owner}/{repo}/git/blobs";
            if (owner === undefined || owner === null)
                throw new Error("The parameter 'owner' must be defined.");
            url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
            if (repo === undefined || repo === null)
                throw new Error("The parameter 'repo' must be defined.");
            url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
            url_ = url_.replace(/[?&]$/, "");
            var content_ = JSON.stringify(body);
            var options_ = {
                body: content_,
                method: "POST",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processGitPostBlobs(_response);
            });
        };
        ReposClient.prototype.processGitPostBlobs = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 201) {
                return response.text().then(function (_responseText) {
                    var result201 = null;
                    var resultData201 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    result201 = resultData201 ? Blobs.fromJS(resultData201) : new Blobs();
                    return result201;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @owner Name of repository owner.
         * @repo Name of repository.
         * @shaCode SHA-1 code.
         * @accept (optional) Is used to set specified media type.
         * @return OK
         */
        ReposClient.prototype.gitGetBlobs = function (owner, repo, shaCode, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/repos/{owner}/{repo}/git/blobs/{shaCode}";
            if (owner === undefined || owner === null)
                throw new Error("The parameter 'owner' must be defined.");
            url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
            if (repo === undefined || repo === null)
                throw new Error("The parameter 'repo' must be defined.");
            url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
            if (shaCode === undefined || shaCode === null)
                throw new Error("The parameter 'shaCode' must be defined.");
            url_ = url_.replace("{shaCode}", encodeURIComponent("" + shaCode));
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processGitGetBlobs(_response);
            });
        };
        ReposClient.prototype.processGitGetBlobs = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    result200 = resultData200 ? Blob.fromJS(resultData200) : new Blob();
                    return result200;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @owner Name of repository owner.
         * @repo Name of repository.
         * @accept (optional) Is used to set specified media type.
         * @return Created
         */
        ReposClient.prototype.gitPostCommits = function (owner, repo, body, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/repos/{owner}/{repo}/git/commits";
            if (owner === undefined || owner === null)
                throw new Error("The parameter 'owner' must be defined.");
            url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
            if (repo === undefined || repo === null)
                throw new Error("The parameter 'repo' must be defined.");
            url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
            url_ = url_.replace(/[?&]$/, "");
            var content_ = JSON.stringify(body);
            var options_ = {
                body: content_,
                method: "POST",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processGitPostCommits(_response);
            });
        };
        ReposClient.prototype.processGitPostCommits = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 201) {
                return response.text().then(function (_responseText) {
                    var result201 = null;
                    var resultData201 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    result201 = resultData201 ? GitCommit.fromJS(resultData201) : new GitCommit();
                    return result201;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @owner Name of repository owner.
         * @repo Name of repository.
         * @shaCode SHA-1 code.
         * @accept (optional) Is used to set specified media type.
         * @return OK
         */
        ReposClient.prototype.gitGetCommits = function (owner, repo, shaCode, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/repos/{owner}/{repo}/git/commits/{shaCode}";
            if (owner === undefined || owner === null)
                throw new Error("The parameter 'owner' must be defined.");
            url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
            if (repo === undefined || repo === null)
                throw new Error("The parameter 'repo' must be defined.");
            url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
            if (shaCode === undefined || shaCode === null)
                throw new Error("The parameter 'shaCode' must be defined.");
            url_ = url_.replace("{shaCode}", encodeURIComponent("" + shaCode));
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processGitGetCommits(_response);
            });
        };
        ReposClient.prototype.processGitGetCommits = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    result200 = resultData200 ? RepoCommit.fromJS(resultData200) : new RepoCommit();
                    return result200;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @owner Name of repository owner.
         * @repo Name of repository.
         * @accept (optional) Is used to set specified media type.
         * @return OK
         */
        ReposClient.prototype.gitGetRefsAll = function (owner, repo, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/repos/{owner}/{repo}/git/refs";
            if (owner === undefined || owner === null)
                throw new Error("The parameter 'owner' must be defined.");
            url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
            if (repo === undefined || repo === null)
                throw new Error("The parameter 'repo' must be defined.");
            url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processGitGetRefsAll(_response);
            });
        };
        ReposClient.prototype.processGitGetRefsAll = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    if (resultData200 && resultData200.constructor === Array) {
                        result200 = [];
                        for (var _i = 0, resultData200_26 = resultData200; _i < resultData200_26.length; _i++) {
                            var item = resultData200_26[_i];
                            result200.push(Anonymous17.fromJS(item));
                        }
                    }
                    return result200;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @owner Name of repository owner.
         * @repo Name of repository.
         * @accept (optional) Is used to set specified media type.
         * @return Created
         */
        ReposClient.prototype.gitPostRefs = function (owner, repo, body, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/repos/{owner}/{repo}/git/refs";
            if (owner === undefined || owner === null)
                throw new Error("The parameter 'owner' must be defined.");
            url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
            if (repo === undefined || repo === null)
                throw new Error("The parameter 'repo' must be defined.");
            url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
            url_ = url_.replace(/[?&]$/, "");
            var content_ = JSON.stringify(body);
            var options_ = {
                body: content_,
                method: "POST",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processGitPostRefs(_response);
            });
        };
        ReposClient.prototype.processGitPostRefs = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 201) {
                return response.text().then(function (_responseText) {
                    var result201 = null;
                    var resultData201 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    result201 = resultData201 ? HeadBranch.fromJS(resultData201) : new HeadBranch();
                    return result201;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @owner Name of repository owner.
         * @repo Name of repository.
         * @accept (optional) Is used to set specified media type.
         * @return No Content
         */
        ReposClient.prototype.gitDeleteRefs = function (owner, repo, ref, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/repos/{owner}/{repo}/git/refs/{ref}";
            if (owner === undefined || owner === null)
                throw new Error("The parameter 'owner' must be defined.");
            url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
            if (repo === undefined || repo === null)
                throw new Error("The parameter 'repo' must be defined.");
            url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
            if (ref === undefined || ref === null)
                throw new Error("The parameter 'ref' must be defined.");
            url_ = url_.replace("{ref}", encodeURIComponent("" + ref));
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "DELETE",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processGitDeleteRefs(_response);
            });
        };
        ReposClient.prototype.processGitDeleteRefs = function (response) {
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 204) {
                return response.text().then(function (_responseText) {
                    return;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @owner Name of repository owner.
         * @repo Name of repository.
         * @accept (optional) Is used to set specified media type.
         * @return OK
         */
        ReposClient.prototype.gitGetRefs = function (owner, repo, ref, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/repos/{owner}/{repo}/git/refs/{ref}";
            if (owner === undefined || owner === null)
                throw new Error("The parameter 'owner' must be defined.");
            url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
            if (repo === undefined || repo === null)
                throw new Error("The parameter 'repo' must be defined.");
            url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
            if (ref === undefined || ref === null)
                throw new Error("The parameter 'ref' must be defined.");
            url_ = url_.replace("{ref}", encodeURIComponent("" + ref));
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processGitGetRefs(_response);
            });
        };
        ReposClient.prototype.processGitGetRefs = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    result200 = resultData200 ? HeadBranch.fromJS(resultData200) : new HeadBranch();
                    return result200;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @owner Name of repository owner.
         * @repo Name of repository.
         * @accept (optional) Is used to set specified media type.
         * @return OK
         */
        ReposClient.prototype.gitPatchRefs = function (owner, repo, ref, body, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/repos/{owner}/{repo}/git/refs/{ref}";
            if (owner === undefined || owner === null)
                throw new Error("The parameter 'owner' must be defined.");
            url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
            if (repo === undefined || repo === null)
                throw new Error("The parameter 'repo' must be defined.");
            url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
            if (ref === undefined || ref === null)
                throw new Error("The parameter 'ref' must be defined.");
            url_ = url_.replace("{ref}", encodeURIComponent("" + ref));
            url_ = url_.replace(/[?&]$/, "");
            var content_ = JSON.stringify(body);
            var options_ = {
                body: content_,
                method: "PATCH",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processGitPatchRefs(_response);
            });
        };
        ReposClient.prototype.processGitPatchRefs = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    result200 = resultData200 ? HeadBranch.fromJS(resultData200) : new HeadBranch();
                    return result200;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @owner Name of repository owner.
         * @repo Name of repository.
         * @accept (optional) Is used to set specified media type.
         * @return Created
         */
        ReposClient.prototype.gitPostTags = function (owner, repo, body, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/repos/{owner}/{repo}/git/tags";
            if (owner === undefined || owner === null)
                throw new Error("The parameter 'owner' must be defined.");
            url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
            if (repo === undefined || repo === null)
                throw new Error("The parameter 'repo' must be defined.");
            url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
            url_ = url_.replace(/[?&]$/, "");
            var content_ = JSON.stringify(body);
            var options_ = {
                body: content_,
                method: "POST",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processGitPostTags(_response);
            });
        };
        ReposClient.prototype.processGitPostTags = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 201) {
                return response.text().then(function (_responseText) {
                    var result201 = null;
                    var resultData201 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    result201 = resultData201 ? Tags.fromJS(resultData201) : new Tags();
                    return result201;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @owner Name of repository owner.
         * @repo Name of repository.
         * @accept (optional) Is used to set specified media type.
         * @return OK
         */
        ReposClient.prototype.gitGetTags = function (owner, repo, shaCode, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/repos/{owner}/{repo}/git/tags/{shaCode}";
            if (owner === undefined || owner === null)
                throw new Error("The parameter 'owner' must be defined.");
            url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
            if (repo === undefined || repo === null)
                throw new Error("The parameter 'repo' must be defined.");
            url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
            if (shaCode === undefined || shaCode === null)
                throw new Error("The parameter 'shaCode' must be defined.");
            url_ = url_.replace("{shaCode}", encodeURIComponent("" + shaCode));
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processGitGetTags(_response);
            });
        };
        ReposClient.prototype.processGitGetTags = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    result200 = resultData200 ? Tag.fromJS(resultData200) : new Tag();
                    return result200;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @owner Name of repository owner.
         * @repo Name of repository.
         * @accept (optional) Is used to set specified media type.
         * @return Created
         */
        ReposClient.prototype.gitPostTrees = function (owner, repo, body, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/repos/{owner}/{repo}/git/trees";
            if (owner === undefined || owner === null)
                throw new Error("The parameter 'owner' must be defined.");
            url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
            if (repo === undefined || repo === null)
                throw new Error("The parameter 'repo' must be defined.");
            url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
            url_ = url_.replace(/[?&]$/, "");
            var content_ = JSON.stringify(body);
            var options_ = {
                body: content_,
                method: "POST",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processGitPostTrees(_response);
            });
        };
        ReposClient.prototype.processGitPostTrees = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 201) {
                return response.text().then(function (_responseText) {
                    var result201 = null;
                    var resultData201 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    result201 = resultData201 ? Trees.fromJS(resultData201) : new Trees();
                    return result201;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @owner Name of repository owner.
         * @repo Name of repository.
         * @shaCode Tree SHA.
         * @recursive (optional) Get a Tree Recursively. (0 or 1)
         * @accept (optional) Is used to set specified media type.
         * @return OK
         */
        ReposClient.prototype.gitGetTrees = function (owner, repo, shaCode, recursive, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/repos/{owner}/{repo}/git/trees/{shaCode}?";
            if (owner === undefined || owner === null)
                throw new Error("The parameter 'owner' must be defined.");
            url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
            if (repo === undefined || repo === null)
                throw new Error("The parameter 'repo' must be defined.");
            url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
            if (shaCode === undefined || shaCode === null)
                throw new Error("The parameter 'shaCode' must be defined.");
            url_ = url_.replace("{shaCode}", encodeURIComponent("" + shaCode));
            if (recursive !== undefined)
                url_ += "recursive=" + encodeURIComponent("" + recursive) + "&";
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processGitGetTrees(_response);
            });
        };
        ReposClient.prototype.processGitGetTrees = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    result200 = resultData200 ? Tree.fromJS(resultData200) : new Tree();
                    return result200;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @owner Name of repository owner.
         * @repo Name of repository.
         * @accept (optional) Is used to set specified media type.
         * @return OK
         */
        ReposClient.prototype.getHooksAll = function (owner, repo, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/repos/{owner}/{repo}/hooks";
            if (owner === undefined || owner === null)
                throw new Error("The parameter 'owner' must be defined.");
            url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
            if (repo === undefined || repo === null)
                throw new Error("The parameter 'repo' must be defined.");
            url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processGetHooksAll(_response);
            });
        };
        ReposClient.prototype.processGetHooksAll = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    if (resultData200 && resultData200.constructor === Array) {
                        result200 = [];
                        for (var _i = 0, resultData200_27 = resultData200; _i < resultData200_27.length; _i++) {
                            var item = resultData200_27[_i];
                            result200.push(Anonymous18.fromJS(item));
                        }
                    }
                    return result200;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @owner Name of repository owner.
         * @repo Name of repository.
         * @accept (optional) Is used to set specified media type.
         * @return Created
         */
        ReposClient.prototype.postHooks = function (owner, repo, body, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/repos/{owner}/{repo}/hooks";
            if (owner === undefined || owner === null)
                throw new Error("The parameter 'owner' must be defined.");
            url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
            if (repo === undefined || repo === null)
                throw new Error("The parameter 'repo' must be defined.");
            url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
            url_ = url_.replace(/[?&]$/, "");
            var content_ = JSON.stringify(body);
            var options_ = {
                body: content_,
                method: "POST",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processPostHooks(_response);
            });
        };
        ReposClient.prototype.processPostHooks = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 201) {
                return response.text().then(function (_responseText) {
                    var result201 = null;
                    var resultData201 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    if (resultData201 && resultData201.constructor === Array) {
                        result201 = [];
                        for (var _i = 0, resultData201_2 = resultData201; _i < resultData201_2.length; _i++) {
                            var item = resultData201_2[_i];
                            result201.push(Anonymous18.fromJS(item));
                        }
                    }
                    return result201;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @owner Name of repository owner.
         * @repo Name of repository.
         * @hookId Id of hook.
         * @accept (optional) Is used to set specified media type.
         * @return No content.
         */
        ReposClient.prototype.deleteHooks = function (owner, repo, hookId, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/repos/{owner}/{repo}/hooks/{hookId}";
            if (owner === undefined || owner === null)
                throw new Error("The parameter 'owner' must be defined.");
            url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
            if (repo === undefined || repo === null)
                throw new Error("The parameter 'repo' must be defined.");
            url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
            if (hookId === undefined || hookId === null)
                throw new Error("The parameter 'hookId' must be defined.");
            url_ = url_.replace("{hookId}", encodeURIComponent("" + hookId));
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "DELETE",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processDeleteHooks(_response);
            });
        };
        ReposClient.prototype.processDeleteHooks = function (response) {
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 204) {
                return response.text().then(function (_responseText) {
                    return;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @owner Name of repository owner.
         * @repo Name of repository.
         * @hookId Id of hook.
         * @accept (optional) Is used to set specified media type.
         * @return OK
         */
        ReposClient.prototype.getHooksAll2 = function (owner, repo, hookId, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/repos/{owner}/{repo}/hooks/{hookId}";
            if (owner === undefined || owner === null)
                throw new Error("The parameter 'owner' must be defined.");
            url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
            if (repo === undefined || repo === null)
                throw new Error("The parameter 'repo' must be defined.");
            url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
            if (hookId === undefined || hookId === null)
                throw new Error("The parameter 'hookId' must be defined.");
            url_ = url_.replace("{hookId}", encodeURIComponent("" + hookId));
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processGetHooksAll2(_response);
            });
        };
        ReposClient.prototype.processGetHooksAll2 = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    if (resultData200 && resultData200.constructor === Array) {
                        result200 = [];
                        for (var _i = 0, resultData200_28 = resultData200; _i < resultData200_28.length; _i++) {
                            var item = resultData200_28[_i];
                            result200.push(Anonymous18.fromJS(item));
                        }
                    }
                    return result200;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @owner Name of repository owner.
         * @repo Name of repository.
         * @hookId Id of hook.
         * @accept (optional) Is used to set specified media type.
         * @return OK
         */
        ReposClient.prototype.patchHooks = function (owner, repo, hookId, body, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/repos/{owner}/{repo}/hooks/{hookId}";
            if (owner === undefined || owner === null)
                throw new Error("The parameter 'owner' must be defined.");
            url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
            if (repo === undefined || repo === null)
                throw new Error("The parameter 'repo' must be defined.");
            url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
            if (hookId === undefined || hookId === null)
                throw new Error("The parameter 'hookId' must be defined.");
            url_ = url_.replace("{hookId}", encodeURIComponent("" + hookId));
            url_ = url_.replace(/[?&]$/, "");
            var content_ = JSON.stringify(body);
            var options_ = {
                body: content_,
                method: "PATCH",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processPatchHooks(_response);
            });
        };
        ReposClient.prototype.processPatchHooks = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    if (resultData200 && resultData200.constructor === Array) {
                        result200 = [];
                        for (var _i = 0, resultData200_29 = resultData200; _i < resultData200_29.length; _i++) {
                            var item = resultData200_29[_i];
                            result200.push(Anonymous18.fromJS(item));
                        }
                    }
                    return result200;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @owner Name of repository owner.
         * @repo Name of repository.
         * @hookId Id of hook.
         * @accept (optional) Is used to set specified media type.
         * @return Hook is triggered.
         */
        ReposClient.prototype.hooksPostTests = function (owner, repo, hookId, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/repos/{owner}/{repo}/hooks/{hookId}/tests";
            if (owner === undefined || owner === null)
                throw new Error("The parameter 'owner' must be defined.");
            url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
            if (repo === undefined || repo === null)
                throw new Error("The parameter 'repo' must be defined.");
            url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
            if (hookId === undefined || hookId === null)
                throw new Error("The parameter 'hookId' must be defined.");
            url_ = url_.replace("{hookId}", encodeURIComponent("" + hookId));
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "POST",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processHooksPostTests(_response);
            });
        };
        ReposClient.prototype.processHooksPostTests = function (response) {
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 204) {
                return response.text().then(function (_responseText) {
                    return;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @owner Name of repository owner.
         * @repo Name of repository.
         * @filter Issues assigned to you / created by you / mentioning you / you're
        subscribed to updates for / All issues the authenticated user can see
         * @labels String list of comma separated Label names. Example - bug,ui,@high.
         * @since (optional) Optional string of a timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.
        Only issues updated at or after this time are returned.
         * @accept (optional) Is used to set specified media type.
         * @return OK
         */
        ReposClient.prototype.getIssuesAll = function (owner, repo, filter, state, labels, sort, direction, since, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/repos/{owner}/{repo}/issues?";
            if (owner === undefined || owner === null)
                throw new Error("The parameter 'owner' must be defined.");
            url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
            if (repo === undefined || repo === null)
                throw new Error("The parameter 'repo' must be defined.");
            url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
            if (filter === undefined || filter === null)
                throw new Error("The parameter 'filter' must be defined and cannot be null.");
            else
                url_ += "filter=" + encodeURIComponent("" + filter) + "&";
            if (state === undefined || state === null)
                throw new Error("The parameter 'state' must be defined and cannot be null.");
            else
                url_ += "state=" + encodeURIComponent("" + state) + "&";
            if (labels === undefined || labels === null)
                throw new Error("The parameter 'labels' must be defined and cannot be null.");
            else
                url_ += "labels=" + encodeURIComponent("" + labels) + "&";
            if (sort === undefined || sort === null)
                throw new Error("The parameter 'sort' must be defined and cannot be null.");
            else
                url_ += "sort=" + encodeURIComponent("" + sort) + "&";
            if (direction === undefined || direction === null)
                throw new Error("The parameter 'direction' must be defined and cannot be null.");
            else
                url_ += "direction=" + encodeURIComponent("" + direction) + "&";
            if (since !== undefined)
                url_ += "since=" + encodeURIComponent("" + since) + "&";
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processGetIssuesAll(_response);
            });
        };
        ReposClient.prototype.processGetIssuesAll = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    if (resultData200 && resultData200.constructor === Array) {
                        result200 = [];
                        for (var _i = 0, resultData200_30 = resultData200; _i < resultData200_30.length; _i++) {
                            var item = resultData200_30[_i];
                            result200.push(Anonymous2.fromJS(item));
                        }
                    }
                    return result200;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @owner Name of repository owner.
         * @repo Name of repository.
         * @accept (optional) Is used to set specified media type.
         * @return Created
         */
        ReposClient.prototype.postIssues = function (owner, repo, body, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/repos/{owner}/{repo}/issues";
            if (owner === undefined || owner === null)
                throw new Error("The parameter 'owner' must be defined.");
            url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
            if (repo === undefined || repo === null)
                throw new Error("The parameter 'repo' must be defined.");
            url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
            url_ = url_.replace(/[?&]$/, "");
            var content_ = JSON.stringify(body);
            var options_ = {
                body: content_,
                method: "POST",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processPostIssues(_response);
            });
        };
        ReposClient.prototype.processPostIssues = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 201) {
                return response.text().then(function (_responseText) {
                    var result201 = null;
                    var resultData201 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    result201 = resultData201 ? Issue.fromJS(resultData201) : new Issue();
                    return result201;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @owner Name of repository owner.
         * @repo Name of repository.
         * @direction (optional) Ignored without 'sort' parameter.
         * @sort (optional)
         * @since (optional) The time should be passed in as UTC in the ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.
        Example: "2012-10-09T23:39:01Z".
         * @accept (optional) Is used to set specified media type.
         * @return OK
         */
        ReposClient.prototype.issuesGetCommentsAll = function (owner, repo, direction, sort, since, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/repos/{owner}/{repo}/issues/comments?";
            if (owner === undefined || owner === null)
                throw new Error("The parameter 'owner' must be defined.");
            url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
            if (repo === undefined || repo === null)
                throw new Error("The parameter 'repo' must be defined.");
            url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
            if (direction !== undefined)
                url_ += "direction=" + encodeURIComponent("" + direction) + "&";
            if (sort !== undefined)
                url_ += "sort=" + encodeURIComponent("" + sort) + "&";
            if (since !== undefined)
                url_ += "since=" + encodeURIComponent("" + since) + "&";
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processIssuesGetCommentsAll(_response);
            });
        };
        ReposClient.prototype.processIssuesGetCommentsAll = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    if (resultData200 && resultData200.constructor === Array) {
                        result200 = [];
                        for (var _i = 0, resultData200_31 = resultData200; _i < resultData200_31.length; _i++) {
                            var item = resultData200_31[_i];
                            result200.push(Anonymous19.fromJS(item));
                        }
                    }
                    return result200;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @owner Name of repository owner.
         * @repo Name of repository.
         * @commentId ID of comment.
         * @accept (optional) Is used to set specified media type.
         * @return No content.
         */
        ReposClient.prototype.issuesDeleteComments = function (owner, repo, commentId, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/repos/{owner}/{repo}/issues/comments/{commentId}";
            if (owner === undefined || owner === null)
                throw new Error("The parameter 'owner' must be defined.");
            url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
            if (repo === undefined || repo === null)
                throw new Error("The parameter 'repo' must be defined.");
            url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
            if (commentId === undefined || commentId === null)
                throw new Error("The parameter 'commentId' must be defined.");
            url_ = url_.replace("{commentId}", encodeURIComponent("" + commentId));
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "DELETE",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processIssuesDeleteComments(_response);
            });
        };
        ReposClient.prototype.processIssuesDeleteComments = function (response) {
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 204) {
                return response.text().then(function (_responseText) {
                    return;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @owner Name of repository owner.
         * @repo Name of repository.
         * @commentId ID of comment.
         * @accept (optional) Is used to set specified media type.
         * @return OK
         */
        ReposClient.prototype.issuesGetComments = function (owner, repo, commentId, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/repos/{owner}/{repo}/issues/comments/{commentId}";
            if (owner === undefined || owner === null)
                throw new Error("The parameter 'owner' must be defined.");
            url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
            if (repo === undefined || repo === null)
                throw new Error("The parameter 'repo' must be defined.");
            url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
            if (commentId === undefined || commentId === null)
                throw new Error("The parameter 'commentId' must be defined.");
            url_ = url_.replace("{commentId}", encodeURIComponent("" + commentId));
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processIssuesGetComments(_response);
            });
        };
        ReposClient.prototype.processIssuesGetComments = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    result200 = resultData200 ? IssuesComment.fromJS(resultData200) : new IssuesComment();
                    return result200;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @owner Name of repository owner.
         * @repo Name of repository.
         * @commentId ID of comment.
         * @accept (optional) Is used to set specified media type.
         * @return OK
         */
        ReposClient.prototype.issuesPatchComments = function (owner, repo, commentId, body, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/repos/{owner}/{repo}/issues/comments/{commentId}";
            if (owner === undefined || owner === null)
                throw new Error("The parameter 'owner' must be defined.");
            url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
            if (repo === undefined || repo === null)
                throw new Error("The parameter 'repo' must be defined.");
            url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
            if (commentId === undefined || commentId === null)
                throw new Error("The parameter 'commentId' must be defined.");
            url_ = url_.replace("{commentId}", encodeURIComponent("" + commentId));
            url_ = url_.replace(/[?&]$/, "");
            var content_ = JSON.stringify(body);
            var options_ = {
                body: content_,
                method: "PATCH",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processIssuesPatchComments(_response);
            });
        };
        ReposClient.prototype.processIssuesPatchComments = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    result200 = resultData200 ? IssuesComment.fromJS(resultData200) : new IssuesComment();
                    return result200;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @owner Name of repository owner.
         * @repo Name of repository.
         * @accept (optional) Is used to set specified media type.
         * @return OK
         */
        ReposClient.prototype.issuesGetEvents = function (owner, repo, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/repos/{owner}/{repo}/issues/events";
            if (owner === undefined || owner === null)
                throw new Error("The parameter 'owner' must be defined.");
            url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
            if (repo === undefined || repo === null)
                throw new Error("The parameter 'repo' must be defined.");
            url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processIssuesGetEvents(_response);
            });
        };
        ReposClient.prototype.processIssuesGetEvents = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    result200 = resultData200 ? Events.fromJS(resultData200) : new Events();
                    return result200;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @owner Name of repository owner.
         * @repo Name of repository.
         * @eventId Id of the event.
         * @accept (optional) Is used to set specified media type.
         * @return OK
         */
        ReposClient.prototype.issuesGetEvents2 = function (owner, repo, eventId, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/repos/{owner}/{repo}/issues/events/{eventId}";
            if (owner === undefined || owner === null)
                throw new Error("The parameter 'owner' must be defined.");
            url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
            if (repo === undefined || repo === null)
                throw new Error("The parameter 'repo' must be defined.");
            url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
            if (eventId === undefined || eventId === null)
                throw new Error("The parameter 'eventId' must be defined.");
            url_ = url_.replace("{eventId}", encodeURIComponent("" + eventId));
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processIssuesGetEvents2(_response);
            });
        };
        ReposClient.prototype.processIssuesGetEvents2 = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    result200 = resultData200 ? Event.fromJS(resultData200) : new Event();
                    return result200;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @owner Name of repository owner.
         * @repo Name of repository.
         * @number Number of issue.
         * @accept (optional) Is used to set specified media type.
         * @return OK
         */
        ReposClient.prototype.getIssues = function (owner, repo, number, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/repos/{owner}/{repo}/issues/{number}";
            if (owner === undefined || owner === null)
                throw new Error("The parameter 'owner' must be defined.");
            url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
            if (repo === undefined || repo === null)
                throw new Error("The parameter 'repo' must be defined.");
            url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
            if (number === undefined || number === null)
                throw new Error("The parameter 'number' must be defined.");
            url_ = url_.replace("{number}", encodeURIComponent("" + number));
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processGetIssues(_response);
            });
        };
        ReposClient.prototype.processGetIssues = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    result200 = resultData200 ? Issue.fromJS(resultData200) : new Issue();
                    return result200;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @owner Name of repository owner.
         * @repo Name of repository.
         * @number Number of issue.
         * @accept (optional) Is used to set specified media type.
         * @return OK
         */
        ReposClient.prototype.patchIssues = function (owner, repo, number, body, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/repos/{owner}/{repo}/issues/{number}";
            if (owner === undefined || owner === null)
                throw new Error("The parameter 'owner' must be defined.");
            url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
            if (repo === undefined || repo === null)
                throw new Error("The parameter 'repo' must be defined.");
            url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
            if (number === undefined || number === null)
                throw new Error("The parameter 'number' must be defined.");
            url_ = url_.replace("{number}", encodeURIComponent("" + number));
            url_ = url_.replace(/[?&]$/, "");
            var content_ = JSON.stringify(body);
            var options_ = {
                body: content_,
                method: "PATCH",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processPatchIssues(_response);
            });
        };
        ReposClient.prototype.processPatchIssues = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    result200 = resultData200 ? Issue.fromJS(resultData200) : new Issue();
                    return result200;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @owner Name of repository owner.
         * @repo Name of repository.
         * @number Number of issue.
         * @accept (optional) Is used to set specified media type.
         * @return OK
         */
        ReposClient.prototype.issuesGetCommentsAll2 = function (owner, repo, number, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/repos/{owner}/{repo}/issues/{number}/comments";
            if (owner === undefined || owner === null)
                throw new Error("The parameter 'owner' must be defined.");
            url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
            if (repo === undefined || repo === null)
                throw new Error("The parameter 'repo' must be defined.");
            url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
            if (number === undefined || number === null)
                throw new Error("The parameter 'number' must be defined.");
            url_ = url_.replace("{number}", encodeURIComponent("" + number));
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processIssuesGetCommentsAll2(_response);
            });
        };
        ReposClient.prototype.processIssuesGetCommentsAll2 = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    if (resultData200 && resultData200.constructor === Array) {
                        result200 = [];
                        for (var _i = 0, resultData200_32 = resultData200; _i < resultData200_32.length; _i++) {
                            var item = resultData200_32[_i];
                            result200.push(Anonymous19.fromJS(item));
                        }
                    }
                    return result200;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @owner Name of repository owner.
         * @repo Name of repository.
         * @number Number of issue.
         * @accept (optional) Is used to set specified media type.
         * @return Created
         */
        ReposClient.prototype.issuesPostComments = function (owner, repo, number, body, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/repos/{owner}/{repo}/issues/{number}/comments";
            if (owner === undefined || owner === null)
                throw new Error("The parameter 'owner' must be defined.");
            url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
            if (repo === undefined || repo === null)
                throw new Error("The parameter 'repo' must be defined.");
            url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
            if (number === undefined || number === null)
                throw new Error("The parameter 'number' must be defined.");
            url_ = url_.replace("{number}", encodeURIComponent("" + number));
            url_ = url_.replace(/[?&]$/, "");
            var content_ = JSON.stringify(body);
            var options_ = {
                body: content_,
                method: "POST",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processIssuesPostComments(_response);
            });
        };
        ReposClient.prototype.processIssuesPostComments = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 201) {
                return response.text().then(function (_responseText) {
                    var result201 = null;
                    var resultData201 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    result201 = resultData201 ? IssuesComment.fromJS(resultData201) : new IssuesComment();
                    return result201;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @owner Name of repository owner.
         * @repo Name of repository.
         * @number Number of issue.
         * @accept (optional) Is used to set specified media type.
         * @return OK
         */
        ReposClient.prototype.issuesGetEvents3 = function (owner, repo, number, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/repos/{owner}/{repo}/issues/{number}/events";
            if (owner === undefined || owner === null)
                throw new Error("The parameter 'owner' must be defined.");
            url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
            if (repo === undefined || repo === null)
                throw new Error("The parameter 'repo' must be defined.");
            url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
            if (number === undefined || number === null)
                throw new Error("The parameter 'number' must be defined.");
            url_ = url_.replace("{number}", encodeURIComponent("" + number));
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processIssuesGetEvents3(_response);
            });
        };
        ReposClient.prototype.processIssuesGetEvents3 = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    result200 = resultData200 ? Events.fromJS(resultData200) : new Events();
                    return result200;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @owner Name of repository owner.
         * @repo Name of repository.
         * @number Number of issue.
         * @accept (optional) Is used to set specified media type.
         * @return No content.
         */
        ReposClient.prototype.issuesDeleteLabels = function (owner, repo, number, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/repos/{owner}/{repo}/issues/{number}/labels";
            if (owner === undefined || owner === null)
                throw new Error("The parameter 'owner' must be defined.");
            url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
            if (repo === undefined || repo === null)
                throw new Error("The parameter 'repo' must be defined.");
            url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
            if (number === undefined || number === null)
                throw new Error("The parameter 'number' must be defined.");
            url_ = url_.replace("{number}", encodeURIComponent("" + number));
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "DELETE",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processIssuesDeleteLabels(_response);
            });
        };
        ReposClient.prototype.processIssuesDeleteLabels = function (response) {
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 204) {
                return response.text().then(function (_responseText) {
                    return;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @owner Name of repository owner.
         * @repo Name of repository.
         * @number Number of issue.
         * @accept (optional) Is used to set specified media type.
         * @return OK
         */
        ReposClient.prototype.issuesGetLabels = function (owner, repo, number, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/repos/{owner}/{repo}/issues/{number}/labels";
            if (owner === undefined || owner === null)
                throw new Error("The parameter 'owner' must be defined.");
            url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
            if (repo === undefined || repo === null)
                throw new Error("The parameter 'repo' must be defined.");
            url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
            if (number === undefined || number === null)
                throw new Error("The parameter 'number' must be defined.");
            url_ = url_.replace("{number}", encodeURIComponent("" + number));
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processIssuesGetLabels(_response);
            });
        };
        ReposClient.prototype.processIssuesGetLabels = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    if (resultData200 && resultData200.constructor === Array) {
                        result200 = [];
                        for (var _i = 0, resultData200_33 = resultData200; _i < resultData200_33.length; _i++) {
                            var item = resultData200_33[_i];
                            result200.push(Anonymous20.fromJS(item));
                        }
                    }
                    return result200;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @owner Name of repository owner.
         * @repo Name of repository.
         * @number Number of issue.
         * @accept (optional) Is used to set specified media type.
         * @return Created
         */
        ReposClient.prototype.issuesPostLabels = function (owner, repo, number, body, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/repos/{owner}/{repo}/issues/{number}/labels";
            if (owner === undefined || owner === null)
                throw new Error("The parameter 'owner' must be defined.");
            url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
            if (repo === undefined || repo === null)
                throw new Error("The parameter 'repo' must be defined.");
            url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
            if (number === undefined || number === null)
                throw new Error("The parameter 'number' must be defined.");
            url_ = url_.replace("{number}", encodeURIComponent("" + number));
            url_ = url_.replace(/[?&]$/, "");
            var content_ = JSON.stringify(body);
            var options_ = {
                body: content_,
                method: "POST",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processIssuesPostLabels(_response);
            });
        };
        ReposClient.prototype.processIssuesPostLabels = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 201) {
                return response.text().then(function (_responseText) {
                    var result201 = null;
                    var resultData201 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    result201 = resultData201 ? Label.fromJS(resultData201) : new Label();
                    return result201;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @owner Name of repository owner.
         * @repo Name of repository.
         * @number Number of issue.
         * @accept (optional) Is used to set specified media type.
         * @return Created
         */
        ReposClient.prototype.issuesPutLabels = function (owner, repo, number, body, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/repos/{owner}/{repo}/issues/{number}/labels";
            if (owner === undefined || owner === null)
                throw new Error("The parameter 'owner' must be defined.");
            url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
            if (repo === undefined || repo === null)
                throw new Error("The parameter 'repo' must be defined.");
            url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
            if (number === undefined || number === null)
                throw new Error("The parameter 'number' must be defined.");
            url_ = url_.replace("{number}", encodeURIComponent("" + number));
            url_ = url_.replace(/[?&]$/, "");
            var content_ = JSON.stringify(body);
            var options_ = {
                body: content_,
                method: "PUT",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processIssuesPutLabels(_response);
            });
        };
        ReposClient.prototype.processIssuesPutLabels = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 201) {
                return response.text().then(function (_responseText) {
                    var result201 = null;
                    var resultData201 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    result201 = resultData201 ? Label.fromJS(resultData201) : new Label();
                    return result201;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @owner Name of repository owner.
         * @repo Name of repository.
         * @number Number of issue.
         * @name Name of the label.
         * @accept (optional) Is used to set specified media type.
         * @return Item removed.
         */
        ReposClient.prototype.issuesDeleteLabels2 = function (owner, repo, number, name, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/repos/{owner}/{repo}/issues/{number}/labels/{name}";
            if (owner === undefined || owner === null)
                throw new Error("The parameter 'owner' must be defined.");
            url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
            if (repo === undefined || repo === null)
                throw new Error("The parameter 'repo' must be defined.");
            url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
            if (number === undefined || number === null)
                throw new Error("The parameter 'number' must be defined.");
            url_ = url_.replace("{number}", encodeURIComponent("" + number));
            if (name === undefined || name === null)
                throw new Error("The parameter 'name' must be defined.");
            url_ = url_.replace("{name}", encodeURIComponent("" + name));
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "DELETE",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processIssuesDeleteLabels2(_response);
            });
        };
        ReposClient.prototype.processIssuesDeleteLabels2 = function (response) {
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 204) {
                return response.text().then(function (_responseText) {
                    return;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @owner Name of repository owner.
         * @repo Name of repository.
         * @accept (optional) Is used to set specified media type.
         * @return OK
         */
        ReposClient.prototype.getKeysAll = function (owner, repo, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/repos/{owner}/{repo}/keys";
            if (owner === undefined || owner === null)
                throw new Error("The parameter 'owner' must be defined.");
            url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
            if (repo === undefined || repo === null)
                throw new Error("The parameter 'repo' must be defined.");
            url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processGetKeysAll(_response);
            });
        };
        ReposClient.prototype.processGetKeysAll = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    if (resultData200 && resultData200.constructor === Array) {
                        result200 = [];
                        for (var _i = 0, resultData200_34 = resultData200; _i < resultData200_34.length; _i++) {
                            var item = resultData200_34[_i];
                            result200.push(Anonymous21.fromJS(item));
                        }
                    }
                    return result200;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @owner Name of repository owner.
         * @repo Name of repository.
         * @accept (optional) Is used to set specified media type.
         * @return Created
         */
        ReposClient.prototype.postKeys = function (owner, repo, body, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/repos/{owner}/{repo}/keys";
            if (owner === undefined || owner === null)
                throw new Error("The parameter 'owner' must be defined.");
            url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
            if (repo === undefined || repo === null)
                throw new Error("The parameter 'repo' must be defined.");
            url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
            url_ = url_.replace(/[?&]$/, "");
            var content_ = JSON.stringify(body);
            var options_ = {
                body: content_,
                method: "POST",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processPostKeys(_response);
            });
        };
        ReposClient.prototype.processPostKeys = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 201) {
                return response.text().then(function (_responseText) {
                    var result201 = null;
                    var resultData201 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    result201 = resultData201 ? UserKeysKeyId.fromJS(resultData201) : new UserKeysKeyId();
                    return result201;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @owner Name of repository owner.
         * @repo Name of repository.
         * @keyId Id of key.
         * @accept (optional) Is used to set specified media type.
         * @return No content.
         */
        ReposClient.prototype.deleteKeys = function (owner, repo, keyId, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/repos/{owner}/{repo}/keys/{keyId}";
            if (owner === undefined || owner === null)
                throw new Error("The parameter 'owner' must be defined.");
            url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
            if (repo === undefined || repo === null)
                throw new Error("The parameter 'repo' must be defined.");
            url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
            if (keyId === undefined || keyId === null)
                throw new Error("The parameter 'keyId' must be defined.");
            url_ = url_.replace("{keyId}", encodeURIComponent("" + keyId));
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "DELETE",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processDeleteKeys(_response);
            });
        };
        ReposClient.prototype.processDeleteKeys = function (response) {
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 204) {
                return response.text().then(function (_responseText) {
                    return;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @owner Name of repository owner.
         * @repo Name of repository.
         * @keyId Id of key.
         * @accept (optional) Is used to set specified media type.
         * @return OK
         */
        ReposClient.prototype.getKeys = function (owner, repo, keyId, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/repos/{owner}/{repo}/keys/{keyId}";
            if (owner === undefined || owner === null)
                throw new Error("The parameter 'owner' must be defined.");
            url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
            if (repo === undefined || repo === null)
                throw new Error("The parameter 'repo' must be defined.");
            url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
            if (keyId === undefined || keyId === null)
                throw new Error("The parameter 'keyId' must be defined.");
            url_ = url_.replace("{keyId}", encodeURIComponent("" + keyId));
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processGetKeys(_response);
            });
        };
        ReposClient.prototype.processGetKeys = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    result200 = resultData200 ? UserKeysKeyId.fromJS(resultData200) : new UserKeysKeyId();
                    return result200;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @owner Name of repository owner.
         * @repo Name of repository.
         * @accept (optional) Is used to set specified media type.
         * @return OK
         */
        ReposClient.prototype.getLabelsAll = function (owner, repo, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/repos/{owner}/{repo}/labels";
            if (owner === undefined || owner === null)
                throw new Error("The parameter 'owner' must be defined.");
            url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
            if (repo === undefined || repo === null)
                throw new Error("The parameter 'repo' must be defined.");
            url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processGetLabelsAll(_response);
            });
        };
        ReposClient.prototype.processGetLabelsAll = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    if (resultData200 && resultData200.constructor === Array) {
                        result200 = [];
                        for (var _i = 0, resultData200_35 = resultData200; _i < resultData200_35.length; _i++) {
                            var item = resultData200_35[_i];
                            result200.push(Anonymous20.fromJS(item));
                        }
                    }
                    return result200;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @owner Name of repository owner.
         * @repo Name of repository.
         * @accept (optional) Is used to set specified media type.
         * @return Created
         */
        ReposClient.prototype.postLabels = function (owner, repo, body, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/repos/{owner}/{repo}/labels";
            if (owner === undefined || owner === null)
                throw new Error("The parameter 'owner' must be defined.");
            url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
            if (repo === undefined || repo === null)
                throw new Error("The parameter 'repo' must be defined.");
            url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
            url_ = url_.replace(/[?&]$/, "");
            var content_ = JSON.stringify(body);
            var options_ = {
                body: content_,
                method: "POST",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processPostLabels(_response);
            });
        };
        ReposClient.prototype.processPostLabels = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 201) {
                return response.text().then(function (_responseText) {
                    var result201 = null;
                    var resultData201 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    result201 = resultData201 ? Label.fromJS(resultData201) : new Label();
                    return result201;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @owner Name of repository owner.
         * @repo Name of repository.
         * @name Name of the label.
         * @accept (optional) Is used to set specified media type.
         * @return No content.
         */
        ReposClient.prototype.deleteLabels = function (owner, repo, name, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/repos/{owner}/{repo}/labels/{name}";
            if (owner === undefined || owner === null)
                throw new Error("The parameter 'owner' must be defined.");
            url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
            if (repo === undefined || repo === null)
                throw new Error("The parameter 'repo' must be defined.");
            url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
            if (name === undefined || name === null)
                throw new Error("The parameter 'name' must be defined.");
            url_ = url_.replace("{name}", encodeURIComponent("" + name));
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "DELETE",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processDeleteLabels(_response);
            });
        };
        ReposClient.prototype.processDeleteLabels = function (response) {
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 204) {
                return response.text().then(function (_responseText) {
                    return;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @owner Name of repository owner.
         * @repo Name of repository.
         * @name Name of the label.
         * @accept (optional) Is used to set specified media type.
         * @return OK
         */
        ReposClient.prototype.getLabels = function (owner, repo, name, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/repos/{owner}/{repo}/labels/{name}";
            if (owner === undefined || owner === null)
                throw new Error("The parameter 'owner' must be defined.");
            url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
            if (repo === undefined || repo === null)
                throw new Error("The parameter 'repo' must be defined.");
            url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
            if (name === undefined || name === null)
                throw new Error("The parameter 'name' must be defined.");
            url_ = url_.replace("{name}", encodeURIComponent("" + name));
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processGetLabels(_response);
            });
        };
        ReposClient.prototype.processGetLabels = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    result200 = resultData200 ? Label.fromJS(resultData200) : new Label();
                    return result200;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @owner Name of repository owner.
         * @repo Name of repository.
         * @name Name of the label.
         * @accept (optional) Is used to set specified media type.
         * @return OK
         */
        ReposClient.prototype.patchLabels = function (owner, repo, name, body, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/repos/{owner}/{repo}/labels/{name}";
            if (owner === undefined || owner === null)
                throw new Error("The parameter 'owner' must be defined.");
            url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
            if (repo === undefined || repo === null)
                throw new Error("The parameter 'repo' must be defined.");
            url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
            if (name === undefined || name === null)
                throw new Error("The parameter 'name' must be defined.");
            url_ = url_.replace("{name}", encodeURIComponent("" + name));
            url_ = url_.replace(/[?&]$/, "");
            var content_ = JSON.stringify(body);
            var options_ = {
                body: content_,
                method: "PATCH",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processPatchLabels(_response);
            });
        };
        ReposClient.prototype.processPatchLabels = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    result200 = resultData200 ? Label.fromJS(resultData200) : new Label();
                    return result200;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @owner Name of repository owner.
         * @repo Name of repository.
         * @accept (optional) Is used to set specified media type.
         * @return OK
         */
        ReposClient.prototype.getLanguages = function (owner, repo, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/repos/{owner}/{repo}/languages";
            if (owner === undefined || owner === null)
                throw new Error("The parameter 'owner' must be defined.");
            url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
            if (repo === undefined || repo === null)
                throw new Error("The parameter 'repo' must be defined.");
            url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processGetLanguages(_response);
            });
        };
        ReposClient.prototype.processGetLanguages = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    if (resultData200) {
                        result200 = {};
                        for (var key in resultData200) {
                            if (resultData200.hasOwnProperty(key))
                                result200[key] = resultData200[key];
                        }
                    }
                    return result200;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @owner Name of repository owner.
         * @repo Name of repository.
         * @accept (optional) Is used to set specified media type.
         * @return Successful Response (The resulting merge commit)
         */
        ReposClient.prototype.postMerges = function (owner, repo, body, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/repos/{owner}/{repo}/merges";
            if (owner === undefined || owner === null)
                throw new Error("The parameter 'owner' must be defined.");
            url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
            if (repo === undefined || repo === null)
                throw new Error("The parameter 'repo' must be defined.");
            url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
            url_ = url_.replace(/[?&]$/, "");
            var content_ = JSON.stringify(body);
            var options_ = {
                body: content_,
                method: "POST",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processPostMerges(_response);
            });
        };
        ReposClient.prototype.processPostMerges = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 201) {
                return response.text().then(function (_responseText) {
                    var result201 = null;
                    var resultData201 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    result201 = resultData201 ? MergesSuccessful.fromJS(resultData201) : new MergesSuccessful();
                    return result201;
                });
            }
            else if (status === 204) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 404) {
                return response.text().then(function (_responseText) {
                    var result404 = null;
                    var resultData404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    result404 = resultData404 ? MergesConflict.fromJS(resultData404) : new MergesConflict();
                    return throwException("A server error occurred.", status, _responseText, _headers, result404);
                });
            }
            else if (status === 409) {
                return response.text().then(function (_responseText) {
                    var result409 = null;
                    var resultData409 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    result409 = resultData409 ? MergesConflict.fromJS(resultData409) : new MergesConflict();
                    return throwException("A server error occurred.", status, _responseText, _headers, result409);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @owner Name of repository owner.
         * @repo Name of repository.
         * @state (optional) String to filter by state.
         * @direction (optional) Ignored without 'sort' parameter.
         * @sort (optional)
         * @accept (optional) Is used to set specified media type.
         * @return OK
         */
        ReposClient.prototype.getMilestones = function (owner, repo, state, direction, sort, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/repos/{owner}/{repo}/milestones?";
            if (owner === undefined || owner === null)
                throw new Error("The parameter 'owner' must be defined.");
            url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
            if (repo === undefined || repo === null)
                throw new Error("The parameter 'repo' must be defined.");
            url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
            if (state !== undefined)
                url_ += "state=" + encodeURIComponent("" + state) + "&";
            if (direction !== undefined)
                url_ += "direction=" + encodeURIComponent("" + direction) + "&";
            if (sort !== undefined)
                url_ += "sort=" + encodeURIComponent("" + sort) + "&";
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processGetMilestones(_response);
            });
        };
        ReposClient.prototype.processGetMilestones = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    result200 = resultData200 ? Milestone.fromJS(resultData200) : new Milestone();
                    return result200;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @owner Name of repository owner.
         * @repo Name of repository.
         * @accept (optional) Is used to set specified media type.
         * @return Created
         */
        ReposClient.prototype.postMilestones = function (owner, repo, body, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/repos/{owner}/{repo}/milestones";
            if (owner === undefined || owner === null)
                throw new Error("The parameter 'owner' must be defined.");
            url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
            if (repo === undefined || repo === null)
                throw new Error("The parameter 'repo' must be defined.");
            url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
            url_ = url_.replace(/[?&]$/, "");
            var content_ = JSON.stringify(body);
            var options_ = {
                body: content_,
                method: "POST",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processPostMilestones(_response);
            });
        };
        ReposClient.prototype.processPostMilestones = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 201) {
                return response.text().then(function (_responseText) {
                    var result201 = null;
                    var resultData201 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    result201 = resultData201 ? Milestone.fromJS(resultData201) : new Milestone();
                    return result201;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @owner Name of repository owner.
         * @repo Name of repository.
         * @number Number of milestone.
         * @accept (optional) Is used to set specified media type.
         * @return No content.
         */
        ReposClient.prototype.deleteMilestones = function (owner, repo, number, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/repos/{owner}/{repo}/milestones/{number}";
            if (owner === undefined || owner === null)
                throw new Error("The parameter 'owner' must be defined.");
            url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
            if (repo === undefined || repo === null)
                throw new Error("The parameter 'repo' must be defined.");
            url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
            if (number === undefined || number === null)
                throw new Error("The parameter 'number' must be defined.");
            url_ = url_.replace("{number}", encodeURIComponent("" + number));
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "DELETE",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processDeleteMilestones(_response);
            });
        };
        ReposClient.prototype.processDeleteMilestones = function (response) {
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 204) {
                return response.text().then(function (_responseText) {
                    return;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @owner Name of repository owner.
         * @repo Name of repository.
         * @number Number of milestone.
         * @accept (optional) Is used to set specified media type.
         * @return OK
         */
        ReposClient.prototype.getMilestones2 = function (owner, repo, number, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/repos/{owner}/{repo}/milestones/{number}";
            if (owner === undefined || owner === null)
                throw new Error("The parameter 'owner' must be defined.");
            url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
            if (repo === undefined || repo === null)
                throw new Error("The parameter 'repo' must be defined.");
            url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
            if (number === undefined || number === null)
                throw new Error("The parameter 'number' must be defined.");
            url_ = url_.replace("{number}", encodeURIComponent("" + number));
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processGetMilestones2(_response);
            });
        };
        ReposClient.prototype.processGetMilestones2 = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    result200 = resultData200 ? Milestone.fromJS(resultData200) : new Milestone();
                    return result200;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @owner Name of repository owner.
         * @repo Name of repository.
         * @number Number of milestone.
         * @accept (optional) Is used to set specified media type.
         * @return OK
         */
        ReposClient.prototype.patchMilestones = function (owner, repo, number, body, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/repos/{owner}/{repo}/milestones/{number}";
            if (owner === undefined || owner === null)
                throw new Error("The parameter 'owner' must be defined.");
            url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
            if (repo === undefined || repo === null)
                throw new Error("The parameter 'repo' must be defined.");
            url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
            if (number === undefined || number === null)
                throw new Error("The parameter 'number' must be defined.");
            url_ = url_.replace("{number}", encodeURIComponent("" + number));
            url_ = url_.replace(/[?&]$/, "");
            var content_ = JSON.stringify(body);
            var options_ = {
                body: content_,
                method: "PATCH",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processPatchMilestones(_response);
            });
        };
        ReposClient.prototype.processPatchMilestones = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    result200 = resultData200 ? Milestone.fromJS(resultData200) : new Milestone();
                    return result200;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @owner Name of repository owner.
         * @repo Name of repository.
         * @number Number of milestone.
         * @accept (optional) Is used to set specified media type.
         * @return OK
         */
        ReposClient.prototype.milestonesGetLabels = function (owner, repo, number, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/repos/{owner}/{repo}/milestones/{number}/labels";
            if (owner === undefined || owner === null)
                throw new Error("The parameter 'owner' must be defined.");
            url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
            if (repo === undefined || repo === null)
                throw new Error("The parameter 'repo' must be defined.");
            url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
            if (number === undefined || number === null)
                throw new Error("The parameter 'number' must be defined.");
            url_ = url_.replace("{number}", encodeURIComponent("" + number));
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processMilestonesGetLabels(_response);
            });
        };
        ReposClient.prototype.processMilestonesGetLabels = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    if (resultData200 && resultData200.constructor === Array) {
                        result200 = [];
                        for (var _i = 0, resultData200_36 = resultData200; _i < resultData200_36.length; _i++) {
                            var item = resultData200_36[_i];
                            result200.push(Anonymous20.fromJS(item));
                        }
                    }
                    return result200;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @owner Name of repository owner.
         * @repo Name of repository.
         * @all (optional) True to show notifications marked as read.
         * @participating (optional) True to show only notifications in which the user is directly participating
        or mentioned.
         * @since (optional) The time should be passed in as UTC in the ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.
        Example: "2012-10-09T23:39:01Z".
         * @accept (optional) Is used to set specified media type.
         * @return OK
         */
        ReposClient.prototype.getNotifications = function (owner, repo, all, participating, since, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/repos/{owner}/{repo}/notifications?";
            if (owner === undefined || owner === null)
                throw new Error("The parameter 'owner' must be defined.");
            url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
            if (repo === undefined || repo === null)
                throw new Error("The parameter 'repo' must be defined.");
            url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
            if (all !== undefined)
                url_ += "all=" + encodeURIComponent("" + all) + "&";
            if (participating !== undefined)
                url_ += "participating=" + encodeURIComponent("" + participating) + "&";
            if (since !== undefined)
                url_ += "since=" + encodeURIComponent("" + since) + "&";
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processGetNotifications(_response);
            });
        };
        ReposClient.prototype.processGetNotifications = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    result200 = resultData200 ? Notifications.fromJS(resultData200) : new Notifications();
                    return result200;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @owner Name of repository owner.
         * @repo Name of repository.
         * @accept (optional) Is used to set specified media type.
         * @return Marked as read.
         */
        ReposClient.prototype.putNotifications = function (owner, repo, body, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/repos/{owner}/{repo}/notifications";
            if (owner === undefined || owner === null)
                throw new Error("The parameter 'owner' must be defined.");
            url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
            if (repo === undefined || repo === null)
                throw new Error("The parameter 'repo' must be defined.");
            url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
            url_ = url_.replace(/[?&]$/, "");
            var content_ = JSON.stringify(body);
            var options_ = {
                body: content_,
                method: "PUT",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processPutNotifications(_response);
            });
        };
        ReposClient.prototype.processPutNotifications = function (response) {
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 205) {
                return response.text().then(function (_responseText) {
                    return;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @owner Name of repository owner.
         * @repo Name of repository.
         * @state (optional) String to filter by state.
         * @head (optional) Filter pulls by head user and branch name in the format of 'user:ref-name'.
        Example: github:new-script-format.
         * @base (optional) Filter pulls by base branch name. Example - gh-pages.
         * @accept (optional) Is used to set specified media type.
         * @return OK
         */
        ReposClient.prototype.getPullsAll = function (owner, repo, state, head, base, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/repos/{owner}/{repo}/pulls?";
            if (owner === undefined || owner === null)
                throw new Error("The parameter 'owner' must be defined.");
            url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
            if (repo === undefined || repo === null)
                throw new Error("The parameter 'repo' must be defined.");
            url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
            if (state !== undefined)
                url_ += "state=" + encodeURIComponent("" + state) + "&";
            if (head !== undefined)
                url_ += "head=" + encodeURIComponent("" + head) + "&";
            if (base !== undefined)
                url_ += "base=" + encodeURIComponent("" + base) + "&";
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processGetPullsAll(_response);
            });
        };
        ReposClient.prototype.processGetPullsAll = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    if (resultData200 && resultData200.constructor === Array) {
                        result200 = [];
                        for (var _i = 0, resultData200_37 = resultData200; _i < resultData200_37.length; _i++) {
                            var item = resultData200_37[_i];
                            result200.push(Anonymous22.fromJS(item));
                        }
                    }
                    return result200;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @owner Name of repository owner.
         * @repo Name of repository.
         * @accept (optional) Is used to set specified media type.
         * @return Created
         */
        ReposClient.prototype.postPulls = function (owner, repo, body, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/repos/{owner}/{repo}/pulls";
            if (owner === undefined || owner === null)
                throw new Error("The parameter 'owner' must be defined.");
            url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
            if (repo === undefined || repo === null)
                throw new Error("The parameter 'repo' must be defined.");
            url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
            url_ = url_.replace(/[?&]$/, "");
            var content_ = JSON.stringify(body);
            var options_ = {
                body: content_,
                method: "POST",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processPostPulls(_response);
            });
        };
        ReposClient.prototype.processPostPulls = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 201) {
                return response.text().then(function (_responseText) {
                    var result201 = null;
                    var resultData201 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    if (resultData201 && resultData201.constructor === Array) {
                        result201 = [];
                        for (var _i = 0, resultData201_3 = resultData201; _i < resultData201_3.length; _i++) {
                            var item = resultData201_3[_i];
                            result201.push(Anonymous22.fromJS(item));
                        }
                    }
                    return result201;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @owner Name of repository owner.
         * @repo Name of repository.
         * @direction (optional) Ignored without 'sort' parameter.
         * @sort (optional)
         * @since (optional) The time should be passed in as UTC in the ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.
        Example: "2012-10-09T23:39:01Z".
         * @accept (optional) Is used to set specified media type.
         * @return OK
         */
        ReposClient.prototype.pullsGetCommentsAll = function (owner, repo, direction, sort, since, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/repos/{owner}/{repo}/pulls/comments?";
            if (owner === undefined || owner === null)
                throw new Error("The parameter 'owner' must be defined.");
            url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
            if (repo === undefined || repo === null)
                throw new Error("The parameter 'repo' must be defined.");
            url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
            if (direction !== undefined)
                url_ += "direction=" + encodeURIComponent("" + direction) + "&";
            if (sort !== undefined)
                url_ += "sort=" + encodeURIComponent("" + sort) + "&";
            if (since !== undefined)
                url_ += "since=" + encodeURIComponent("" + since) + "&";
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processPullsGetCommentsAll(_response);
            });
        };
        ReposClient.prototype.processPullsGetCommentsAll = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    if (resultData200 && resultData200.constructor === Array) {
                        result200 = [];
                        for (var _i = 0, resultData200_38 = resultData200; _i < resultData200_38.length; _i++) {
                            var item = resultData200_38[_i];
                            result200.push(Anonymous19.fromJS(item));
                        }
                    }
                    return result200;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @owner Name of repository owner.
         * @repo Name of repository.
         * @commentId Id of comment.
         * @accept (optional) Is used to set specified media type.
         * @return No content.
         */
        ReposClient.prototype.pullsDeleteComments = function (owner, repo, commentId, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/repos/{owner}/{repo}/pulls/comments/{commentId}";
            if (owner === undefined || owner === null)
                throw new Error("The parameter 'owner' must be defined.");
            url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
            if (repo === undefined || repo === null)
                throw new Error("The parameter 'repo' must be defined.");
            url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
            if (commentId === undefined || commentId === null)
                throw new Error("The parameter 'commentId' must be defined.");
            url_ = url_.replace("{commentId}", encodeURIComponent("" + commentId));
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "DELETE",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processPullsDeleteComments(_response);
            });
        };
        ReposClient.prototype.processPullsDeleteComments = function (response) {
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 204) {
                return response.text().then(function (_responseText) {
                    return;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @owner Name of repository owner.
         * @repo Name of repository.
         * @commentId Id of comment.
         * @accept (optional) Is used to set specified media type.
         * @return OK
         */
        ReposClient.prototype.pullsGetComments = function (owner, repo, commentId, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/repos/{owner}/{repo}/pulls/comments/{commentId}";
            if (owner === undefined || owner === null)
                throw new Error("The parameter 'owner' must be defined.");
            url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
            if (repo === undefined || repo === null)
                throw new Error("The parameter 'repo' must be defined.");
            url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
            if (commentId === undefined || commentId === null)
                throw new Error("The parameter 'commentId' must be defined.");
            url_ = url_.replace("{commentId}", encodeURIComponent("" + commentId));
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processPullsGetComments(_response);
            });
        };
        ReposClient.prototype.processPullsGetComments = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    result200 = resultData200 ? PullsComment.fromJS(resultData200) : new PullsComment();
                    return result200;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @owner Name of repository owner.
         * @repo Name of repository.
         * @commentId Id of comment.
         * @accept (optional) Is used to set specified media type.
         * @return OK
         */
        ReposClient.prototype.pullsPatchComments = function (owner, repo, commentId, body, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/repos/{owner}/{repo}/pulls/comments/{commentId}";
            if (owner === undefined || owner === null)
                throw new Error("The parameter 'owner' must be defined.");
            url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
            if (repo === undefined || repo === null)
                throw new Error("The parameter 'repo' must be defined.");
            url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
            if (commentId === undefined || commentId === null)
                throw new Error("The parameter 'commentId' must be defined.");
            url_ = url_.replace("{commentId}", encodeURIComponent("" + commentId));
            url_ = url_.replace(/[?&]$/, "");
            var content_ = JSON.stringify(body);
            var options_ = {
                body: content_,
                method: "PATCH",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processPullsPatchComments(_response);
            });
        };
        ReposClient.prototype.processPullsPatchComments = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    result200 = resultData200 ? PullsComment.fromJS(resultData200) : new PullsComment();
                    return result200;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @owner Name of repository owner.
         * @repo Name of repository.
         * @number Id of pull.
         * @accept (optional) Is used to set specified media type.
         * @return OK
         */
        ReposClient.prototype.getPulls = function (owner, repo, number, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/repos/{owner}/{repo}/pulls/{number}";
            if (owner === undefined || owner === null)
                throw new Error("The parameter 'owner' must be defined.");
            url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
            if (repo === undefined || repo === null)
                throw new Error("The parameter 'repo' must be defined.");
            url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
            if (number === undefined || number === null)
                throw new Error("The parameter 'number' must be defined.");
            url_ = url_.replace("{number}", encodeURIComponent("" + number));
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processGetPulls(_response);
            });
        };
        ReposClient.prototype.processGetPulls = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    result200 = resultData200 ? PullRequest.fromJS(resultData200) : new PullRequest();
                    return result200;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @owner Name of repository owner.
         * @repo Name of repository.
         * @number Id of pull.
         * @accept (optional) Is used to set specified media type.
         * @return OK
         */
        ReposClient.prototype.patchPulls = function (owner, repo, number, body, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/repos/{owner}/{repo}/pulls/{number}";
            if (owner === undefined || owner === null)
                throw new Error("The parameter 'owner' must be defined.");
            url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
            if (repo === undefined || repo === null)
                throw new Error("The parameter 'repo' must be defined.");
            url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
            if (number === undefined || number === null)
                throw new Error("The parameter 'number' must be defined.");
            url_ = url_.replace("{number}", encodeURIComponent("" + number));
            url_ = url_.replace(/[?&]$/, "");
            var content_ = JSON.stringify(body);
            var options_ = {
                body: content_,
                method: "PATCH",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processPatchPulls(_response);
            });
        };
        ReposClient.prototype.processPatchPulls = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    result200 = resultData200 ? Repo.fromJS(resultData200) : new Repo();
                    return result200;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @owner Name of repository owner.
         * @repo Name of repository.
         * @number Id of pull.
         * @accept (optional) Is used to set specified media type.
         * @return OK
         */
        ReposClient.prototype.pullsGetComments2 = function (owner, repo, number, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/repos/{owner}/{repo}/pulls/{number}/comments";
            if (owner === undefined || owner === null)
                throw new Error("The parameter 'owner' must be defined.");
            url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
            if (repo === undefined || repo === null)
                throw new Error("The parameter 'repo' must be defined.");
            url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
            if (number === undefined || number === null)
                throw new Error("The parameter 'number' must be defined.");
            url_ = url_.replace("{number}", encodeURIComponent("" + number));
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processPullsGetComments2(_response);
            });
        };
        ReposClient.prototype.processPullsGetComments2 = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    result200 = resultData200 ? PullsComment.fromJS(resultData200) : new PullsComment();
                    return result200;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @owner Name of repository owner.
         * @repo Name of repository.
         * @number Id of pull.
         * @accept (optional) Is used to set specified media type.
         * @return Created
         */
        ReposClient.prototype.pullsPostComments = function (owner, repo, number, body, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/repos/{owner}/{repo}/pulls/{number}/comments";
            if (owner === undefined || owner === null)
                throw new Error("The parameter 'owner' must be defined.");
            url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
            if (repo === undefined || repo === null)
                throw new Error("The parameter 'repo' must be defined.");
            url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
            if (number === undefined || number === null)
                throw new Error("The parameter 'number' must be defined.");
            url_ = url_.replace("{number}", encodeURIComponent("" + number));
            url_ = url_.replace(/[?&]$/, "");
            var content_ = JSON.stringify(body);
            var options_ = {
                body: content_,
                method: "POST",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processPullsPostComments(_response);
            });
        };
        ReposClient.prototype.processPullsPostComments = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 201) {
                return response.text().then(function (_responseText) {
                    var result201 = null;
                    var resultData201 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    result201 = resultData201 ? PullsComment.fromJS(resultData201) : new PullsComment();
                    return result201;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @owner Name of repository owner.
         * @repo Name of repository.
         * @number Id of pull.
         * @accept (optional) Is used to set specified media type.
         * @return OK
         */
        ReposClient.prototype.pullsGetCommits = function (owner, repo, number, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/repos/{owner}/{repo}/pulls/{number}/commits";
            if (owner === undefined || owner === null)
                throw new Error("The parameter 'owner' must be defined.");
            url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
            if (repo === undefined || repo === null)
                throw new Error("The parameter 'repo' must be defined.");
            url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
            if (number === undefined || number === null)
                throw new Error("The parameter 'number' must be defined.");
            url_ = url_.replace("{number}", encodeURIComponent("" + number));
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processPullsGetCommits(_response);
            });
        };
        ReposClient.prototype.processPullsGetCommits = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    if (resultData200 && resultData200.constructor === Array) {
                        result200 = [];
                        for (var _i = 0, resultData200_39 = resultData200; _i < resultData200_39.length; _i++) {
                            var item = resultData200_39[_i];
                            result200.push(Anonymous11.fromJS(item));
                        }
                    }
                    return result200;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @owner Name of repository owner.
         * @repo Name of repository.
         * @number Id of pull.
         * @accept (optional) Is used to set specified media type.
         * @return OK
         */
        ReposClient.prototype.pullsGetFiles = function (owner, repo, number, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/repos/{owner}/{repo}/pulls/{number}/files";
            if (owner === undefined || owner === null)
                throw new Error("The parameter 'owner' must be defined.");
            url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
            if (repo === undefined || repo === null)
                throw new Error("The parameter 'repo' must be defined.");
            url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
            if (number === undefined || number === null)
                throw new Error("The parameter 'number' must be defined.");
            url_ = url_.replace("{number}", encodeURIComponent("" + number));
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processPullsGetFiles(_response);
            });
        };
        ReposClient.prototype.processPullsGetFiles = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    if (resultData200 && resultData200.constructor === Array) {
                        result200 = [];
                        for (var _i = 0, resultData200_40 = resultData200; _i < resultData200_40.length; _i++) {
                            var item = resultData200_40[_i];
                            result200.push(Anonymous22.fromJS(item));
                        }
                    }
                    return result200;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @owner Name of repository owner.
         * @repo Name of repository.
         * @number Id of pull.
         * @accept (optional) Is used to set specified media type.
         * @return Pull request has been merged.
         */
        ReposClient.prototype.pullsGetMerge = function (owner, repo, number, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/repos/{owner}/{repo}/pulls/{number}/merge";
            if (owner === undefined || owner === null)
                throw new Error("The parameter 'owner' must be defined.");
            url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
            if (repo === undefined || repo === null)
                throw new Error("The parameter 'repo' must be defined.");
            url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
            if (number === undefined || number === null)
                throw new Error("The parameter 'number' must be defined.");
            url_ = url_.replace("{number}", encodeURIComponent("" + number));
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processPullsGetMerge(_response);
            });
        };
        ReposClient.prototype.processPullsGetMerge = function (response) {
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 204) {
                return response.text().then(function (_responseText) {
                    return;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 404) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @owner Name of repository owner.
         * @repo Name of repository.
         * @number Id of pull.
         * @accept (optional) Is used to set specified media type.
         * @return Response if merge was successful.
         */
        ReposClient.prototype.pullsPutMerge = function (owner, repo, number, body, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/repos/{owner}/{repo}/pulls/{number}/merge";
            if (owner === undefined || owner === null)
                throw new Error("The parameter 'owner' must be defined.");
            url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
            if (repo === undefined || repo === null)
                throw new Error("The parameter 'repo' must be defined.");
            url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
            if (number === undefined || number === null)
                throw new Error("The parameter 'number' must be defined.");
            url_ = url_.replace("{number}", encodeURIComponent("" + number));
            url_ = url_.replace(/[?&]$/, "");
            var content_ = JSON.stringify(body);
            var options_ = {
                body: content_,
                method: "PUT",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processPullsPutMerge(_response);
            });
        };
        ReposClient.prototype.processPullsPutMerge = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    result200 = resultData200 ? Merge.fromJS(resultData200) : new Merge();
                    return result200;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 405) {
                return response.text().then(function (_responseText) {
                    var result405 = null;
                    var resultData405 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    result405 = resultData405 ? Merge.fromJS(resultData405) : new Merge();
                    return throwException("A server error occurred.", status, _responseText, _headers, result405);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @owner Name of repository owner.
         * @repo Name of repository.
         * @ref (optional) The String name of the Commit/Branch/Tag. Defaults to master.
         * @accept (optional) Is used to set specified media type.
         * @return OK
         */
        ReposClient.prototype.getReadme = function (owner, repo, ref, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/repos/{owner}/{repo}/readme?";
            if (owner === undefined || owner === null)
                throw new Error("The parameter 'owner' must be defined.");
            url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
            if (repo === undefined || repo === null)
                throw new Error("The parameter 'repo' must be defined.");
            url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
            if (ref !== undefined)
                url_ += "ref=" + encodeURIComponent("" + ref) + "&";
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processGetReadme(_response);
            });
        };
        ReposClient.prototype.processGetReadme = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    result200 = resultData200 ? ContentsPath.fromJS(resultData200) : new ContentsPath();
                    return result200;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @owner Name of repository owner.
         * @repo Name of repository.
         * @accept (optional) Is used to set specified media type.
         * @return OK
         */
        ReposClient.prototype.getReleasesAll = function (owner, repo, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/repos/{owner}/{repo}/releases";
            if (owner === undefined || owner === null)
                throw new Error("The parameter 'owner' must be defined.");
            url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
            if (repo === undefined || repo === null)
                throw new Error("The parameter 'repo' must be defined.");
            url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processGetReleasesAll(_response);
            });
        };
        ReposClient.prototype.processGetReleasesAll = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    if (resultData200 && resultData200.constructor === Array) {
                        result200 = [];
                        for (var _i = 0, resultData200_41 = resultData200; _i < resultData200_41.length; _i++) {
                            var item = resultData200_41[_i];
                            result200.push(Anonymous23.fromJS(item));
                        }
                    }
                    return result200;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @owner Name of repository owner.
         * @repo Name of repository.
         * @accept (optional) Is used to set specified media type.
         * @return Created
         */
        ReposClient.prototype.postReleases = function (owner, repo, body, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/repos/{owner}/{repo}/releases";
            if (owner === undefined || owner === null)
                throw new Error("The parameter 'owner' must be defined.");
            url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
            if (repo === undefined || repo === null)
                throw new Error("The parameter 'repo' must be defined.");
            url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
            url_ = url_.replace(/[?&]$/, "");
            var content_ = JSON.stringify(body);
            var options_ = {
                body: content_,
                method: "POST",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processPostReleases(_response);
            });
        };
        ReposClient.prototype.processPostReleases = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 201) {
                return response.text().then(function (_responseText) {
                    var result201 = null;
                    var resultData201 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    result201 = resultData201 ? Release.fromJS(resultData201) : new Release();
                    return result201;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @owner Name of repository owner.
         * @repo Name of repository.
         * @accept (optional) Is used to set specified media type.
         * @return No Content
         */
        ReposClient.prototype.releasesDeleteAssets = function (owner, repo, id, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/repos/{owner}/{repo}/releases/assets/{id}";
            if (owner === undefined || owner === null)
                throw new Error("The parameter 'owner' must be defined.");
            url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
            if (repo === undefined || repo === null)
                throw new Error("The parameter 'repo' must be defined.");
            url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
            if (id === undefined || id === null)
                throw new Error("The parameter 'id' must be defined.");
            url_ = url_.replace("{id}", encodeURIComponent("" + id));
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "DELETE",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processReleasesDeleteAssets(_response);
            });
        };
        ReposClient.prototype.processReleasesDeleteAssets = function (response) {
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 204) {
                return response.text().then(function (_responseText) {
                    return;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @owner Name of repository owner.
         * @repo Name of repository.
         * @accept (optional) Is used to set specified media type.
         * @return OK
         */
        ReposClient.prototype.releasesGetAssets = function (owner, repo, id, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/repos/{owner}/{repo}/releases/assets/{id}";
            if (owner === undefined || owner === null)
                throw new Error("The parameter 'owner' must be defined.");
            url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
            if (repo === undefined || repo === null)
                throw new Error("The parameter 'repo' must be defined.");
            url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
            if (id === undefined || id === null)
                throw new Error("The parameter 'id' must be defined.");
            url_ = url_.replace("{id}", encodeURIComponent("" + id));
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processReleasesGetAssets(_response);
            });
        };
        ReposClient.prototype.processReleasesGetAssets = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    result200 = resultData200 ? Asset.fromJS(resultData200) : new Asset();
                    return result200;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @owner Name of repository owner.
         * @repo Name of repository.
         * @accept (optional) Is used to set specified media type.
         * @return OK
         */
        ReposClient.prototype.releasesPatchAssets = function (owner, repo, id, body, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/repos/{owner}/{repo}/releases/assets/{id}";
            if (owner === undefined || owner === null)
                throw new Error("The parameter 'owner' must be defined.");
            url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
            if (repo === undefined || repo === null)
                throw new Error("The parameter 'repo' must be defined.");
            url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
            if (id === undefined || id === null)
                throw new Error("The parameter 'id' must be defined.");
            url_ = url_.replace("{id}", encodeURIComponent("" + id));
            url_ = url_.replace(/[?&]$/, "");
            var content_ = JSON.stringify(body);
            var options_ = {
                body: content_,
                method: "PATCH",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processReleasesPatchAssets(_response);
            });
        };
        ReposClient.prototype.processReleasesPatchAssets = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    result200 = resultData200 ? Asset.fromJS(resultData200) : new Asset();
                    return result200;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @owner Name of repository owner.
         * @repo Name of repository.
         * @accept (optional) Is used to set specified media type.
         * @return No Content
         */
        ReposClient.prototype.deleteReleases = function (owner, repo, id, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/repos/{owner}/{repo}/releases/{id}";
            if (owner === undefined || owner === null)
                throw new Error("The parameter 'owner' must be defined.");
            url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
            if (repo === undefined || repo === null)
                throw new Error("The parameter 'repo' must be defined.");
            url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
            if (id === undefined || id === null)
                throw new Error("The parameter 'id' must be defined.");
            url_ = url_.replace("{id}", encodeURIComponent("" + id));
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "DELETE",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processDeleteReleases(_response);
            });
        };
        ReposClient.prototype.processDeleteReleases = function (response) {
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 204) {
                return response.text().then(function (_responseText) {
                    return;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @owner Name of repository owner.
         * @repo Name of repository.
         * @accept (optional) Is used to set specified media type.
         * @return OK
         */
        ReposClient.prototype.getReleases = function (owner, repo, id, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/repos/{owner}/{repo}/releases/{id}";
            if (owner === undefined || owner === null)
                throw new Error("The parameter 'owner' must be defined.");
            url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
            if (repo === undefined || repo === null)
                throw new Error("The parameter 'repo' must be defined.");
            url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
            if (id === undefined || id === null)
                throw new Error("The parameter 'id' must be defined.");
            url_ = url_.replace("{id}", encodeURIComponent("" + id));
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processGetReleases(_response);
            });
        };
        ReposClient.prototype.processGetReleases = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    result200 = resultData200 ? Release.fromJS(resultData200) : new Release();
                    return result200;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @owner Name of repository owner.
         * @repo Name of repository.
         * @accept (optional) Is used to set specified media type.
         * @return OK
         */
        ReposClient.prototype.patchReleases = function (owner, repo, id, body, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/repos/{owner}/{repo}/releases/{id}";
            if (owner === undefined || owner === null)
                throw new Error("The parameter 'owner' must be defined.");
            url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
            if (repo === undefined || repo === null)
                throw new Error("The parameter 'repo' must be defined.");
            url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
            if (id === undefined || id === null)
                throw new Error("The parameter 'id' must be defined.");
            url_ = url_.replace("{id}", encodeURIComponent("" + id));
            url_ = url_.replace(/[?&]$/, "");
            var content_ = JSON.stringify(body);
            var options_ = {
                body: content_,
                method: "PATCH",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processPatchReleases(_response);
            });
        };
        ReposClient.prototype.processPatchReleases = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    result200 = resultData200 ? Release.fromJS(resultData200) : new Release();
                    return result200;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @owner Name of repository owner.
         * @repo Name of repository.
         * @accept (optional) Is used to set specified media type.
         * @return OK
         */
        ReposClient.prototype.releasesGetAssetsAll = function (owner, repo, id, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/repos/{owner}/{repo}/releases/{id}/assets";
            if (owner === undefined || owner === null)
                throw new Error("The parameter 'owner' must be defined.");
            url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
            if (repo === undefined || repo === null)
                throw new Error("The parameter 'repo' must be defined.");
            url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
            if (id === undefined || id === null)
                throw new Error("The parameter 'id' must be defined.");
            url_ = url_.replace("{id}", encodeURIComponent("" + id));
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processReleasesGetAssetsAll(_response);
            });
        };
        ReposClient.prototype.processReleasesGetAssetsAll = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    if (resultData200 && resultData200.constructor === Array) {
                        result200 = [];
                        for (var _i = 0, resultData200_42 = resultData200; _i < resultData200_42.length; _i++) {
                            var item = resultData200_42[_i];
                            result200.push(Anonymous24.fromJS(item));
                        }
                    }
                    return result200;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @owner Name of repository owner.
         * @repo Name of repository.
         * @accept (optional) Is used to set specified media type.
         * @return OK
         */
        ReposClient.prototype.getStargazers = function (owner, repo, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/repos/{owner}/{repo}/stargazers";
            if (owner === undefined || owner === null)
                throw new Error("The parameter 'owner' must be defined.");
            url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
            if (repo === undefined || repo === null)
                throw new Error("The parameter 'repo' must be defined.");
            url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processGetStargazers(_response);
            });
        };
        ReposClient.prototype.processGetStargazers = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    if (resultData200 && resultData200.constructor === Array) {
                        result200 = [];
                        for (var _i = 0, resultData200_43 = resultData200; _i < resultData200_43.length; _i++) {
                            var item = resultData200_43[_i];
                            result200.push(Anonymous4.fromJS(item));
                        }
                    }
                    return result200;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @owner Name of repository owner.
         * @repo Name of repository.
         * @accept (optional) Is used to set specified media type.
         * @return OK
         */
        ReposClient.prototype.statsGetCodeFrequency = function (owner, repo, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/repos/{owner}/{repo}/stats/code_frequency";
            if (owner === undefined || owner === null)
                throw new Error("The parameter 'owner' must be defined.");
            url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
            if (repo === undefined || repo === null)
                throw new Error("The parameter 'repo' must be defined.");
            url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processStatsGetCodeFrequency(_response);
            });
        };
        ReposClient.prototype.processStatsGetCodeFrequency = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    if (resultData200 && resultData200.constructor === Array) {
                        result200 = [];
                        for (var _i = 0, resultData200_44 = resultData200; _i < resultData200_44.length; _i++) {
                            var item = resultData200_44[_i];
                            result200.push(item);
                        }
                    }
                    return result200;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @owner Name of repository owner.
         * @repo Name of repository.
         * @accept (optional) Is used to set specified media type.
         * @return OK
         */
        ReposClient.prototype.statsGetCommitActivity = function (owner, repo, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/repos/{owner}/{repo}/stats/commit_activity";
            if (owner === undefined || owner === null)
                throw new Error("The parameter 'owner' must be defined.");
            url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
            if (repo === undefined || repo === null)
                throw new Error("The parameter 'repo' must be defined.");
            url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processStatsGetCommitActivity(_response);
            });
        };
        ReposClient.prototype.processStatsGetCommitActivity = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    if (resultData200 && resultData200.constructor === Array) {
                        result200 = [];
                        for (var _i = 0, resultData200_45 = resultData200; _i < resultData200_45.length; _i++) {
                            var item = resultData200_45[_i];
                            result200.push(Anonymous25.fromJS(item));
                        }
                    }
                    return result200;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @owner Name of repository owner.
         * @repo Name of repository.
         * @accept (optional) Is used to set specified media type.
         * @return OK
         */
        ReposClient.prototype.statsGetContributors = function (owner, repo, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/repos/{owner}/{repo}/stats/contributors";
            if (owner === undefined || owner === null)
                throw new Error("The parameter 'owner' must be defined.");
            url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
            if (repo === undefined || repo === null)
                throw new Error("The parameter 'repo' must be defined.");
            url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processStatsGetContributors(_response);
            });
        };
        ReposClient.prototype.processStatsGetContributors = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    if (resultData200 && resultData200.constructor === Array) {
                        result200 = [];
                        for (var _i = 0, resultData200_46 = resultData200; _i < resultData200_46.length; _i++) {
                            var item = resultData200_46[_i];
                            result200.push(Anonymous26.fromJS(item));
                        }
                    }
                    return result200;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @owner Name of repository owner.
         * @repo Name of repository.
         * @accept (optional) Is used to set specified media type.
         * @return OK
         */
        ReposClient.prototype.statsGetParticipation = function (owner, repo, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/repos/{owner}/{repo}/stats/participation";
            if (owner === undefined || owner === null)
                throw new Error("The parameter 'owner' must be defined.");
            url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
            if (repo === undefined || repo === null)
                throw new Error("The parameter 'repo' must be defined.");
            url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processStatsGetParticipation(_response);
            });
        };
        ReposClient.prototype.processStatsGetParticipation = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    result200 = resultData200 ? ParticipationStats.fromJS(resultData200) : new ParticipationStats();
                    return result200;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @owner Name of repository owner.
         * @repo Name of repository.
         * @accept (optional) Is used to set specified media type.
         * @return OK
         */
        ReposClient.prototype.statsGetPunchCard = function (owner, repo, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/repos/{owner}/{repo}/stats/punch_card";
            if (owner === undefined || owner === null)
                throw new Error("The parameter 'owner' must be defined.");
            url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
            if (repo === undefined || repo === null)
                throw new Error("The parameter 'repo' must be defined.");
            url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processStatsGetPunchCard(_response);
            });
        };
        ReposClient.prototype.processStatsGetPunchCard = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    if (resultData200 && resultData200.constructor === Array) {
                        result200 = [];
                        for (var _i = 0, resultData200_47 = resultData200; _i < resultData200_47.length; _i++) {
                            var item = resultData200_47[_i];
                            result200.push(item);
                        }
                    }
                    return result200;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @owner Name of repository owner.
         * @repo Name of repository.
         * @ref Ref to list the statuses from. It can be a SHA, a branch name, or a tag name.
         * @accept (optional) Is used to set specified media type.
         * @return OK
         */
        ReposClient.prototype.getStatuses = function (owner, repo, ref, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/repos/{owner}/{repo}/statuses/{ref}";
            if (owner === undefined || owner === null)
                throw new Error("The parameter 'owner' must be defined.");
            url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
            if (repo === undefined || repo === null)
                throw new Error("The parameter 'repo' must be defined.");
            url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
            if (ref === undefined || ref === null)
                throw new Error("The parameter 'ref' must be defined.");
            url_ = url_.replace("{ref}", encodeURIComponent("" + ref));
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processGetStatuses(_response);
            });
        };
        ReposClient.prototype.processGetStatuses = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    if (resultData200 && resultData200.constructor === Array) {
                        result200 = [];
                        for (var _i = 0, resultData200_48 = resultData200; _i < resultData200_48.length; _i++) {
                            var item = resultData200_48[_i];
                            result200.push(Anonymous27.fromJS(item));
                        }
                    }
                    return result200;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @owner Name of repository owner.
         * @repo Name of repository.
         * @ref Ref to list the statuses from. It can be a SHA, a branch name, or a tag name.
         * @accept (optional) Is used to set specified media type.
         * @return Created
         */
        ReposClient.prototype.postStatuses = function (owner, repo, ref, body, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/repos/{owner}/{repo}/statuses/{ref}";
            if (owner === undefined || owner === null)
                throw new Error("The parameter 'owner' must be defined.");
            url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
            if (repo === undefined || repo === null)
                throw new Error("The parameter 'repo' must be defined.");
            url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
            if (ref === undefined || ref === null)
                throw new Error("The parameter 'ref' must be defined.");
            url_ = url_.replace("{ref}", encodeURIComponent("" + ref));
            url_ = url_.replace(/[?&]$/, "");
            var content_ = JSON.stringify(body);
            var options_ = {
                body: content_,
                method: "POST",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processPostStatuses(_response);
            });
        };
        ReposClient.prototype.processPostStatuses = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 201) {
                return response.text().then(function (_responseText) {
                    var result201 = null;
                    var resultData201 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    if (resultData201 && resultData201.constructor === Array) {
                        result201 = [];
                        for (var _i = 0, resultData201_4 = resultData201; _i < resultData201_4.length; _i++) {
                            var item = resultData201_4[_i];
                            result201.push(Anonymous27.fromJS(item));
                        }
                    }
                    return result201;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @owner Name of repository owner.
         * @repo Name of repository.
         * @accept (optional) Is used to set specified media type.
         * @return OK
         */
        ReposClient.prototype.getSubscribers = function (owner, repo, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/repos/{owner}/{repo}/subscribers";
            if (owner === undefined || owner === null)
                throw new Error("The parameter 'owner' must be defined.");
            url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
            if (repo === undefined || repo === null)
                throw new Error("The parameter 'repo' must be defined.");
            url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processGetSubscribers(_response);
            });
        };
        ReposClient.prototype.processGetSubscribers = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    if (resultData200 && resultData200.constructor === Array) {
                        result200 = [];
                        for (var _i = 0, resultData200_49 = resultData200; _i < resultData200_49.length; _i++) {
                            var item = resultData200_49[_i];
                            result200.push(Anonymous4.fromJS(item));
                        }
                    }
                    return result200;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @owner Name of repository owner.
         * @repo Name of repository.
         * @accept (optional) Is used to set specified media type.
         * @return No content.
         */
        ReposClient.prototype.deleteSubscription = function (owner, repo, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/repos/{owner}/{repo}/subscription";
            if (owner === undefined || owner === null)
                throw new Error("The parameter 'owner' must be defined.");
            url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
            if (repo === undefined || repo === null)
                throw new Error("The parameter 'repo' must be defined.");
            url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "DELETE",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processDeleteSubscription(_response);
            });
        };
        ReposClient.prototype.processDeleteSubscription = function (response) {
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 204) {
                return response.text().then(function (_responseText) {
                    return;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @owner Name of repository owner.
         * @repo Name of repository.
         * @accept (optional) Is used to set specified media type.
         * @return OK
         */
        ReposClient.prototype.getSubscription = function (owner, repo, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/repos/{owner}/{repo}/subscription";
            if (owner === undefined || owner === null)
                throw new Error("The parameter 'owner' must be defined.");
            url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
            if (repo === undefined || repo === null)
                throw new Error("The parameter 'repo' must be defined.");
            url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processGetSubscription(_response);
            });
        };
        ReposClient.prototype.processGetSubscription = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    result200 = resultData200 ? Subscribition.fromJS(resultData200) : new Subscribition();
                    return result200;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @owner Name of repository owner.
         * @repo Name of repository.
         * @accept (optional) Is used to set specified media type.
         * @return OK
         */
        ReposClient.prototype.putSubscription = function (owner, repo, body, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/repos/{owner}/{repo}/subscription";
            if (owner === undefined || owner === null)
                throw new Error("The parameter 'owner' must be defined.");
            url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
            if (repo === undefined || repo === null)
                throw new Error("The parameter 'repo' must be defined.");
            url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
            url_ = url_.replace(/[?&]$/, "");
            var content_ = JSON.stringify(body);
            var options_ = {
                body: content_,
                method: "PUT",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processPutSubscription(_response);
            });
        };
        ReposClient.prototype.processPutSubscription = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    result200 = resultData200 ? Subscribition.fromJS(resultData200) : new Subscribition();
                    return result200;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @owner Name of repository owner.
         * @repo Name of repository.
         * @accept (optional) Is used to set specified media type.
         * @return OK
         */
        ReposClient.prototype.getTags = function (owner, repo, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/repos/{owner}/{repo}/tags";
            if (owner === undefined || owner === null)
                throw new Error("The parameter 'owner' must be defined.");
            url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
            if (repo === undefined || repo === null)
                throw new Error("The parameter 'repo' must be defined.");
            url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processGetTags(_response);
            });
        };
        ReposClient.prototype.processGetTags = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    result200 = resultData200 ? Tags.fromJS(resultData200) : new Tags();
                    return result200;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @owner Name of repository owner.
         * @repo Name of repository.
         * @accept (optional) Is used to set specified media type.
         * @return OK
         */
        ReposClient.prototype.getTeams = function (owner, repo, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/repos/{owner}/{repo}/teams";
            if (owner === undefined || owner === null)
                throw new Error("The parameter 'owner' must be defined.");
            url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
            if (repo === undefined || repo === null)
                throw new Error("The parameter 'repo' must be defined.");
            url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processGetTeams(_response);
            });
        };
        ReposClient.prototype.processGetTeams = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    if (resultData200 && resultData200.constructor === Array) {
                        result200 = [];
                        for (var _i = 0, resultData200_50 = resultData200; _i < resultData200_50.length; _i++) {
                            var item = resultData200_50[_i];
                            result200.push(Anonymous7.fromJS(item));
                        }
                    }
                    return result200;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @owner Name of repository owner.
         * @repo Name of repository.
         * @accept (optional) Is used to set specified media type.
         * @return OK
         */
        ReposClient.prototype.getWatchers = function (owner, repo, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/repos/{owner}/{repo}/watchers";
            if (owner === undefined || owner === null)
                throw new Error("The parameter 'owner' must be defined.");
            url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
            if (repo === undefined || repo === null)
                throw new Error("The parameter 'repo' must be defined.");
            url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processGetWatchers(_response);
            });
        };
        ReposClient.prototype.processGetWatchers = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    if (resultData200 && resultData200.constructor === Array) {
                        result200 = [];
                        for (var _i = 0, resultData200_51 = resultData200; _i < resultData200_51.length; _i++) {
                            var item = resultData200_51[_i];
                            result200.push(Anonymous4.fromJS(item));
                        }
                    }
                    return result200;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        return ReposClient;
    }(ClientBase));
    GithubApiClient.ReposClient = ReposClient;
    var SearchClient = /** @class */ (function (_super) {
        __extends(SearchClient, _super);
        function SearchClient(baseUrl, http) {
            var _this = _super.call(this) || this;
            _this.jsonParseReviver = undefined;
            _this.http = http ? http : window;
            _this.baseUrl = baseUrl ? baseUrl : "https://api.github.com";
            return _this;
        }
        /**
         * @q The search terms. This can be any combination of the supported code
        search parameters:
        'Search In' Qualifies which fields are searched. With this qualifier
        you can restrict the search to just the file contents, the file path,
        or both.
        'Languages' Searches code based on the language it's written in.
        'Forks' Filters repositories based on the number of forks, and/or
        whether code from forked repositories should be included in the results
        at all.
        'Size' Finds files that match a certain size (in bytes).
        'Path' Specifies the path that the resulting file must be at.
        'Extension' Matches files with a certain extension.
        'Users' or 'Repositories' Limits searches to a specific user or repository.
         * @order (optional) The sort field. if sort param is provided. Can be either asc or desc.
         * @sort (optional) Can only be 'indexed', which indicates how recently a file has been indexed
        by the GitHub search infrastructure. If not provided, results are sorted
        by best match.
         * @accept (optional) Is used to set specified media type.
         * @return OK
         */
        SearchClient.prototype.getCode = function (q, order, sort, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/search/code?";
            if (q === undefined || q === null)
                throw new Error("The parameter 'q' must be defined and cannot be null.");
            else
                url_ += "q=" + encodeURIComponent("" + q) + "&";
            if (order !== undefined)
                url_ += "order=" + encodeURIComponent("" + order) + "&";
            if (sort !== undefined)
                url_ += "sort=" + encodeURIComponent("" + sort) + "&";
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processGetCode(_response);
            });
        };
        SearchClient.prototype.processGetCode = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    result200 = resultData200 ? SearchCode.fromJS(resultData200) : new SearchCode();
                    return result200;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @q The q search term can also contain any combination of the supported issue search qualifiers:
         * @order (optional) The sort field. if sort param is provided. Can be either asc or desc.
         * @sort (optional) The sort field. Can be comments, created, or updated. Default: results are sorted by best match.
         * @accept (optional) Is used to set specified media type.
         * @return OK
         */
        SearchClient.prototype.getIssues = function (q, order, sort, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/search/issues?";
            if (q === undefined || q === null)
                throw new Error("The parameter 'q' must be defined and cannot be null.");
            else
                url_ += "q=" + encodeURIComponent("" + q) + "&";
            if (order !== undefined)
                url_ += "order=" + encodeURIComponent("" + order) + "&";
            if (sort !== undefined)
                url_ += "sort=" + encodeURIComponent("" + sort) + "&";
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processGetIssues(_response);
            });
        };
        SearchClient.prototype.processGetIssues = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    result200 = resultData200 ? SearchIssues.fromJS(resultData200) : new SearchIssues();
                    return result200;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @q The search terms. This can be any combination of the supported repository
        search parameters:
        'Search In' Qualifies which fields are searched. With this qualifier you
        can restrict the search to just the repository name, description, readme,
        or any combination of these.
        'Size' Finds repositories that match a certain size (in kilobytes).
        'Forks' Filters repositories based on the number of forks, and/or whether
        forked repositories should be included in the results at all.
        'Created' and 'Last Updated' Filters repositories based on times of
        creation, or when they were last updated.
        'Users or Repositories' Limits searches to a specific user or repository.
        'Languages' Searches repositories based on the language they are written in.
        'Stars' Searches repositories based on the number of stars.
         * @order (optional) The sort field. if sort param is provided. Can be either asc or desc.
         * @sort (optional) If not provided, results are sorted by best match.
         * @accept (optional) Is used to set specified media type.
         * @return OK
         */
        SearchClient.prototype.getRepositories = function (q, order, sort, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/search/repositories?";
            if (q === undefined || q === null)
                throw new Error("The parameter 'q' must be defined and cannot be null.");
            else
                url_ += "q=" + encodeURIComponent("" + q) + "&";
            if (order !== undefined)
                url_ += "order=" + encodeURIComponent("" + order) + "&";
            if (sort !== undefined)
                url_ += "sort=" + encodeURIComponent("" + sort) + "&";
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processGetRepositories(_response);
            });
        };
        SearchClient.prototype.processGetRepositories = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    result200 = resultData200 ? SearchRepositories.fromJS(resultData200) : new SearchRepositories();
                    return result200;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @q The search terms. This can be any combination of the supported user
        search parameters:
        'Search In' Qualifies which fields are searched. With this qualifier you
        can restrict the search to just the username, public email, full name,
        location, or any combination of these.
        'Repository count' Filters users based on the number of repositories they
        have.
        'Location' Filter users by the location indicated in their profile.
        'Language' Search for users that have repositories that match a certain
        language.
        'Created' Filter users based on when they joined.
        'Followers' Filter users based on the number of followers they have.
         * @order (optional) The sort field. if sort param is provided. Can be either asc or desc.
         * @sort (optional) If not provided, results are sorted by best match.
         * @accept (optional) Is used to set specified media type.
         * @return OK
         */
        SearchClient.prototype.getUsers = function (q, order, sort, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/search/users?";
            if (q === undefined || q === null)
                throw new Error("The parameter 'q' must be defined and cannot be null.");
            else
                url_ += "q=" + encodeURIComponent("" + q) + "&";
            if (order !== undefined)
                url_ += "order=" + encodeURIComponent("" + order) + "&";
            if (sort !== undefined)
                url_ += "sort=" + encodeURIComponent("" + sort) + "&";
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processGetUsers(_response);
            });
        };
        SearchClient.prototype.processGetUsers = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    result200 = resultData200 ? SearchUsers.fromJS(resultData200) : new SearchUsers();
                    return result200;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        return SearchClient;
    }(ClientBase));
    GithubApiClient.SearchClient = SearchClient;
    var TeamsClient = /** @class */ (function (_super) {
        __extends(TeamsClient, _super);
        function TeamsClient(baseUrl, http) {
            var _this = _super.call(this) || this;
            _this.jsonParseReviver = undefined;
            _this.http = http ? http : window;
            _this.baseUrl = baseUrl ? baseUrl : "https://api.github.com";
            return _this;
        }
        /**
         * @teamId Id of team.
         * @accept (optional) Is used to set specified media type.
         * @return OK
         */
        TeamsClient.prototype.getMembersAll = function (teamId, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/teams/{teamId}/members";
            if (teamId === undefined || teamId === null)
                throw new Error("The parameter 'teamId' must be defined.");
            url_ = url_.replace("{teamId}", encodeURIComponent("" + teamId));
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processGetMembersAll(_response);
            });
        };
        TeamsClient.prototype.processGetMembersAll = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    if (resultData200 && resultData200.constructor === Array) {
                        result200 = [];
                        for (var _i = 0, resultData200_52 = resultData200; _i < resultData200_52.length; _i++) {
                            var item = resultData200_52[_i];
                            result200.push(Anonymous4.fromJS(item));
                        }
                    }
                    return result200;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @teamId Id of team.
         * @username Name of a member.
         * @accept (optional) Is used to set specified media type.
         * @return Team member removed.
         */
        TeamsClient.prototype.deleteMembers = function (teamId, username, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/teams/{teamId}/members/{username}";
            if (teamId === undefined || teamId === null)
                throw new Error("The parameter 'teamId' must be defined.");
            url_ = url_.replace("{teamId}", encodeURIComponent("" + teamId));
            if (username === undefined || username === null)
                throw new Error("The parameter 'username' must be defined.");
            url_ = url_.replace("{username}", encodeURIComponent("" + username));
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "DELETE",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processDeleteMembers(_response);
            });
        };
        TeamsClient.prototype.processDeleteMembers = function (response) {
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 204) {
                return response.text().then(function (_responseText) {
                    return;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @teamId Id of team.
         * @username Name of a member.
         * @accept (optional) Is used to set specified media type.
         * @return User is a member.
         */
        TeamsClient.prototype.getMembers = function (teamId, username, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/teams/{teamId}/members/{username}";
            if (teamId === undefined || teamId === null)
                throw new Error("The parameter 'teamId' must be defined.");
            url_ = url_.replace("{teamId}", encodeURIComponent("" + teamId));
            if (username === undefined || username === null)
                throw new Error("The parameter 'username' must be defined.");
            url_ = url_.replace("{username}", encodeURIComponent("" + username));
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processGetMembers(_response);
            });
        };
        TeamsClient.prototype.processGetMembers = function (response) {
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 204) {
                return response.text().then(function (_responseText) {
                    return;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 404) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @teamId Id of team.
         * @username Name of a member.
         * @accept (optional) Is used to set specified media type.
         * @return Team member added.
         */
        TeamsClient.prototype.putMembers = function (teamId, username, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/teams/{teamId}/members/{username}";
            if (teamId === undefined || teamId === null)
                throw new Error("The parameter 'teamId' must be defined.");
            url_ = url_.replace("{teamId}", encodeURIComponent("" + teamId));
            if (username === undefined || username === null)
                throw new Error("The parameter 'username' must be defined.");
            url_ = url_.replace("{username}", encodeURIComponent("" + username));
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "PUT",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processPutMembers(_response);
            });
        };
        TeamsClient.prototype.processPutMembers = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 204) {
                return response.text().then(function (_responseText) {
                    return;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 422) {
                return response.text().then(function (_responseText) {
                    var result422 = null;
                    var resultData422 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    result422 = resultData422 ? OrganizationAsTeamMember.fromJS(resultData422) : new OrganizationAsTeamMember();
                    return throwException("A server error occurred.", status, _responseText, _headers, result422);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @teamId Id of team.
         * @username Name of a member.
         * @accept (optional) Is used to set specified media type.
         * @return Team member removed.
         */
        TeamsClient.prototype.deleteMemberships = function (teamId, username, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/teams/{teamId}/memberships/{username}";
            if (teamId === undefined || teamId === null)
                throw new Error("The parameter 'teamId' must be defined.");
            url_ = url_.replace("{teamId}", encodeURIComponent("" + teamId));
            if (username === undefined || username === null)
                throw new Error("The parameter 'username' must be defined.");
            url_ = url_.replace("{username}", encodeURIComponent("" + username));
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "DELETE",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processDeleteMemberships(_response);
            });
        };
        TeamsClient.prototype.processDeleteMemberships = function (response) {
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 204) {
                return response.text().then(function (_responseText) {
                    return;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @teamId Id of team.
         * @username Name of a member.
         * @accept (optional) Is used to set specified media type.
         * @return User is a member.
         */
        TeamsClient.prototype.getMemberships = function (teamId, username, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/teams/{teamId}/memberships/{username}";
            if (teamId === undefined || teamId === null)
                throw new Error("The parameter 'teamId' must be defined.");
            url_ = url_.replace("{teamId}", encodeURIComponent("" + teamId));
            if (username === undefined || username === null)
                throw new Error("The parameter 'username' must be defined.");
            url_ = url_.replace("{username}", encodeURIComponent("" + username));
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processGetMemberships(_response);
            });
        };
        TeamsClient.prototype.processGetMemberships = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    result200 = resultData200 ? TeamMembership.fromJS(resultData200) : new TeamMembership();
                    return result200;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 404) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @teamId Id of team.
         * @username Name of a member.
         * @accept (optional) Is used to set specified media type.
         * @return Team member added.
         */
        TeamsClient.prototype.putMemberships = function (teamId, username, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/teams/{teamId}/memberships/{username}";
            if (teamId === undefined || teamId === null)
                throw new Error("The parameter 'teamId' must be defined.");
            url_ = url_.replace("{teamId}", encodeURIComponent("" + teamId));
            if (username === undefined || username === null)
                throw new Error("The parameter 'username' must be defined.");
            url_ = url_.replace("{username}", encodeURIComponent("" + username));
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "PUT",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processPutMemberships(_response);
            });
        };
        TeamsClient.prototype.processPutMemberships = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    result200 = resultData200 ? TeamMembership.fromJS(resultData200) : new TeamMembership();
                    return result200;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 422) {
                return response.text().then(function (_responseText) {
                    var result422 = null;
                    var resultData422 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    result422 = resultData422 ? OrganizationAsTeamMember.fromJS(resultData422) : new OrganizationAsTeamMember();
                    return throwException("A server error occurred.", status, _responseText, _headers, result422);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @teamId Id of team.
         * @accept (optional) Is used to set specified media type.
         * @return OK
         */
        TeamsClient.prototype.getReposAll = function (teamId, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/teams/{teamId}/repos";
            if (teamId === undefined || teamId === null)
                throw new Error("The parameter 'teamId' must be defined.");
            url_ = url_.replace("{teamId}", encodeURIComponent("" + teamId));
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processGetReposAll(_response);
            });
        };
        TeamsClient.prototype.processGetReposAll = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    if (resultData200 && resultData200.constructor === Array) {
                        result200 = [];
                        for (var _i = 0, resultData200_53 = resultData200; _i < resultData200_53.length; _i++) {
                            var item = resultData200_53[_i];
                            result200.push(Anonymous28.fromJS(item));
                        }
                    }
                    return result200;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @teamId Id of team.
         * @org Name of a organization.
         * @repo Name of a repository.
         * @accept (optional) Is used to set specified media type.
         */
        TeamsClient.prototype.putRepos = function (teamId, org, repo, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/teams/{teamId}/repos/{org}/{repo}";
            if (teamId === undefined || teamId === null)
                throw new Error("The parameter 'teamId' must be defined.");
            url_ = url_.replace("{teamId}", encodeURIComponent("" + teamId));
            if (org === undefined || org === null)
                throw new Error("The parameter 'org' must be defined.");
            url_ = url_.replace("{org}", encodeURIComponent("" + org));
            if (repo === undefined || repo === null)
                throw new Error("The parameter 'repo' must be defined.");
            url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "PUT",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processPutRepos(_response);
            });
        };
        TeamsClient.prototype.processPutRepos = function (response) {
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @teamId Id of team.
         * @owner Name of a repository owner.
         * @repo Name of a repository.
         * @accept (optional) Is used to set specified media type.
         * @return No content.
         */
        TeamsClient.prototype.deleteRepos = function (teamId, owner, repo, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/teams/{teamId}/repos/{owner}/{repo}";
            if (teamId === undefined || teamId === null)
                throw new Error("The parameter 'teamId' must be defined.");
            url_ = url_.replace("{teamId}", encodeURIComponent("" + teamId));
            if (owner === undefined || owner === null)
                throw new Error("The parameter 'owner' must be defined.");
            url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
            if (repo === undefined || repo === null)
                throw new Error("The parameter 'repo' must be defined.");
            url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "DELETE",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processDeleteRepos(_response);
            });
        };
        TeamsClient.prototype.processDeleteRepos = function (response) {
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 204) {
                return response.text().then(function (_responseText) {
                    return;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @teamId Id of team.
         * @owner Name of a repository owner.
         * @repo Name of a repository.
         * @accept (optional) Is used to set specified media type.
         */
        TeamsClient.prototype.getRepos = function (teamId, owner, repo, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/teams/{teamId}/repos/{owner}/{repo}";
            if (teamId === undefined || teamId === null)
                throw new Error("The parameter 'teamId' must be defined.");
            url_ = url_.replace("{teamId}", encodeURIComponent("" + teamId));
            if (owner === undefined || owner === null)
                throw new Error("The parameter 'owner' must be defined.");
            url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
            if (repo === undefined || repo === null)
                throw new Error("The parameter 'repo' must be defined.");
            url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processGetRepos(_response);
            });
        };
        TeamsClient.prototype.processGetRepos = function (response) {
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        return TeamsClient;
    }(ClientBase));
    GithubApiClient.TeamsClient = TeamsClient;
    var UserClient = /** @class */ (function (_super) {
        __extends(UserClient, _super);
        function UserClient(baseUrl, http) {
            var _this = _super.call(this) || this;
            _this.jsonParseReviver = undefined;
            _this.http = http ? http : window;
            _this.baseUrl = baseUrl ? baseUrl : "https://api.github.com";
            return _this;
        }
        /**
         * @accept (optional) Is used to set specified media type.
         * @return No content.
         */
        UserClient.prototype.deleteEmails = function (body, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/user/emails";
            url_ = url_.replace(/[?&]$/, "");
            var content_ = JSON.stringify(body);
            var options_ = {
                body: content_,
                method: "DELETE",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processDeleteEmails(_response);
            });
        };
        UserClient.prototype.processDeleteEmails = function (response) {
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 204) {
                return response.text().then(function (_responseText) {
                    return;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @accept (optional) Is used to set specified media type.
         * @return OK
         */
        UserClient.prototype.getEmails = function (accept) {
            var _this = this;
            var url_ = this.baseUrl + "/user/emails";
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processGetEmails(_response);
            });
        };
        UserClient.prototype.processGetEmails = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    if (resultData200 && resultData200.constructor === Array) {
                        result200 = [];
                        for (var _i = 0, resultData200_54 = resultData200; _i < resultData200_54.length; _i++) {
                            var item = resultData200_54[_i];
                            result200.push(item);
                        }
                    }
                    return result200;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @accept (optional) Is used to set specified media type.
         */
        UserClient.prototype.postEmails = function (body, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/user/emails";
            url_ = url_.replace(/[?&]$/, "");
            var content_ = JSON.stringify(body);
            var options_ = {
                body: content_,
                method: "POST",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processPostEmails(_response);
            });
        };
        UserClient.prototype.processPostEmails = function (response) {
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @accept (optional) Is used to set specified media type.
         * @return OK
         */
        UserClient.prototype.getFollowers = function (accept) {
            var _this = this;
            var url_ = this.baseUrl + "/user/followers";
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processGetFollowers(_response);
            });
        };
        UserClient.prototype.processGetFollowers = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    if (resultData200 && resultData200.constructor === Array) {
                        result200 = [];
                        for (var _i = 0, resultData200_55 = resultData200; _i < resultData200_55.length; _i++) {
                            var item = resultData200_55[_i];
                            result200.push(Anonymous4.fromJS(item));
                        }
                    }
                    return result200;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @accept (optional) Is used to set specified media type.
         * @return OK
         */
        UserClient.prototype.getFollowingAll = function (accept) {
            var _this = this;
            var url_ = this.baseUrl + "/user/following";
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processGetFollowingAll(_response);
            });
        };
        UserClient.prototype.processGetFollowingAll = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    if (resultData200 && resultData200.constructor === Array) {
                        result200 = [];
                        for (var _i = 0, resultData200_56 = resultData200; _i < resultData200_56.length; _i++) {
                            var item = resultData200_56[_i];
                            result200.push(Anonymous4.fromJS(item));
                        }
                    }
                    return result200;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @username Name of user.
         * @accept (optional) Is used to set specified media type.
         * @return User unfollowed.
         */
        UserClient.prototype.deleteFollowing = function (username, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/user/following/{username}";
            if (username === undefined || username === null)
                throw new Error("The parameter 'username' must be defined.");
            url_ = url_.replace("{username}", encodeURIComponent("" + username));
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "DELETE",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processDeleteFollowing(_response);
            });
        };
        UserClient.prototype.processDeleteFollowing = function (response) {
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 204) {
                return response.text().then(function (_responseText) {
                    return;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @username Name of user.
         * @accept (optional) Is used to set specified media type.
         * @return Response if you are following this user.
         */
        UserClient.prototype.getFollowing = function (username, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/user/following/{username}";
            if (username === undefined || username === null)
                throw new Error("The parameter 'username' must be defined.");
            url_ = url_.replace("{username}", encodeURIComponent("" + username));
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processGetFollowing(_response);
            });
        };
        UserClient.prototype.processGetFollowing = function (response) {
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 204) {
                return response.text().then(function (_responseText) {
                    return;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 404) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @username Name of user.
         * @accept (optional) Is used to set specified media type.
         * @return You are now following the user.
         */
        UserClient.prototype.putFollowing = function (username, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/user/following/{username}";
            if (username === undefined || username === null)
                throw new Error("The parameter 'username' must be defined.");
            url_ = url_.replace("{username}", encodeURIComponent("" + username));
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "PUT",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processPutFollowing(_response);
            });
        };
        UserClient.prototype.processPutFollowing = function (response) {
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 204) {
                return response.text().then(function (_responseText) {
                    return;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @filter Issues assigned to you / created by you / mentioning you / you're
        subscribed to updates for / All issues the authenticated user can see
         * @labels String list of comma separated Label names. Example - bug,ui,@high.
         * @since (optional) Optional string of a timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.
        Only issues updated at or after this time are returned.
         * @accept (optional) Is used to set specified media type.
         * @return OK
         */
        UserClient.prototype.getIssues = function (filter, state, labels, sort, direction, since, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/user/issues?";
            if (filter === undefined || filter === null)
                throw new Error("The parameter 'filter' must be defined and cannot be null.");
            else
                url_ += "filter=" + encodeURIComponent("" + filter) + "&";
            if (state === undefined || state === null)
                throw new Error("The parameter 'state' must be defined and cannot be null.");
            else
                url_ += "state=" + encodeURIComponent("" + state) + "&";
            if (labels === undefined || labels === null)
                throw new Error("The parameter 'labels' must be defined and cannot be null.");
            else
                url_ += "labels=" + encodeURIComponent("" + labels) + "&";
            if (sort === undefined || sort === null)
                throw new Error("The parameter 'sort' must be defined and cannot be null.");
            else
                url_ += "sort=" + encodeURIComponent("" + sort) + "&";
            if (direction === undefined || direction === null)
                throw new Error("The parameter 'direction' must be defined and cannot be null.");
            else
                url_ += "direction=" + encodeURIComponent("" + direction) + "&";
            if (since !== undefined)
                url_ += "since=" + encodeURIComponent("" + since) + "&";
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processGetIssues(_response);
            });
        };
        UserClient.prototype.processGetIssues = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    if (resultData200 && resultData200.constructor === Array) {
                        result200 = [];
                        for (var _i = 0, resultData200_57 = resultData200; _i < resultData200_57.length; _i++) {
                            var item = resultData200_57[_i];
                            result200.push(Anonymous2.fromJS(item));
                        }
                    }
                    return result200;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @accept (optional) Is used to set specified media type.
         * @return OK
         */
        UserClient.prototype.getKeysAll = function (accept) {
            var _this = this;
            var url_ = this.baseUrl + "/user/keys";
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processGetKeysAll(_response);
            });
        };
        UserClient.prototype.processGetKeysAll = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    if (resultData200 && resultData200.constructor === Array) {
                        result200 = [];
                        for (var _i = 0, resultData200_58 = resultData200; _i < resultData200_58.length; _i++) {
                            var item = resultData200_58[_i];
                            result200.push(item);
                        }
                    }
                    return result200;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @accept (optional) Is used to set specified media type.
         * @return Created
         */
        UserClient.prototype.postKeys = function (body, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/user/keys";
            url_ = url_.replace(/[?&]$/, "");
            var content_ = JSON.stringify(body);
            var options_ = {
                body: content_,
                method: "POST",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processPostKeys(_response);
            });
        };
        UserClient.prototype.processPostKeys = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 201) {
                return response.text().then(function (_responseText) {
                    var result201 = null;
                    var resultData201 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    result201 = resultData201 ? UserKeysKeyId.fromJS(resultData201) : new UserKeysKeyId();
                    return result201;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @keyId ID of key.
         * @accept (optional) Is used to set specified media type.
         * @return No content.
         */
        UserClient.prototype.deleteKeys = function (keyId, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/user/keys/{keyId}";
            if (keyId === undefined || keyId === null)
                throw new Error("The parameter 'keyId' must be defined.");
            url_ = url_.replace("{keyId}", encodeURIComponent("" + keyId));
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "DELETE",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processDeleteKeys(_response);
            });
        };
        UserClient.prototype.processDeleteKeys = function (response) {
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 204) {
                return response.text().then(function (_responseText) {
                    return;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @keyId ID of key.
         * @accept (optional) Is used to set specified media type.
         * @return OK
         */
        UserClient.prototype.getKeys = function (keyId, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/user/keys/{keyId}";
            if (keyId === undefined || keyId === null)
                throw new Error("The parameter 'keyId' must be defined.");
            url_ = url_.replace("{keyId}", encodeURIComponent("" + keyId));
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processGetKeys(_response);
            });
        };
        UserClient.prototype.processGetKeys = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    result200 = resultData200 ? UserKeysKeyId.fromJS(resultData200) : new UserKeysKeyId();
                    return result200;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @accept (optional) Is used to set specified media type.
         * @return OK
         */
        UserClient.prototype.getOrgs = function (accept) {
            var _this = this;
            var url_ = this.baseUrl + "/user/orgs";
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processGetOrgs(_response);
            });
        };
        UserClient.prototype.processGetOrgs = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    if (resultData200 && resultData200.constructor === Array) {
                        result200 = [];
                        for (var _i = 0, resultData200_59 = resultData200; _i < resultData200_59.length; _i++) {
                            var item = resultData200_59[_i];
                            result200.push(item);
                        }
                    }
                    return result200;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @type (optional)
         * @accept (optional) Is used to set specified media type.
         * @return OK
         */
        UserClient.prototype.getRepos = function (type, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/user/repos?";
            if (type !== undefined)
                url_ += "type=" + encodeURIComponent("" + type) + "&";
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processGetRepos(_response);
            });
        };
        UserClient.prototype.processGetRepos = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    if (resultData200 && resultData200.constructor === Array) {
                        result200 = [];
                        for (var _i = 0, resultData200_60 = resultData200; _i < resultData200_60.length; _i++) {
                            var item = resultData200_60[_i];
                            result200.push(Anonymous6.fromJS(item));
                        }
                    }
                    return result200;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @accept (optional) Is used to set specified media type.
         * @return Created
         */
        UserClient.prototype.postRepos = function (body, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/user/repos";
            url_ = url_.replace(/[?&]$/, "");
            var content_ = JSON.stringify(body);
            var options_ = {
                body: content_,
                method: "POST",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processPostRepos(_response);
            });
        };
        UserClient.prototype.processPostRepos = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 201) {
                return response.text().then(function (_responseText) {
                    var result201 = null;
                    var resultData201 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    if (resultData201 && resultData201.constructor === Array) {
                        result201 = [];
                        for (var _i = 0, resultData201_5 = resultData201; _i < resultData201_5.length; _i++) {
                            var item = resultData201_5[_i];
                            result201.push(Anonymous6.fromJS(item));
                        }
                    }
                    return result201;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @direction (optional) Ignored without 'sort' parameter.
         * @sort (optional)
         * @accept (optional) Is used to set specified media type.
         * @return OK
         */
        UserClient.prototype.getStarredAll = function (direction, sort, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/user/starred?";
            if (direction !== undefined)
                url_ += "direction=" + encodeURIComponent("" + direction) + "&";
            if (sort !== undefined)
                url_ += "sort=" + encodeURIComponent("" + sort) + "&";
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processGetStarredAll(_response);
            });
        };
        UserClient.prototype.processGetStarredAll = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    if (resultData200 && resultData200.constructor === Array) {
                        result200 = [];
                        for (var _i = 0, resultData200_61 = resultData200; _i < resultData200_61.length; _i++) {
                            var item = resultData200_61[_i];
                            result200.push(item);
                        }
                    }
                    return result200;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @owner Name of a repository owner.
         * @repo Name of a repository.
         * @accept (optional) Is used to set specified media type.
         * @return Unstarred.
         */
        UserClient.prototype.deleteStarred = function (owner, repo, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/user/starred/{owner}/{repo}";
            if (owner === undefined || owner === null)
                throw new Error("The parameter 'owner' must be defined.");
            url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
            if (repo === undefined || repo === null)
                throw new Error("The parameter 'repo' must be defined.");
            url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "DELETE",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processDeleteStarred(_response);
            });
        };
        UserClient.prototype.processDeleteStarred = function (response) {
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 204) {
                return response.text().then(function (_responseText) {
                    return;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @owner Name of a repository owner.
         * @repo Name of a repository.
         * @accept (optional) Is used to set specified media type.
         * @return This repository is starred by you.
         */
        UserClient.prototype.getStarred = function (owner, repo, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/user/starred/{owner}/{repo}";
            if (owner === undefined || owner === null)
                throw new Error("The parameter 'owner' must be defined.");
            url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
            if (repo === undefined || repo === null)
                throw new Error("The parameter 'repo' must be defined.");
            url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processGetStarred(_response);
            });
        };
        UserClient.prototype.processGetStarred = function (response) {
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 204) {
                return response.text().then(function (_responseText) {
                    return;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 404) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @owner Name of a repository owner.
         * @repo Name of a repository.
         * @accept (optional) Is used to set specified media type.
         * @return Repository starred.
         */
        UserClient.prototype.putStarred = function (owner, repo, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/user/starred/{owner}/{repo}";
            if (owner === undefined || owner === null)
                throw new Error("The parameter 'owner' must be defined.");
            url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
            if (repo === undefined || repo === null)
                throw new Error("The parameter 'repo' must be defined.");
            url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "PUT",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processPutStarred(_response);
            });
        };
        UserClient.prototype.processPutStarred = function (response) {
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 204) {
                return response.text().then(function (_responseText) {
                    return;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @accept (optional) Is used to set specified media type.
         * @return OK
         */
        UserClient.prototype.getSubscriptionsAll = function (accept) {
            var _this = this;
            var url_ = this.baseUrl + "/user/subscriptions";
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processGetSubscriptionsAll(_response);
            });
        };
        UserClient.prototype.processGetSubscriptionsAll = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    if (resultData200 && resultData200.constructor === Array) {
                        result200 = [];
                        for (var _i = 0, resultData200_62 = resultData200; _i < resultData200_62.length; _i++) {
                            var item = resultData200_62[_i];
                            result200.push(Anonymous29.fromJS(item));
                        }
                    }
                    return result200;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @owner Name of the owner.
         * @repo Name of repository.
         * @accept (optional) Is used to set specified media type.
         * @return Unwatched.
         */
        UserClient.prototype.deleteSubscriptions = function (owner, repo, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/user/subscriptions/{owner}/{repo}";
            if (owner === undefined || owner === null)
                throw new Error("The parameter 'owner' must be defined.");
            url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
            if (repo === undefined || repo === null)
                throw new Error("The parameter 'repo' must be defined.");
            url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "DELETE",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processDeleteSubscriptions(_response);
            });
        };
        UserClient.prototype.processDeleteSubscriptions = function (response) {
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 204) {
                return response.text().then(function (_responseText) {
                    return;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @owner Name of the owner.
         * @repo Name of repository.
         * @accept (optional) Is used to set specified media type.
         * @return Repository is watched by you.
         */
        UserClient.prototype.getSubscriptions = function (owner, repo, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/user/subscriptions/{owner}/{repo}";
            if (owner === undefined || owner === null)
                throw new Error("The parameter 'owner' must be defined.");
            url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
            if (repo === undefined || repo === null)
                throw new Error("The parameter 'repo' must be defined.");
            url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processGetSubscriptions(_response);
            });
        };
        UserClient.prototype.processGetSubscriptions = function (response) {
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 204) {
                return response.text().then(function (_responseText) {
                    return;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 404) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @owner Name of the owner.
         * @repo Name of repository.
         * @accept (optional) Is used to set specified media type.
         * @return Repository is watched.
         */
        UserClient.prototype.putSubscriptions = function (owner, repo, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/user/subscriptions/{owner}/{repo}";
            if (owner === undefined || owner === null)
                throw new Error("The parameter 'owner' must be defined.");
            url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
            if (repo === undefined || repo === null)
                throw new Error("The parameter 'repo' must be defined.");
            url_ = url_.replace("{repo}", encodeURIComponent("" + repo));
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "PUT",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processPutSubscriptions(_response);
            });
        };
        UserClient.prototype.processPutSubscriptions = function (response) {
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 204) {
                return response.text().then(function (_responseText) {
                    return;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @accept (optional) Is used to set specified media type.
         * @return OK
         */
        UserClient.prototype.getTeams = function (accept) {
            var _this = this;
            var url_ = this.baseUrl + "/user/teams";
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processGetTeams(_response);
            });
        };
        UserClient.prototype.processGetTeams = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    if (resultData200 && resultData200.constructor === Array) {
                        result200 = [];
                        for (var _i = 0, resultData200_63 = resultData200; _i < resultData200_63.length; _i++) {
                            var item = resultData200_63[_i];
                            result200.push(Anonymous30.fromJS(item));
                        }
                    }
                    return result200;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        return UserClient;
    }(ClientBase));
    GithubApiClient.UserClient = UserClient;
    var UsersClient = /** @class */ (function (_super) {
        __extends(UsersClient, _super);
        function UsersClient(baseUrl, http) {
            var _this = _super.call(this) || this;
            _this.jsonParseReviver = undefined;
            _this.http = http ? http : window;
            _this.baseUrl = baseUrl ? baseUrl : "https://api.github.com";
            return _this;
        }
        /**
         * @username Name of user.
         * @accept (optional) Is used to set specified media type.
         */
        UsersClient.prototype.getEvents = function (username, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/users/{username}/events";
            if (username === undefined || username === null)
                throw new Error("The parameter 'username' must be defined.");
            url_ = url_.replace("{username}", encodeURIComponent("" + username));
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processGetEvents(_response);
            });
        };
        UsersClient.prototype.processGetEvents = function (response) {
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @username Name of user.
         * @accept (optional) Is used to set specified media type.
         */
        UsersClient.prototype.eventsGetOrgs = function (username, org, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/users/{username}/events/orgs/{org}";
            if (username === undefined || username === null)
                throw new Error("The parameter 'username' must be defined.");
            url_ = url_.replace("{username}", encodeURIComponent("" + username));
            if (org === undefined || org === null)
                throw new Error("The parameter 'org' must be defined.");
            url_ = url_.replace("{org}", encodeURIComponent("" + org));
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processEventsGetOrgs(_response);
            });
        };
        UsersClient.prototype.processEventsGetOrgs = function (response) {
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @username Name of user.
         * @accept (optional) Is used to set specified media type.
         * @return OK
         */
        UsersClient.prototype.getFollowers = function (username, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/users/{username}/followers";
            if (username === undefined || username === null)
                throw new Error("The parameter 'username' must be defined.");
            url_ = url_.replace("{username}", encodeURIComponent("" + username));
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processGetFollowers(_response);
            });
        };
        UsersClient.prototype.processGetFollowers = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    if (resultData200 && resultData200.constructor === Array) {
                        result200 = [];
                        for (var _i = 0, resultData200_64 = resultData200; _i < resultData200_64.length; _i++) {
                            var item = resultData200_64[_i];
                            result200.push(Anonymous4.fromJS(item));
                        }
                    }
                    return result200;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @username Name of user.
         * @targetUser Name of user.
         * @accept (optional) Is used to set specified media type.
         * @return Response if user follows target user.
         */
        UsersClient.prototype.getFollowing = function (username, targetUser, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/users/{username}/following/{targetUser}";
            if (username === undefined || username === null)
                throw new Error("The parameter 'username' must be defined.");
            url_ = url_.replace("{username}", encodeURIComponent("" + username));
            if (targetUser === undefined || targetUser === null)
                throw new Error("The parameter 'targetUser' must be defined.");
            url_ = url_.replace("{targetUser}", encodeURIComponent("" + targetUser));
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processGetFollowing(_response);
            });
        };
        UsersClient.prototype.processGetFollowing = function (response) {
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 204) {
                return response.text().then(function (_responseText) {
                    return;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 404) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @username Name of user.
         * @since (optional) The time should be passed in as UTC in the ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.
        Example: "2012-10-09T23:39:01Z".
         * @accept (optional) Is used to set specified media type.
         * @return OK
         */
        UsersClient.prototype.getGists = function (username, since, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/users/{username}/gists?";
            if (username === undefined || username === null)
                throw new Error("The parameter 'username' must be defined.");
            url_ = url_.replace("{username}", encodeURIComponent("" + username));
            if (since !== undefined)
                url_ += "since=" + encodeURIComponent("" + since) + "&";
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processGetGists(_response);
            });
        };
        UsersClient.prototype.processGetGists = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    if (resultData200 && resultData200.constructor === Array) {
                        result200 = [];
                        for (var _i = 0, resultData200_65 = resultData200; _i < resultData200_65.length; _i++) {
                            var item = resultData200_65[_i];
                            result200.push(Anonymous.fromJS(item));
                        }
                    }
                    return result200;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @username Name of user.
         * @accept (optional) Is used to set specified media type.
         * @return OK
         */
        UsersClient.prototype.getKeys = function (username, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/users/{username}/keys";
            if (username === undefined || username === null)
                throw new Error("The parameter 'username' must be defined.");
            url_ = url_.replace("{username}", encodeURIComponent("" + username));
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processGetKeys(_response);
            });
        };
        UsersClient.prototype.processGetKeys = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    if (resultData200 && resultData200.constructor === Array) {
                        result200 = [];
                        for (var _i = 0, resultData200_66 = resultData200; _i < resultData200_66.length; _i++) {
                            var item = resultData200_66[_i];
                            result200.push(item);
                        }
                    }
                    return result200;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @username Name of user.
         * @accept (optional) Is used to set specified media type.
         * @return OK
         */
        UsersClient.prototype.getOrgs = function (username, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/users/{username}/orgs";
            if (username === undefined || username === null)
                throw new Error("The parameter 'username' must be defined.");
            url_ = url_.replace("{username}", encodeURIComponent("" + username));
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processGetOrgs(_response);
            });
        };
        UsersClient.prototype.processGetOrgs = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    if (resultData200 && resultData200.constructor === Array) {
                        result200 = [];
                        for (var _i = 0, resultData200_67 = resultData200; _i < resultData200_67.length; _i++) {
                            var item = resultData200_67[_i];
                            result200.push(item);
                        }
                    }
                    return result200;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @username Name of user.
         * @accept (optional) Is used to set specified media type.
         */
        UsersClient.prototype.getReceivedEvents = function (username, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/users/{username}/received_events";
            if (username === undefined || username === null)
                throw new Error("The parameter 'username' must be defined.");
            url_ = url_.replace("{username}", encodeURIComponent("" + username));
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processGetReceivedEvents(_response);
            });
        };
        UsersClient.prototype.processGetReceivedEvents = function (response) {
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @username Name of user.
         * @accept (optional) Is used to set specified media type.
         */
        UsersClient.prototype.receivedEventsGetPublic = function (username, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/users/{username}/received_events/public";
            if (username === undefined || username === null)
                throw new Error("The parameter 'username' must be defined.");
            url_ = url_.replace("{username}", encodeURIComponent("" + username));
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processReceivedEventsGetPublic(_response);
            });
        };
        UsersClient.prototype.processReceivedEventsGetPublic = function (response) {
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @username Name of user.
         * @type (optional)
         * @accept (optional) Is used to set specified media type.
         * @return OK
         */
        UsersClient.prototype.getRepos = function (username, type, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/users/{username}/repos?";
            if (username === undefined || username === null)
                throw new Error("The parameter 'username' must be defined.");
            url_ = url_.replace("{username}", encodeURIComponent("" + username));
            if (type !== undefined)
                url_ += "type=" + encodeURIComponent("" + type) + "&";
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processGetRepos(_response);
            });
        };
        UsersClient.prototype.processGetRepos = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    if (resultData200 && resultData200.constructor === Array) {
                        result200 = [];
                        for (var _i = 0, resultData200_68 = resultData200; _i < resultData200_68.length; _i++) {
                            var item = resultData200_68[_i];
                            result200.push(Anonymous6.fromJS(item));
                        }
                    }
                    return result200;
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @username Name of user.
         * @accept (optional) Is used to set specified media type.
         */
        UsersClient.prototype.getStarred = function (username, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/users/{username}/starred";
            if (username === undefined || username === null)
                throw new Error("The parameter 'username' must be defined.");
            url_ = url_.replace("{username}", encodeURIComponent("" + username));
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processGetStarred(_response);
            });
        };
        UsersClient.prototype.processGetStarred = function (response) {
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * @username Name of user.
         * @accept (optional) Is used to set specified media type.
         */
        UsersClient.prototype.getSubscriptions = function (username, accept) {
            var _this = this;
            var url_ = this.baseUrl + "/users/{username}/subscriptions";
            if (username === undefined || username === null)
                throw new Error("The parameter 'username' must be defined.");
            url_ = url_.replace("{username}", encodeURIComponent("" + username));
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: new Headers({
                    "Accept": accept !== undefined && accept !== null ? "" + accept : "",
                    "Content-Type": "application/json",
                })
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processGetSubscriptions(_response);
            });
        };
        UsersClient.prototype.processGetSubscriptions = function (response) {
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 403) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        return UsersClient;
    }(ClientBase));
    GithubApiClient.UsersClient = UsersClient;
    var Asset = /** @class */ (function () {
        function Asset(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Asset.prototype.init = function (data) {
            if (data) {
                this.content_type = data["content_type"] !== undefined ? data["content_type"] : null;
                this.created_at = data["created_at"] !== undefined ? data["created_at"] : null;
                this.download_count = data["download_count"] !== undefined ? data["download_count"] : null;
                this.id = data["id"] !== undefined ? data["id"] : null;
                this.label = data["label"] !== undefined ? data["label"] : null;
                this.name = data["name"] !== undefined ? data["name"] : null;
                this.size = data["size"] !== undefined ? data["size"] : null;
                this.state = data["state"] !== undefined ? data["state"] : null;
                this.updated_at = data["updated_at"] !== undefined ? data["updated_at"] : null;
                this.uploader = data["uploader"] ? Uploader.fromJS(data["uploader"]) : null;
                this.url = data["url"] !== undefined ? data["url"] : null;
            }
        };
        Asset.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Asset();
            result.init(data);
            return result;
        };
        Asset.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["content_type"] = this.content_type !== undefined ? this.content_type : null;
            data["created_at"] = this.created_at !== undefined ? this.created_at : null;
            data["download_count"] = this.download_count !== undefined ? this.download_count : null;
            data["id"] = this.id !== undefined ? this.id : null;
            data["label"] = this.label !== undefined ? this.label : null;
            data["name"] = this.name !== undefined ? this.name : null;
            data["size"] = this.size !== undefined ? this.size : null;
            data["state"] = this.state !== undefined ? this.state : null;
            data["updated_at"] = this.updated_at !== undefined ? this.updated_at : null;
            data["uploader"] = this.uploader ? this.uploader.toJSON() : null;
            data["url"] = this.url !== undefined ? this.url : null;
            return data;
        };
        return Asset;
    }());
    GithubApiClient.Asset = Asset;
    var AssetPatch = /** @class */ (function () {
        function AssetPatch(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        AssetPatch.prototype.init = function (data) {
            if (data) {
                this.label = data["label"] !== undefined ? data["label"] : null;
                this.name = data["name"] !== undefined ? data["name"] : null;
            }
        };
        AssetPatch.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new AssetPatch();
            result.init(data);
            return result;
        };
        AssetPatch.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["label"] = this.label !== undefined ? this.label : null;
            data["name"] = this.name !== undefined ? this.name : null;
            return data;
        };
        return AssetPatch;
    }());
    GithubApiClient.AssetPatch = AssetPatch;
    var Blob = /** @class */ (function () {
        function Blob(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Blob.prototype.init = function (data) {
            if (data) {
                this.content = data["content"] !== undefined ? data["content"] : null;
                this.encoding = data["encoding"] !== undefined ? data["encoding"] : null;
                this.sha = data["sha"] !== undefined ? data["sha"] : null;
                this.size = data["size"] !== undefined ? data["size"] : null;
            }
        };
        Blob.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Blob();
            result.init(data);
            return result;
        };
        Blob.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["content"] = this.content !== undefined ? this.content : null;
            data["encoding"] = this.encoding !== undefined ? this.encoding : null;
            data["sha"] = this.sha !== undefined ? this.sha : null;
            data["size"] = this.size !== undefined ? this.size : null;
            return data;
        };
        return Blob;
    }());
    GithubApiClient.Blob = Blob;
    var Blobs = /** @class */ (function () {
        function Blobs(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Blobs.prototype.init = function (data) {
            if (data) {
                this.sha = data["sha"] !== undefined ? data["sha"] : null;
            }
        };
        Blobs.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Blobs();
            result.init(data);
            return result;
        };
        Blobs.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["sha"] = this.sha !== undefined ? this.sha : null;
            return data;
        };
        return Blobs;
    }());
    GithubApiClient.Blobs = Blobs;
    var Branch = /** @class */ (function () {
        function Branch(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Branch.prototype.init = function (data) {
            if (data) {
                this._links = data["_links"] ? _links.fromJS(data["_links"]) : null;
                this.commit = data["commit"] ? Commit2.fromJS(data["commit"]) : null;
                this.name = data["name"] !== undefined ? data["name"] : null;
            }
        };
        Branch.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Branch();
            result.init(data);
            return result;
        };
        Branch.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["_links"] = this._links ? this._links.toJSON() : null;
            data["commit"] = this.commit ? this.commit.toJSON() : null;
            data["name"] = this.name !== undefined ? this.name : null;
            return data;
        };
        return Branch;
    }());
    GithubApiClient.Branch = Branch;
    var Comment = /** @class */ (function () {
        function Comment(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Comment.prototype.init = function (data) {
            if (data) {
                this.body = data["body"] !== undefined ? data["body"] : null;
            }
        };
        Comment.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Comment();
            result.init(data);
            return result;
        };
        Comment.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["body"] = this.body !== undefined ? this.body : null;
            return data;
        };
        return Comment;
    }());
    GithubApiClient.Comment = Comment;
    var CommentBody = /** @class */ (function () {
        function CommentBody(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        CommentBody.prototype.init = function (data) {
            if (data) {
                this.body = data["body"] !== undefined ? data["body"] : null;
            }
        };
        CommentBody.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new CommentBody();
            result.init(data);
            return result;
        };
        CommentBody.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["body"] = this.body !== undefined ? this.body : null;
            return data;
        };
        return CommentBody;
    }());
    GithubApiClient.CommentBody = CommentBody;
    var Commit = /** @class */ (function () {
        function Commit(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Commit.prototype.init = function (data) {
            if (data) {
                this.author = data["author"] ? Author.fromJS(data["author"]) : null;
                this.commit = data["commit"] ? Commit3.fromJS(data["commit"]) : null;
                this.committer = data["committer"] ? Committer.fromJS(data["committer"]) : null;
                if (data["files"] && data["files"].constructor === Array) {
                    this.files = [];
                    for (var _i = 0, _a = data["files"]; _i < _a.length; _i++) {
                        var item = _a[_i];
                        this.files.push(Files.fromJS(item));
                    }
                }
                if (data["parents"] && data["parents"].constructor === Array) {
                    this.parents = [];
                    for (var _b = 0, _c = data["parents"]; _b < _c.length; _b++) {
                        var item = _c[_b];
                        this.parents.push(Parents.fromJS(item));
                    }
                }
                this.sha = data["sha"] !== undefined ? data["sha"] : null;
                this.stats = data["stats"] ? Stats.fromJS(data["stats"]) : null;
                this.url = data["url"] !== undefined ? data["url"] : null;
            }
        };
        Commit.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Commit();
            result.init(data);
            return result;
        };
        Commit.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["author"] = this.author ? this.author.toJSON() : null;
            data["commit"] = this.commit ? this.commit.toJSON() : null;
            data["committer"] = this.committer ? this.committer.toJSON() : null;
            if (this.files && this.files.constructor === Array) {
                data["files"] = [];
                for (var _i = 0, _a = this.files; _i < _a.length; _i++) {
                    var item = _a[_i];
                    data["files"].push(item.toJSON());
                }
            }
            if (this.parents && this.parents.constructor === Array) {
                data["parents"] = [];
                for (var _b = 0, _c = this.parents; _b < _c.length; _b++) {
                    var item = _c[_b];
                    data["parents"].push(item.toJSON());
                }
            }
            data["sha"] = this.sha !== undefined ? this.sha : null;
            data["stats"] = this.stats ? this.stats.toJSON() : null;
            data["url"] = this.url !== undefined ? this.url : null;
            return data;
        };
        return Commit;
    }());
    GithubApiClient.Commit = Commit;
    var CommitBody = /** @class */ (function () {
        function CommitBody(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        CommitBody.prototype.init = function (data) {
            if (data) {
                this.body = data["body"] !== undefined ? data["body"] : null;
                this.line = data["line"] !== undefined ? data["line"] : null;
                this.number = data["number"] !== undefined ? data["number"] : null;
                this.path = data["path"] !== undefined ? data["path"] : null;
                this.position = data["position"] !== undefined ? data["position"] : null;
                this.sha = data["sha"] !== undefined ? data["sha"] : null;
            }
        };
        CommitBody.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new CommitBody();
            result.init(data);
            return result;
        };
        CommitBody.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["body"] = this.body !== undefined ? this.body : null;
            data["line"] = this.line !== undefined ? this.line : null;
            data["number"] = this.number !== undefined ? this.number : null;
            data["path"] = this.path !== undefined ? this.path : null;
            data["position"] = this.position !== undefined ? this.position : null;
            data["sha"] = this.sha !== undefined ? this.sha : null;
            return data;
        };
        return CommitBody;
    }());
    GithubApiClient.CommitBody = CommitBody;
    var CommitComments = /** @class */ (function () {
        function CommitComments(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        CommitComments.prototype.init = function (data) {
            if (data) {
                this.body = data["body"] !== undefined ? data["body"] : null;
                this.commit_id = data["commit_id"] !== undefined ? data["commit_id"] : null;
                this.created_at = data["created_at"] !== undefined ? data["created_at"] : null;
                this.html_url = data["html_url"] !== undefined ? data["html_url"] : null;
                this.id = data["id"] !== undefined ? data["id"] : null;
                this.line = data["line"] !== undefined ? data["line"] : null;
                this.path = data["path"] !== undefined ? data["path"] : null;
                this.position = data["position"] !== undefined ? data["position"] : null;
                this.updated_at = data["updated_at"] !== undefined ? data["updated_at"] : null;
                this.url = data["url"] !== undefined ? data["url"] : null;
                this.user = data["user"] ? User2.fromJS(data["user"]) : null;
            }
        };
        CommitComments.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new CommitComments();
            result.init(data);
            return result;
        };
        CommitComments.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["body"] = this.body !== undefined ? this.body : null;
            data["commit_id"] = this.commit_id !== undefined ? this.commit_id : null;
            data["created_at"] = this.created_at !== undefined ? this.created_at : null;
            data["html_url"] = this.html_url !== undefined ? this.html_url : null;
            data["id"] = this.id !== undefined ? this.id : null;
            data["line"] = this.line !== undefined ? this.line : null;
            data["path"] = this.path !== undefined ? this.path : null;
            data["position"] = this.position !== undefined ? this.position : null;
            data["updated_at"] = this.updated_at !== undefined ? this.updated_at : null;
            data["url"] = this.url !== undefined ? this.url : null;
            data["user"] = this.user ? this.user.toJSON() : null;
            return data;
        };
        return CommitComments;
    }());
    GithubApiClient.CommitComments = CommitComments;
    var CompareCommits = /** @class */ (function () {
        function CompareCommits(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        CompareCommits.prototype.init = function (data) {
            if (data) {
                this.ahead_by = data["ahead_by"] !== undefined ? data["ahead_by"] : null;
                this.base_commit = data["base_commit"] ? Base_commit.fromJS(data["base_commit"]) : null;
                this.behind_by = data["behind_by"] !== undefined ? data["behind_by"] : null;
                if (data["commits"] && data["commits"].constructor === Array) {
                    this.commits = [];
                    for (var _i = 0, _a = data["commits"]; _i < _a.length; _i++) {
                        var item = _a[_i];
                        this.commits.push(Commits.fromJS(item));
                    }
                }
                this.diff_url = data["diff_url"] !== undefined ? data["diff_url"] : null;
                if (data["files"] && data["files"].constructor === Array) {
                    this.files = [];
                    for (var _b = 0, _c = data["files"]; _b < _c.length; _b++) {
                        var item = _c[_b];
                        this.files.push(Files2.fromJS(item));
                    }
                }
                this.html_url = data["html_url"] !== undefined ? data["html_url"] : null;
                this.patch_url = data["patch_url"] !== undefined ? data["patch_url"] : null;
                this.permalink_url = data["permalink_url"] !== undefined ? data["permalink_url"] : null;
                this.status = data["status"] !== undefined ? data["status"] : null;
                this.total_commits = data["total_commits"] !== undefined ? data["total_commits"] : null;
                this.url = data["url"] !== undefined ? data["url"] : null;
            }
        };
        CompareCommits.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new CompareCommits();
            result.init(data);
            return result;
        };
        CompareCommits.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["ahead_by"] = this.ahead_by !== undefined ? this.ahead_by : null;
            data["base_commit"] = this.base_commit ? this.base_commit.toJSON() : null;
            data["behind_by"] = this.behind_by !== undefined ? this.behind_by : null;
            if (this.commits && this.commits.constructor === Array) {
                data["commits"] = [];
                for (var _i = 0, _a = this.commits; _i < _a.length; _i++) {
                    var item = _a[_i];
                    data["commits"].push(item.toJSON());
                }
            }
            data["diff_url"] = this.diff_url !== undefined ? this.diff_url : null;
            if (this.files && this.files.constructor === Array) {
                data["files"] = [];
                for (var _b = 0, _c = this.files; _b < _c.length; _b++) {
                    var item = _c[_b];
                    data["files"].push(item.toJSON());
                }
            }
            data["html_url"] = this.html_url !== undefined ? this.html_url : null;
            data["patch_url"] = this.patch_url !== undefined ? this.patch_url : null;
            data["permalink_url"] = this.permalink_url !== undefined ? this.permalink_url : null;
            data["status"] = this.status !== undefined ? this.status : null;
            data["total_commits"] = this.total_commits !== undefined ? this.total_commits : null;
            data["url"] = this.url !== undefined ? this.url : null;
            return data;
        };
        return CompareCommits;
    }());
    GithubApiClient.CompareCommits = CompareCommits;
    var ContentsPath = /** @class */ (function () {
        function ContentsPath(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        ContentsPath.prototype.init = function (data) {
            if (data) {
                this._links = data["_links"] ? _links2.fromJS(data["_links"]) : null;
                this.content = data["content"] !== undefined ? data["content"] : null;
                this.encoding = data["encoding"] !== undefined ? data["encoding"] : null;
                this.git_url = data["git_url"] !== undefined ? data["git_url"] : null;
                this.html_url = data["html_url"] !== undefined ? data["html_url"] : null;
                this.name = data["name"] !== undefined ? data["name"] : null;
                this.path = data["path"] !== undefined ? data["path"] : null;
                this.sha = data["sha"] !== undefined ? data["sha"] : null;
                this.size = data["size"] !== undefined ? data["size"] : null;
                this.type = data["type"] !== undefined ? data["type"] : null;
                this.url = data["url"] !== undefined ? data["url"] : null;
            }
        };
        ContentsPath.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new ContentsPath();
            result.init(data);
            return result;
        };
        ContentsPath.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["_links"] = this._links ? this._links.toJSON() : null;
            data["content"] = this.content !== undefined ? this.content : null;
            data["encoding"] = this.encoding !== undefined ? this.encoding : null;
            data["git_url"] = this.git_url !== undefined ? this.git_url : null;
            data["html_url"] = this.html_url !== undefined ? this.html_url : null;
            data["name"] = this.name !== undefined ? this.name : null;
            data["path"] = this.path !== undefined ? this.path : null;
            data["sha"] = this.sha !== undefined ? this.sha : null;
            data["size"] = this.size !== undefined ? this.size : null;
            data["type"] = this.type !== undefined ? this.type : null;
            data["url"] = this.url !== undefined ? this.url : null;
            return data;
        };
        return ContentsPath;
    }());
    GithubApiClient.ContentsPath = ContentsPath;
    var CreateDownload = /** @class */ (function () {
        function CreateDownload(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        CreateDownload.prototype.init = function (data) {
            if (data) {
                this.accesskeyid = data["accesskeyid"] !== undefined ? data["accesskeyid"] : null;
                this.acl = data["acl"] !== undefined ? data["acl"] : null;
                this.bucket = data["bucket"] !== undefined ? data["bucket"] : null;
                this.content_type = data["content_type"] !== undefined ? data["content_type"] : null;
                this.description = data["description"] !== undefined ? data["description"] : null;
                this.download_count = data["download_count"] !== undefined ? data["download_count"] : null;
                this.expirationdate = data["expirationdate"] !== undefined ? data["expirationdate"] : null;
                this.html_url = data["html_url"] !== undefined ? data["html_url"] : null;
                this.id = data["id"] !== undefined ? data["id"] : null;
                this.mime_type = data["mime_type"] !== undefined ? data["mime_type"] : null;
                this.name = data["name"] !== undefined ? data["name"] : null;
                this.path = data["path"] !== undefined ? data["path"] : null;
                this.policy = data["policy"] !== undefined ? data["policy"] : null;
                this.prefix = data["prefix"] !== undefined ? data["prefix"] : null;
                this.redirect = data["redirect"] !== undefined ? data["redirect"] : null;
                this.s3_url = data["s3_url"] !== undefined ? data["s3_url"] : null;
                this.signature = data["signature"] !== undefined ? data["signature"] : null;
                this.size = data["size"] !== undefined ? data["size"] : null;
                this.url = data["url"] !== undefined ? data["url"] : null;
            }
        };
        CreateDownload.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new CreateDownload();
            result.init(data);
            return result;
        };
        CreateDownload.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["accesskeyid"] = this.accesskeyid !== undefined ? this.accesskeyid : null;
            data["acl"] = this.acl !== undefined ? this.acl : null;
            data["bucket"] = this.bucket !== undefined ? this.bucket : null;
            data["content_type"] = this.content_type !== undefined ? this.content_type : null;
            data["description"] = this.description !== undefined ? this.description : null;
            data["download_count"] = this.download_count !== undefined ? this.download_count : null;
            data["expirationdate"] = this.expirationdate !== undefined ? this.expirationdate : null;
            data["html_url"] = this.html_url !== undefined ? this.html_url : null;
            data["id"] = this.id !== undefined ? this.id : null;
            data["mime_type"] = this.mime_type !== undefined ? this.mime_type : null;
            data["name"] = this.name !== undefined ? this.name : null;
            data["path"] = this.path !== undefined ? this.path : null;
            data["policy"] = this.policy !== undefined ? this.policy : null;
            data["prefix"] = this.prefix !== undefined ? this.prefix : null;
            data["redirect"] = this.redirect !== undefined ? this.redirect : null;
            data["s3_url"] = this.s3_url !== undefined ? this.s3_url : null;
            data["signature"] = this.signature !== undefined ? this.signature : null;
            data["size"] = this.size !== undefined ? this.size : null;
            data["url"] = this.url !== undefined ? this.url : null;
            return data;
        };
        return CreateDownload;
    }());
    GithubApiClient.CreateDownload = CreateDownload;
    var CreateFile = /** @class */ (function () {
        function CreateFile(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        CreateFile.prototype.init = function (data) {
            if (data) {
                this.commit = data["commit"] ? Commit4.fromJS(data["commit"]) : null;
                this.content = data["content"] ? Content.fromJS(data["content"]) : null;
            }
        };
        CreateFile.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new CreateFile();
            result.init(data);
            return result;
        };
        CreateFile.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["commit"] = this.commit ? this.commit.toJSON() : null;
            data["content"] = this.content ? this.content.toJSON() : null;
            return data;
        };
        return CreateFile;
    }());
    GithubApiClient.CreateFile = CreateFile;
    var CreateFileBody = /** @class */ (function () {
        function CreateFileBody(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        CreateFileBody.prototype.init = function (data) {
            if (data) {
                this.committer = data["committer"] ? Committer2.fromJS(data["committer"]) : null;
                this.content = data["content"] !== undefined ? data["content"] : null;
                this.message = data["message"] !== undefined ? data["message"] : null;
            }
        };
        CreateFileBody.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new CreateFileBody();
            result.init(data);
            return result;
        };
        CreateFileBody.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["committer"] = this.committer ? this.committer.toJSON() : null;
            data["content"] = this.content !== undefined ? this.content : null;
            data["message"] = this.message !== undefined ? this.message : null;
            return data;
        };
        return CreateFileBody;
    }());
    GithubApiClient.CreateFileBody = CreateFileBody;
    var DeleteFile = /** @class */ (function () {
        function DeleteFile(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        DeleteFile.prototype.init = function (data) {
            if (data) {
                this.commit = data["commit"] ? Commit5.fromJS(data["commit"]) : null;
                this.content = data["content"] !== undefined ? data["content"] : null;
            }
        };
        DeleteFile.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new DeleteFile();
            result.init(data);
            return result;
        };
        DeleteFile.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["commit"] = this.commit ? this.commit.toJSON() : null;
            data["content"] = this.content !== undefined ? this.content : null;
            return data;
        };
        return DeleteFile;
    }());
    GithubApiClient.DeleteFile = DeleteFile;
    var DeleteFileBody = /** @class */ (function () {
        function DeleteFileBody(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        DeleteFileBody.prototype.init = function (data) {
            if (data) {
                this.committer = data["committer"] ? Committer3.fromJS(data["committer"]) : null;
                this.message = data["message"] !== undefined ? data["message"] : null;
                this.sha = data["sha"] !== undefined ? data["sha"] : null;
            }
        };
        DeleteFileBody.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new DeleteFileBody();
            result.init(data);
            return result;
        };
        DeleteFileBody.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["committer"] = this.committer ? this.committer.toJSON() : null;
            data["message"] = this.message !== undefined ? this.message : null;
            data["sha"] = this.sha !== undefined ? this.sha : null;
            return data;
        };
        return DeleteFileBody;
    }());
    GithubApiClient.DeleteFileBody = DeleteFileBody;
    var Deployment = /** @class */ (function () {
        function Deployment(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Deployment.prototype.init = function (data) {
            if (data) {
                this.description = data["description"] !== undefined ? data["description"] : null;
                this.payload = data["payload"] ? Payload.fromJS(data["payload"]) : null;
                this.ref = data["ref"] !== undefined ? data["ref"] : null;
            }
        };
        Deployment.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Deployment();
            result.init(data);
            return result;
        };
        Deployment.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["description"] = this.description !== undefined ? this.description : null;
            data["payload"] = this.payload ? this.payload.toJSON() : null;
            data["ref"] = this.ref !== undefined ? this.ref : null;
            return data;
        };
        return Deployment;
    }());
    GithubApiClient.Deployment = Deployment;
    var DeploymentResp = /** @class */ (function () {
        function DeploymentResp(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        DeploymentResp.prototype.init = function (data) {
            if (data) {
                this.created_at = data["created_at"] !== undefined ? data["created_at"] : null;
                this.creator = data["creator"] ? Creator.fromJS(data["creator"]) : null;
                this.description = data["description"] !== undefined ? data["description"] : null;
                this.id = data["id"] !== undefined ? data["id"] : null;
                this.payload = data["payload"] !== undefined ? data["payload"] : null;
                this.sha = data["sha"] !== undefined ? data["sha"] : null;
                this.statuses_url = data["statuses_url"] !== undefined ? data["statuses_url"] : null;
                this.updated_at = data["updated_at"] !== undefined ? data["updated_at"] : null;
                this.url = data["url"] !== undefined ? data["url"] : null;
            }
        };
        DeploymentResp.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new DeploymentResp();
            result.init(data);
            return result;
        };
        DeploymentResp.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["created_at"] = this.created_at !== undefined ? this.created_at : null;
            data["creator"] = this.creator ? this.creator.toJSON() : null;
            data["description"] = this.description !== undefined ? this.description : null;
            data["id"] = this.id !== undefined ? this.id : null;
            data["payload"] = this.payload !== undefined ? this.payload : null;
            data["sha"] = this.sha !== undefined ? this.sha : null;
            data["statuses_url"] = this.statuses_url !== undefined ? this.statuses_url : null;
            data["updated_at"] = this.updated_at !== undefined ? this.updated_at : null;
            data["url"] = this.url !== undefined ? this.url : null;
            return data;
        };
        return DeploymentResp;
    }());
    GithubApiClient.DeploymentResp = DeploymentResp;
    var DeploymentStatusesCreate = /** @class */ (function () {
        function DeploymentStatusesCreate(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        DeploymentStatusesCreate.prototype.init = function (data) {
            if (data) {
                this.description = data["description"] !== undefined ? data["description"] : null;
                this.state = data["state"] !== undefined ? data["state"] : null;
                this.target_url = data["target_url"] !== undefined ? data["target_url"] : null;
            }
        };
        DeploymentStatusesCreate.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new DeploymentStatusesCreate();
            result.init(data);
            return result;
        };
        DeploymentStatusesCreate.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["description"] = this.description !== undefined ? this.description : null;
            data["state"] = this.state !== undefined ? this.state : null;
            data["target_url"] = this.target_url !== undefined ? this.target_url : null;
            return data;
        };
        return DeploymentStatusesCreate;
    }());
    GithubApiClient.DeploymentStatusesCreate = DeploymentStatusesCreate;
    var DownloadBody = /** @class */ (function () {
        function DownloadBody(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        DownloadBody.prototype.init = function (data) {
            if (data) {
                this.content_type = data["content_type"] !== undefined ? data["content_type"] : null;
                this.description = data["description"] !== undefined ? data["description"] : null;
                this.name = data["name"] !== undefined ? data["name"] : null;
                this.size = data["size"] !== undefined ? data["size"] : null;
            }
        };
        DownloadBody.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new DownloadBody();
            result.init(data);
            return result;
        };
        DownloadBody.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["content_type"] = this.content_type !== undefined ? this.content_type : null;
            data["description"] = this.description !== undefined ? this.description : null;
            data["name"] = this.name !== undefined ? this.name : null;
            data["size"] = this.size !== undefined ? this.size : null;
            return data;
        };
        return DownloadBody;
    }());
    GithubApiClient.DownloadBody = DownloadBody;
    var Downloads = /** @class */ (function () {
        function Downloads(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Downloads.prototype.init = function (data) {
            if (data) {
                this.content_type = data["content_type"] !== undefined ? data["content_type"] : null;
                this.description = data["description"] !== undefined ? data["description"] : null;
                this.download_count = data["download_count"] !== undefined ? data["download_count"] : null;
                this.html_url = data["html_url"] !== undefined ? data["html_url"] : null;
                this.id = data["id"] !== undefined ? data["id"] : null;
                this.name = data["name"] !== undefined ? data["name"] : null;
                this.size = data["size"] !== undefined ? data["size"] : null;
                this.url = data["url"] !== undefined ? data["url"] : null;
            }
        };
        Downloads.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Downloads();
            result.init(data);
            return result;
        };
        Downloads.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["content_type"] = this.content_type !== undefined ? this.content_type : null;
            data["description"] = this.description !== undefined ? this.description : null;
            data["download_count"] = this.download_count !== undefined ? this.download_count : null;
            data["html_url"] = this.html_url !== undefined ? this.html_url : null;
            data["id"] = this.id !== undefined ? this.id : null;
            data["name"] = this.name !== undefined ? this.name : null;
            data["size"] = this.size !== undefined ? this.size : null;
            data["url"] = this.url !== undefined ? this.url : null;
            return data;
        };
        return Downloads;
    }());
    GithubApiClient.Downloads = Downloads;
    var EditTeam = /** @class */ (function () {
        function EditTeam(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        EditTeam.prototype.init = function (data) {
            if (data) {
                this.name = data["name"] !== undefined ? data["name"] : null;
                this.permission = data["permission"] !== undefined ? data["permission"] : null;
            }
        };
        EditTeam.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new EditTeam();
            result.init(data);
            return result;
        };
        EditTeam.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["name"] = this.name !== undefined ? this.name : null;
            data["permission"] = this.permission !== undefined ? this.permission : null;
            return data;
        };
        return EditTeam;
    }());
    GithubApiClient.EditTeam = EditTeam;
    var Event = /** @class */ (function () {
        function Event(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Event.prototype.init = function (data) {
            if (data) {
                this.actor = data["actor"] ? Actor.fromJS(data["actor"]) : null;
                this.commit_id = data["commit_id"] !== undefined ? data["commit_id"] : null;
                this.created_at = data["created_at"] !== undefined ? data["created_at"] : null;
                this.event = data["event"] !== undefined ? data["event"] : null;
                this.issue = data["issue"] ? Issue2.fromJS(data["issue"]) : null;
                this.url = data["url"] !== undefined ? data["url"] : null;
            }
        };
        Event.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Event();
            result.init(data);
            return result;
        };
        Event.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["actor"] = this.actor ? this.actor.toJSON() : null;
            data["commit_id"] = this.commit_id !== undefined ? this.commit_id : null;
            data["created_at"] = this.created_at !== undefined ? this.created_at : null;
            data["event"] = this.event !== undefined ? this.event : null;
            data["issue"] = this.issue ? this.issue.toJSON() : null;
            data["url"] = this.url !== undefined ? this.url : null;
            return data;
        };
        return Event;
    }());
    GithubApiClient.Event = Event;
    var Events = /** @class */ (function () {
        function Events(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Events.prototype.init = function (data) {
            if (data) {
                this.actor = data["actor"] ? Actor2.fromJS(data["actor"]) : null;
                if (data["created_at"]) {
                    this.created_at = {};
                    for (var key in data["created_at"]) {
                        if (data["created_at"].hasOwnProperty(key))
                            this.created_at[key] = data["created_at"][key];
                    }
                }
                this.id = data["id"] !== undefined ? data["id"] : null;
                this.org = data["org"] ? Org.fromJS(data["org"]) : null;
                if (data["payload"]) {
                    this.payload = {};
                    for (var key in data["payload"]) {
                        if (data["payload"].hasOwnProperty(key))
                            this.payload[key] = data["payload"][key];
                    }
                }
                this.public = data["public"] !== undefined ? data["public"] : null;
                this.repo = data["repo"] ? Repo2.fromJS(data["repo"]) : null;
                this.type = data["type"] !== undefined ? data["type"] : null;
            }
        };
        Events.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Events();
            result.init(data);
            return result;
        };
        Events.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["actor"] = this.actor ? this.actor.toJSON() : null;
            if (this.created_at) {
                data["created_at"] = {};
                for (var key in this.created_at) {
                    if (this.created_at.hasOwnProperty(key))
                        data["created_at"][key] = this.created_at[key] !== undefined ? this.created_at[key] : null;
                }
            }
            data["id"] = this.id !== undefined ? this.id : null;
            data["org"] = this.org ? this.org.toJSON() : null;
            if (this.payload) {
                data["payload"] = {};
                for (var key in this.payload) {
                    if (this.payload.hasOwnProperty(key))
                        data["payload"][key] = this.payload[key] !== undefined ? this.payload[key] : null;
                }
            }
            data["public"] = this.public !== undefined ? this.public : null;
            data["repo"] = this.repo ? this.repo.toJSON() : null;
            data["type"] = this.type !== undefined ? this.type : null;
            return data;
        };
        return Events;
    }());
    GithubApiClient.Events = Events;
    var Feeds = /** @class */ (function () {
        function Feeds(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Feeds.prototype.init = function (data) {
            if (data) {
                this._links = data["_links"] ? _links3.fromJS(data["_links"]) : null;
                this.current_user_actor_url = data["current_user_actor_url"] !== undefined ? data["current_user_actor_url"] : null;
                this.current_user_organization_url = data["current_user_organization_url"] !== undefined ? data["current_user_organization_url"] : null;
                this.current_user_public = data["current_user_public"] !== undefined ? data["current_user_public"] : null;
                this.current_user_url = data["current_user_url"] !== undefined ? data["current_user_url"] : null;
                this.timeline_url = data["timeline_url"] !== undefined ? data["timeline_url"] : null;
                this.user_url = data["user_url"] !== undefined ? data["user_url"] : null;
            }
        };
        Feeds.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Feeds();
            result.init(data);
            return result;
        };
        Feeds.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["_links"] = this._links ? this._links.toJSON() : null;
            data["current_user_actor_url"] = this.current_user_actor_url !== undefined ? this.current_user_actor_url : null;
            data["current_user_organization_url"] = this.current_user_organization_url !== undefined ? this.current_user_organization_url : null;
            data["current_user_public"] = this.current_user_public !== undefined ? this.current_user_public : null;
            data["current_user_url"] = this.current_user_url !== undefined ? this.current_user_url : null;
            data["timeline_url"] = this.timeline_url !== undefined ? this.timeline_url : null;
            data["user_url"] = this.user_url !== undefined ? this.user_url : null;
            return data;
        };
        return Feeds;
    }());
    GithubApiClient.Feeds = Feeds;
    var Fork = /** @class */ (function () {
        function Fork(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Fork.prototype.init = function (data) {
            if (data) {
                this.clone_url = data["clone_url"] !== undefined ? data["clone_url"] : null;
                this.created_at = data["created_at"] !== undefined ? data["created_at"] : null;
                this.description = data["description"] !== undefined ? data["description"] : null;
                this.fork = data["fork"] !== undefined ? data["fork"] : null;
                this.forks = data["forks"] !== undefined ? data["forks"] : null;
                this.forks_count = data["forks_count"] !== undefined ? data["forks_count"] : null;
                this.full_name = data["full_name"] !== undefined ? data["full_name"] : null;
                this.git_url = data["git_url"] !== undefined ? data["git_url"] : null;
                this.homepage = data["homepage"] !== undefined ? data["homepage"] : null;
                this.html_url = data["html_url"] !== undefined ? data["html_url"] : null;
                this.id = data["id"] !== undefined ? data["id"] : null;
                this.language = data["language"] !== undefined ? data["language"] : null;
                this.master_branch = data["master_branch"] !== undefined ? data["master_branch"] : null;
                this.mirror_url = data["mirror_url"] !== undefined ? data["mirror_url"] : null;
                this.name = data["name"] !== undefined ? data["name"] : null;
                this.open_issues = data["open_issues"] !== undefined ? data["open_issues"] : null;
                this.open_issues_count = data["open_issues_count"] !== undefined ? data["open_issues_count"] : null;
                this.owner = data["owner"] ? Owner.fromJS(data["owner"]) : null;
                this.private = data["private"] !== undefined ? data["private"] : null;
                this.pushed_at = data["pushed_at"] !== undefined ? data["pushed_at"] : null;
                this.size = data["size"] !== undefined ? data["size"] : null;
                this.ssh_url = data["ssh_url"] !== undefined ? data["ssh_url"] : null;
                this.svn_url = data["svn_url"] !== undefined ? data["svn_url"] : null;
                this.updated_at = data["updated_at"] !== undefined ? data["updated_at"] : null;
                this.url = data["url"] !== undefined ? data["url"] : null;
                this.watchers = data["watchers"] !== undefined ? data["watchers"] : null;
                this.watchers_count = data["watchers_count"] !== undefined ? data["watchers_count"] : null;
            }
        };
        Fork.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Fork();
            result.init(data);
            return result;
        };
        Fork.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["clone_url"] = this.clone_url !== undefined ? this.clone_url : null;
            data["created_at"] = this.created_at !== undefined ? this.created_at : null;
            data["description"] = this.description !== undefined ? this.description : null;
            data["fork"] = this.fork !== undefined ? this.fork : null;
            data["forks"] = this.forks !== undefined ? this.forks : null;
            data["forks_count"] = this.forks_count !== undefined ? this.forks_count : null;
            data["full_name"] = this.full_name !== undefined ? this.full_name : null;
            data["git_url"] = this.git_url !== undefined ? this.git_url : null;
            data["homepage"] = this.homepage !== undefined ? this.homepage : null;
            data["html_url"] = this.html_url !== undefined ? this.html_url : null;
            data["id"] = this.id !== undefined ? this.id : null;
            data["language"] = this.language !== undefined ? this.language : null;
            data["master_branch"] = this.master_branch !== undefined ? this.master_branch : null;
            data["mirror_url"] = this.mirror_url !== undefined ? this.mirror_url : null;
            data["name"] = this.name !== undefined ? this.name : null;
            data["open_issues"] = this.open_issues !== undefined ? this.open_issues : null;
            data["open_issues_count"] = this.open_issues_count !== undefined ? this.open_issues_count : null;
            data["owner"] = this.owner ? this.owner.toJSON() : null;
            data["private"] = this.private !== undefined ? this.private : null;
            data["pushed_at"] = this.pushed_at !== undefined ? this.pushed_at : null;
            data["size"] = this.size !== undefined ? this.size : null;
            data["ssh_url"] = this.ssh_url !== undefined ? this.ssh_url : null;
            data["svn_url"] = this.svn_url !== undefined ? this.svn_url : null;
            data["updated_at"] = this.updated_at !== undefined ? this.updated_at : null;
            data["url"] = this.url !== undefined ? this.url : null;
            data["watchers"] = this.watchers !== undefined ? this.watchers : null;
            data["watchers_count"] = this.watchers_count !== undefined ? this.watchers_count : null;
            return data;
        };
        return Fork;
    }());
    GithubApiClient.Fork = Fork;
    var ForkBody = /** @class */ (function () {
        function ForkBody(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        ForkBody.prototype.init = function (data) {
            if (data) {
                this.organization = data["organization"] !== undefined ? data["organization"] : null;
            }
        };
        ForkBody.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new ForkBody();
            result.init(data);
            return result;
        };
        ForkBody.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["organization"] = this.organization !== undefined ? this.organization : null;
            return data;
        };
        return ForkBody;
    }());
    GithubApiClient.ForkBody = ForkBody;
    var Gist = /** @class */ (function () {
        function Gist(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Gist.prototype.init = function (data) {
            if (data) {
                this.comments = data["comments"] !== undefined ? data["comments"] : null;
                this.comments_url = data["comments_url"] !== undefined ? data["comments_url"] : null;
                this.created_at = data["created_at"] !== undefined ? data["created_at"] : null;
                this.description = data["description"] !== undefined ? data["description"] : null;
                this.files = data["files"] ? Files3.fromJS(data["files"]) : null;
                if (data["forks"] && data["forks"].constructor === Array) {
                    this.forks = [];
                    for (var _i = 0, _a = data["forks"]; _i < _a.length; _i++) {
                        var item = _a[_i];
                        this.forks.push(Forks.fromJS(item));
                    }
                }
                this.git_pull_url = data["git_pull_url"] !== undefined ? data["git_pull_url"] : null;
                this.git_push_url = data["git_push_url"] !== undefined ? data["git_push_url"] : null;
                if (data["history"] && data["history"].constructor === Array) {
                    this.history = [];
                    for (var _b = 0, _c = data["history"]; _b < _c.length; _b++) {
                        var item = _c[_b];
                        this.history.push(History.fromJS(item));
                    }
                }
                this.html_url = data["html_url"] !== undefined ? data["html_url"] : null;
                this.id = data["id"] !== undefined ? data["id"] : null;
                this.public = data["public"] !== undefined ? data["public"] : null;
                this.url = data["url"] !== undefined ? data["url"] : null;
                this.user = data["user"] ? User3.fromJS(data["user"]) : null;
            }
        };
        Gist.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Gist();
            result.init(data);
            return result;
        };
        Gist.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["comments"] = this.comments !== undefined ? this.comments : null;
            data["comments_url"] = this.comments_url !== undefined ? this.comments_url : null;
            data["created_at"] = this.created_at !== undefined ? this.created_at : null;
            data["description"] = this.description !== undefined ? this.description : null;
            data["files"] = this.files ? this.files.toJSON() : null;
            if (this.forks && this.forks.constructor === Array) {
                data["forks"] = [];
                for (var _i = 0, _a = this.forks; _i < _a.length; _i++) {
                    var item = _a[_i];
                    data["forks"].push(item.toJSON());
                }
            }
            data["git_pull_url"] = this.git_pull_url !== undefined ? this.git_pull_url : null;
            data["git_push_url"] = this.git_push_url !== undefined ? this.git_push_url : null;
            if (this.history && this.history.constructor === Array) {
                data["history"] = [];
                for (var _b = 0, _c = this.history; _b < _c.length; _b++) {
                    var item = _c[_b];
                    data["history"].push(item.toJSON());
                }
            }
            data["html_url"] = this.html_url !== undefined ? this.html_url : null;
            data["id"] = this.id !== undefined ? this.id : null;
            data["public"] = this.public !== undefined ? this.public : null;
            data["url"] = this.url !== undefined ? this.url : null;
            data["user"] = this.user ? this.user.toJSON() : null;
            return data;
        };
        return Gist;
    }());
    GithubApiClient.Gist = Gist;
    var GitCommit = /** @class */ (function () {
        function GitCommit(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        GitCommit.prototype.init = function (data) {
            if (data) {
                this.author = data["author"] ? Author2.fromJS(data["author"]) : null;
                this.message = data["message"] !== undefined ? data["message"] : null;
                this.parents = data["parents"] !== undefined ? data["parents"] : null;
                this.tree = data["tree"] !== undefined ? data["tree"] : null;
            }
        };
        GitCommit.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new GitCommit();
            result.init(data);
            return result;
        };
        GitCommit.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["author"] = this.author ? this.author.toJSON() : null;
            data["message"] = this.message !== undefined ? this.message : null;
            data["parents"] = this.parents !== undefined ? this.parents : null;
            data["tree"] = this.tree !== undefined ? this.tree : null;
            return data;
        };
        return GitCommit;
    }());
    GithubApiClient.GitCommit = GitCommit;
    var GitRefPatch = /** @class */ (function () {
        function GitRefPatch(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        GitRefPatch.prototype.init = function (data) {
            if (data) {
                this.force = data["force"] !== undefined ? data["force"] : null;
                this.sha = data["sha"] !== undefined ? data["sha"] : null;
            }
        };
        GitRefPatch.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new GitRefPatch();
            result.init(data);
            return result;
        };
        GitRefPatch.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["force"] = this.force !== undefined ? this.force : null;
            data["sha"] = this.sha !== undefined ? this.sha : null;
            return data;
        };
        return GitRefPatch;
    }());
    GithubApiClient.GitRefPatch = GitRefPatch;
    var GitignoreLang = /** @class */ (function () {
        function GitignoreLang(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        GitignoreLang.prototype.init = function (data) {
            if (data) {
                this.name = data["name"] !== undefined ? data["name"] : null;
                this.source = data["source"] !== undefined ? data["source"] : null;
            }
        };
        GitignoreLang.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new GitignoreLang();
            result.init(data);
            return result;
        };
        GitignoreLang.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["name"] = this.name !== undefined ? this.name : null;
            data["source"] = this.source !== undefined ? this.source : null;
            return data;
        };
        return GitignoreLang;
    }());
    GithubApiClient.GitignoreLang = GitignoreLang;
    var HeadBranch = /** @class */ (function () {
        function HeadBranch(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        HeadBranch.prototype.init = function (data) {
            if (data) {
                this.object = data["object"] ? Object.fromJS(data["object"]) : null;
                this.ref = data["ref"] !== undefined ? data["ref"] : null;
                this.url = data["url"] !== undefined ? data["url"] : null;
            }
        };
        HeadBranch.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new HeadBranch();
            result.init(data);
            return result;
        };
        HeadBranch.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["object"] = this.object ? this.object.toJSON() : null;
            data["ref"] = this.ref !== undefined ? this.ref : null;
            data["url"] = this.url !== undefined ? this.url : null;
            return data;
        };
        return HeadBranch;
    }());
    GithubApiClient.HeadBranch = HeadBranch;
    var HeadBranchBody = /** @class */ (function () {
        function HeadBranchBody(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        HeadBranchBody.prototype.init = function (data) {
            if (data) {
                this.force = data["force"] !== undefined ? data["force"] : null;
                this.sha = data["sha"] !== undefined ? data["sha"] : null;
            }
        };
        HeadBranchBody.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new HeadBranchBody();
            result.init(data);
            return result;
        };
        HeadBranchBody.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["force"] = this.force !== undefined ? this.force : null;
            data["sha"] = this.sha !== undefined ? this.sha : null;
            return data;
        };
        return HeadBranchBody;
    }());
    GithubApiClient.HeadBranchBody = HeadBranchBody;
    var HookBody = /** @class */ (function () {
        function HookBody(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        HookBody.prototype.init = function (data) {
            if (data) {
                this.active = data["active"] !== undefined ? data["active"] : null;
                if (data["add_events"] && data["add_events"].constructor === Array) {
                    this.add_events = [];
                    for (var _i = 0, _a = data["add_events"]; _i < _a.length; _i++) {
                        var item = _a[_i];
                        this.add_events.push(item);
                    }
                }
            }
        };
        HookBody.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new HookBody();
            result.init(data);
            return result;
        };
        HookBody.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["active"] = this.active !== undefined ? this.active : null;
            if (this.add_events && this.add_events.constructor === Array) {
                data["add_events"] = [];
                for (var _i = 0, _a = this.add_events; _i < _a.length; _i++) {
                    var item = _a[_i];
                    data["add_events"].push(item);
                }
            }
            return data;
        };
        return HookBody;
    }());
    GithubApiClient.HookBody = HookBody;
    var Issue = /** @class */ (function () {
        function Issue(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Issue.prototype.init = function (data) {
            if (data) {
                this.assignee = data["assignee"] !== undefined ? data["assignee"] : null;
                this.body = data["body"] !== undefined ? data["body"] : null;
                if (data["labels"] && data["labels"].constructor === Array) {
                    this.labels = [];
                    for (var _i = 0, _a = data["labels"]; _i < _a.length; _i++) {
                        var item = _a[_i];
                        this.labels.push(item);
                    }
                }
                this.milestone = data["milestone"] !== undefined ? data["milestone"] : null;
                this.title = data["title"] !== undefined ? data["title"] : null;
            }
        };
        Issue.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Issue();
            result.init(data);
            return result;
        };
        Issue.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["assignee"] = this.assignee !== undefined ? this.assignee : null;
            data["body"] = this.body !== undefined ? this.body : null;
            if (this.labels && this.labels.constructor === Array) {
                data["labels"] = [];
                for (var _i = 0, _a = this.labels; _i < _a.length; _i++) {
                    var item = _a[_i];
                    data["labels"].push(item);
                }
            }
            data["milestone"] = this.milestone !== undefined ? this.milestone : null;
            data["title"] = this.title !== undefined ? this.title : null;
            return data;
        };
        return Issue;
    }());
    GithubApiClient.Issue = Issue;
    var IssueBody = /** @class */ (function () {
        function IssueBody(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        IssueBody.prototype.init = function (data) {
            if (data) {
                this.assignee = data["assignee"] !== undefined ? data["assignee"] : null;
                this.body = data["body"] !== undefined ? data["body"] : null;
                if (data["labels"] && data["labels"].constructor === Array) {
                    this.labels = [];
                    for (var _i = 0, _a = data["labels"]; _i < _a.length; _i++) {
                        var item = _a[_i];
                        this.labels.push(item);
                    }
                }
                this.milestone = data["milestone"] !== undefined ? data["milestone"] : null;
                this.title = data["title"] !== undefined ? data["title"] : null;
            }
        };
        IssueBody.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new IssueBody();
            result.init(data);
            return result;
        };
        IssueBody.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["assignee"] = this.assignee !== undefined ? this.assignee : null;
            data["body"] = this.body !== undefined ? this.body : null;
            if (this.labels && this.labels.constructor === Array) {
                data["labels"] = [];
                for (var _i = 0, _a = this.labels; _i < _a.length; _i++) {
                    var item = _a[_i];
                    data["labels"].push(item);
                }
            }
            data["milestone"] = this.milestone !== undefined ? this.milestone : null;
            data["title"] = this.title !== undefined ? this.title : null;
            return data;
        };
        return IssueBody;
    }());
    GithubApiClient.IssueBody = IssueBody;
    var IssuesComment = /** @class */ (function () {
        function IssuesComment(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        IssuesComment.prototype.init = function (data) {
            if (data) {
                this.body = data["body"] !== undefined ? data["body"] : null;
                this.created_at = data["created_at"] !== undefined ? data["created_at"] : null;
                this.html_url = data["html_url"] !== undefined ? data["html_url"] : null;
                this.id = data["id"] !== undefined ? data["id"] : null;
                this.updated_at = data["updated_at"] !== undefined ? data["updated_at"] : null;
                this.url = data["url"] !== undefined ? data["url"] : null;
                this.user = data["user"] ? User4.fromJS(data["user"]) : null;
            }
        };
        IssuesComment.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new IssuesComment();
            result.init(data);
            return result;
        };
        IssuesComment.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["body"] = this.body !== undefined ? this.body : null;
            data["created_at"] = this.created_at !== undefined ? this.created_at : null;
            data["html_url"] = this.html_url !== undefined ? this.html_url : null;
            data["id"] = this.id !== undefined ? this.id : null;
            data["updated_at"] = this.updated_at !== undefined ? this.updated_at : null;
            data["url"] = this.url !== undefined ? this.url : null;
            data["user"] = this.user ? this.user.toJSON() : null;
            return data;
        };
        return IssuesComment;
    }());
    GithubApiClient.IssuesComment = IssuesComment;
    var Key = /** @class */ (function () {
        function Key(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Key.prototype.init = function (data) {
            if (data) {
                this.id = data["id"] !== undefined ? data["id"] : null;
                this.key = data["key"] !== undefined ? data["key"] : null;
                this.title = data["title"] !== undefined ? data["title"] : null;
                this.url = data["url"] !== undefined ? data["url"] : null;
            }
        };
        Key.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Key();
            result.init(data);
            return result;
        };
        Key.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["id"] = this.id !== undefined ? this.id : null;
            data["key"] = this.key !== undefined ? this.key : null;
            data["title"] = this.title !== undefined ? this.title : null;
            data["url"] = this.url !== undefined ? this.url : null;
            return data;
        };
        return Key;
    }());
    GithubApiClient.Key = Key;
    var KeyBody = /** @class */ (function () {
        function KeyBody(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        KeyBody.prototype.init = function (data) {
            if (data) {
                this.key = data["key"] !== undefined ? data["key"] : null;
                this.title = data["title"] !== undefined ? data["title"] : null;
            }
        };
        KeyBody.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new KeyBody();
            result.init(data);
            return result;
        };
        KeyBody.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["key"] = this.key !== undefined ? this.key : null;
            data["title"] = this.title !== undefined ? this.title : null;
            return data;
        };
        return KeyBody;
    }());
    GithubApiClient.KeyBody = KeyBody;
    var Label = /** @class */ (function () {
        function Label(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Label.prototype.init = function (data) {
            if (data) {
                this.color = data["color"] !== undefined ? data["color"] : null;
                this.name = data["name"] !== undefined ? data["name"] : null;
                this.url = data["url"] !== undefined ? data["url"] : null;
            }
        };
        Label.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Label();
            result.init(data);
            return result;
        };
        Label.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["color"] = this.color !== undefined ? this.color : null;
            data["name"] = this.name !== undefined ? this.name : null;
            data["url"] = this.url !== undefined ? this.url : null;
            return data;
        };
        return Label;
    }());
    GithubApiClient.Label = Label;
    var Markdown = /** @class */ (function () {
        function Markdown(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Markdown.prototype.init = function (data) {
            if (data) {
                this.context = data["context"] !== undefined ? data["context"] : null;
                this.mode = data["mode"] !== undefined ? data["mode"] : null;
                this.text = data["text"] !== undefined ? data["text"] : null;
            }
        };
        Markdown.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Markdown();
            result.init(data);
            return result;
        };
        Markdown.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["context"] = this.context !== undefined ? this.context : null;
            data["mode"] = this.mode !== undefined ? this.mode : null;
            data["text"] = this.text !== undefined ? this.text : null;
            return data;
        };
        return Markdown;
    }());
    GithubApiClient.Markdown = Markdown;
    var Merge = /** @class */ (function () {
        function Merge(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Merge.prototype.init = function (data) {
            if (data) {
                this.merged = data["merged"] !== undefined ? data["merged"] : null;
                this.message = data["message"] !== undefined ? data["message"] : null;
                this.sha = data["sha"] !== undefined ? data["sha"] : null;
            }
        };
        Merge.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Merge();
            result.init(data);
            return result;
        };
        Merge.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["merged"] = this.merged !== undefined ? this.merged : null;
            data["message"] = this.message !== undefined ? this.message : null;
            data["sha"] = this.sha !== undefined ? this.sha : null;
            return data;
        };
        return Merge;
    }());
    GithubApiClient.Merge = Merge;
    var MergePullBody = /** @class */ (function () {
        function MergePullBody(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        MergePullBody.prototype.init = function (data) {
            if (data) {
                this.commit_message = data["commit_message"] !== undefined ? data["commit_message"] : null;
            }
        };
        MergePullBody.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new MergePullBody();
            result.init(data);
            return result;
        };
        MergePullBody.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["commit_message"] = this.commit_message !== undefined ? this.commit_message : null;
            return data;
        };
        return MergePullBody;
    }());
    GithubApiClient.MergePullBody = MergePullBody;
    var MergesBody = /** @class */ (function () {
        function MergesBody(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        MergesBody.prototype.init = function (data) {
            if (data) {
                this.base = data["base"] !== undefined ? data["base"] : null;
                this.commit_message = data["commit_message"] !== undefined ? data["commit_message"] : null;
                this.head = data["head"] !== undefined ? data["head"] : null;
            }
        };
        MergesBody.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new MergesBody();
            result.init(data);
            return result;
        };
        MergesBody.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["base"] = this.base !== undefined ? this.base : null;
            data["commit_message"] = this.commit_message !== undefined ? this.commit_message : null;
            data["head"] = this.head !== undefined ? this.head : null;
            return data;
        };
        return MergesBody;
    }());
    GithubApiClient.MergesBody = MergesBody;
    var MergesConflict = /** @class */ (function () {
        function MergesConflict(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        MergesConflict.prototype.init = function (data) {
            if (data) {
                this.message = data["message"] !== undefined ? data["message"] : null;
            }
        };
        MergesConflict.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new MergesConflict();
            result.init(data);
            return result;
        };
        MergesConflict.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["message"] = this.message !== undefined ? this.message : null;
            return data;
        };
        return MergesConflict;
    }());
    GithubApiClient.MergesConflict = MergesConflict;
    var MergesSuccessful = /** @class */ (function () {
        function MergesSuccessful(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        MergesSuccessful.prototype.init = function (data) {
            if (data) {
                this.author = data["author"] ? Author3.fromJS(data["author"]) : null;
                this.comments_url = data["comments_url"] !== undefined ? data["comments_url"] : null;
                this.commit = data["commit"] ? Commit6.fromJS(data["commit"]) : null;
                this.committer = data["committer"] ? Committer4.fromJS(data["committer"]) : null;
                this.merged = data["merged"] !== undefined ? data["merged"] : null;
                this.message = data["message"] !== undefined ? data["message"] : null;
                if (data["parents"] && data["parents"].constructor === Array) {
                    this.parents = [];
                    for (var _i = 0, _a = data["parents"]; _i < _a.length; _i++) {
                        var item = _a[_i];
                        this.parents.push(Parents2.fromJS(item));
                    }
                }
                this.sha = data["sha"] !== undefined ? data["sha"] : null;
                this.url = data["url"] !== undefined ? data["url"] : null;
            }
        };
        MergesSuccessful.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new MergesSuccessful();
            result.init(data);
            return result;
        };
        MergesSuccessful.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["author"] = this.author ? this.author.toJSON() : null;
            data["comments_url"] = this.comments_url !== undefined ? this.comments_url : null;
            data["commit"] = this.commit ? this.commit.toJSON() : null;
            data["committer"] = this.committer ? this.committer.toJSON() : null;
            data["merged"] = this.merged !== undefined ? this.merged : null;
            data["message"] = this.message !== undefined ? this.message : null;
            if (this.parents && this.parents.constructor === Array) {
                data["parents"] = [];
                for (var _i = 0, _a = this.parents; _i < _a.length; _i++) {
                    var item = _a[_i];
                    data["parents"].push(item.toJSON());
                }
            }
            data["sha"] = this.sha !== undefined ? this.sha : null;
            data["url"] = this.url !== undefined ? this.url : null;
            return data;
        };
        return MergesSuccessful;
    }());
    GithubApiClient.MergesSuccessful = MergesSuccessful;
    var Meta = /** @class */ (function () {
        function Meta(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Meta.prototype.init = function (data) {
            if (data) {
                if (data["git"] && data["git"].constructor === Array) {
                    this.git = [];
                    for (var _i = 0, _a = data["git"]; _i < _a.length; _i++) {
                        var item = _a[_i];
                        this.git.push(item);
                    }
                }
                if (data["hooks"] && data["hooks"].constructor === Array) {
                    this.hooks = [];
                    for (var _b = 0, _c = data["hooks"]; _b < _c.length; _b++) {
                        var item = _c[_b];
                        this.hooks.push(item);
                    }
                }
            }
        };
        Meta.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Meta();
            result.init(data);
            return result;
        };
        Meta.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            if (this.git && this.git.constructor === Array) {
                data["git"] = [];
                for (var _i = 0, _a = this.git; _i < _a.length; _i++) {
                    var item = _a[_i];
                    data["git"].push(item);
                }
            }
            if (this.hooks && this.hooks.constructor === Array) {
                data["hooks"] = [];
                for (var _b = 0, _c = this.hooks; _b < _c.length; _b++) {
                    var item = _c[_b];
                    data["hooks"].push(item);
                }
            }
            return data;
        };
        return Meta;
    }());
    GithubApiClient.Meta = Meta;
    var Milestone = /** @class */ (function () {
        function Milestone(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Milestone.prototype.init = function (data) {
            if (data) {
                this.closed_issues = data["closed_issues"] !== undefined ? data["closed_issues"] : null;
                this.created_at = data["created_at"] !== undefined ? data["created_at"] : null;
                this.creator = data["creator"] ? Creator2.fromJS(data["creator"]) : null;
                this.description = data["description"] !== undefined ? data["description"] : null;
                this.due_on = data["due_on"] !== undefined ? data["due_on"] : null;
                this.number = data["number"] !== undefined ? data["number"] : null;
                this.open_issues = data["open_issues"] !== undefined ? data["open_issues"] : null;
                this.state = data["state"] !== undefined ? data["state"] : null;
                this.title = data["title"] !== undefined ? data["title"] : null;
                this.url = data["url"] !== undefined ? data["url"] : null;
            }
        };
        Milestone.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Milestone();
            result.init(data);
            return result;
        };
        Milestone.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["closed_issues"] = this.closed_issues !== undefined ? this.closed_issues : null;
            data["created_at"] = this.created_at !== undefined ? this.created_at : null;
            data["creator"] = this.creator ? this.creator.toJSON() : null;
            data["description"] = this.description !== undefined ? this.description : null;
            data["due_on"] = this.due_on !== undefined ? this.due_on : null;
            data["number"] = this.number !== undefined ? this.number : null;
            data["open_issues"] = this.open_issues !== undefined ? this.open_issues : null;
            data["state"] = this.state !== undefined ? this.state : null;
            data["title"] = this.title !== undefined ? this.title : null;
            data["url"] = this.url !== undefined ? this.url : null;
            return data;
        };
        return Milestone;
    }());
    GithubApiClient.Milestone = Milestone;
    var MilestoneBody = /** @class */ (function () {
        function MilestoneBody(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        MilestoneBody.prototype.init = function (data) {
            if (data) {
                this.description = data["description"] !== undefined ? data["description"] : null;
                this.due_on = data["due_on"] !== undefined ? data["due_on"] : null;
                this.state = data["state"] !== undefined ? data["state"] : null;
                this.title = data["title"] !== undefined ? data["title"] : null;
            }
        };
        MilestoneBody.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new MilestoneBody();
            result.init(data);
            return result;
        };
        MilestoneBody.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["description"] = this.description !== undefined ? this.description : null;
            data["due_on"] = this.due_on !== undefined ? this.due_on : null;
            data["state"] = this.state !== undefined ? this.state : null;
            data["title"] = this.title !== undefined ? this.title : null;
            return data;
        };
        return MilestoneBody;
    }());
    GithubApiClient.MilestoneBody = MilestoneBody;
    var MilestoneUpdate = /** @class */ (function () {
        function MilestoneUpdate(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        MilestoneUpdate.prototype.init = function (data) {
            if (data) {
                this.description = data["description"] !== undefined ? data["description"] : null;
                this.due_on = data["due_on"] !== undefined ? data["due_on"] : null;
                this.state = data["state"] !== undefined ? data["state"] : null;
                this.title = data["title"] !== undefined ? data["title"] : null;
            }
        };
        MilestoneUpdate.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new MilestoneUpdate();
            result.init(data);
            return result;
        };
        MilestoneUpdate.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["description"] = this.description !== undefined ? this.description : null;
            data["due_on"] = this.due_on !== undefined ? this.due_on : null;
            data["state"] = this.state !== undefined ? this.state : null;
            data["title"] = this.title !== undefined ? this.title : null;
            return data;
        };
        return MilestoneUpdate;
    }());
    GithubApiClient.MilestoneUpdate = MilestoneUpdate;
    var NotificationMarkRead = /** @class */ (function () {
        function NotificationMarkRead(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        NotificationMarkRead.prototype.init = function (data) {
            if (data) {
                this.last_read_at = data["last_read_at"] !== undefined ? data["last_read_at"] : null;
            }
        };
        NotificationMarkRead.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new NotificationMarkRead();
            result.init(data);
            return result;
        };
        NotificationMarkRead.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["last_read_at"] = this.last_read_at !== undefined ? this.last_read_at : null;
            return data;
        };
        return NotificationMarkRead;
    }());
    GithubApiClient.NotificationMarkRead = NotificationMarkRead;
    var Notifications = /** @class */ (function () {
        function Notifications(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Notifications.prototype.init = function (data) {
            if (data) {
                this.id = data["id"] !== undefined ? data["id"] : null;
                this.last_read_at = data["last_read_at"] !== undefined ? data["last_read_at"] : null;
                this.reason = data["reason"] !== undefined ? data["reason"] : null;
                this.repository = data["repository"] ? Repository.fromJS(data["repository"]) : null;
                this.subject = data["subject"] ? Subject.fromJS(data["subject"]) : null;
                this.unread = data["unread"] !== undefined ? data["unread"] : null;
                this.updated_at = data["updated_at"] !== undefined ? data["updated_at"] : null;
                this.url = data["url"] !== undefined ? data["url"] : null;
            }
        };
        Notifications.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Notifications();
            result.init(data);
            return result;
        };
        Notifications.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["id"] = this.id !== undefined ? this.id : null;
            data["last_read_at"] = this.last_read_at !== undefined ? this.last_read_at : null;
            data["reason"] = this.reason !== undefined ? this.reason : null;
            data["repository"] = this.repository ? this.repository.toJSON() : null;
            data["subject"] = this.subject ? this.subject.toJSON() : null;
            data["unread"] = this.unread !== undefined ? this.unread : null;
            data["updated_at"] = this.updated_at !== undefined ? this.updated_at : null;
            data["url"] = this.url !== undefined ? this.url : null;
            return data;
        };
        return Notifications;
    }());
    GithubApiClient.Notifications = Notifications;
    var OrgTeamsPost = /** @class */ (function () {
        function OrgTeamsPost(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        OrgTeamsPost.prototype.init = function (data) {
            if (data) {
                this.name = data["name"] !== undefined ? data["name"] : null;
                this.permission = data["permission"] !== undefined ? data["permission"] : null;
                if (data["repo_names"] && data["repo_names"].constructor === Array) {
                    this.repo_names = [];
                    for (var _i = 0, _a = data["repo_names"]; _i < _a.length; _i++) {
                        var item = _a[_i];
                        this.repo_names.push(item);
                    }
                }
            }
        };
        OrgTeamsPost.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new OrgTeamsPost();
            result.init(data);
            return result;
        };
        OrgTeamsPost.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["name"] = this.name !== undefined ? this.name : null;
            data["permission"] = this.permission !== undefined ? this.permission : null;
            if (this.repo_names && this.repo_names.constructor === Array) {
                data["repo_names"] = [];
                for (var _i = 0, _a = this.repo_names; _i < _a.length; _i++) {
                    var item = _a[_i];
                    data["repo_names"].push(item);
                }
            }
            return data;
        };
        return OrgTeamsPost;
    }());
    GithubApiClient.OrgTeamsPost = OrgTeamsPost;
    var Organization = /** @class */ (function () {
        function Organization(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Organization.prototype.init = function (data) {
            if (data) {
                this.avatar_url = data["avatar_url"] !== undefined ? data["avatar_url"] : null;
                this.blog = data["blog"] !== undefined ? data["blog"] : null;
                this.company = data["company"] !== undefined ? data["company"] : null;
                this.created_at = data["created_at"] !== undefined ? data["created_at"] : null;
                this.email = data["email"] !== undefined ? data["email"] : null;
                this.followers = data["followers"] !== undefined ? data["followers"] : null;
                this.following = data["following"] !== undefined ? data["following"] : null;
                this.html_url = data["html_url"] !== undefined ? data["html_url"] : null;
                this.id = data["id"] !== undefined ? data["id"] : null;
                this.location = data["location"] !== undefined ? data["location"] : null;
                this.login = data["login"] !== undefined ? data["login"] : null;
                this.name = data["name"] !== undefined ? data["name"] : null;
                this.public_gists = data["public_gists"] !== undefined ? data["public_gists"] : null;
                this.public_repos = data["public_repos"] !== undefined ? data["public_repos"] : null;
                this.type = data["type"] !== undefined ? data["type"] : null;
                this.url = data["url"] !== undefined ? data["url"] : null;
            }
        };
        Organization.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Organization();
            result.init(data);
            return result;
        };
        Organization.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["avatar_url"] = this.avatar_url !== undefined ? this.avatar_url : null;
            data["blog"] = this.blog !== undefined ? this.blog : null;
            data["company"] = this.company !== undefined ? this.company : null;
            data["created_at"] = this.created_at !== undefined ? this.created_at : null;
            data["email"] = this.email !== undefined ? this.email : null;
            data["followers"] = this.followers !== undefined ? this.followers : null;
            data["following"] = this.following !== undefined ? this.following : null;
            data["html_url"] = this.html_url !== undefined ? this.html_url : null;
            data["id"] = this.id !== undefined ? this.id : null;
            data["location"] = this.location !== undefined ? this.location : null;
            data["login"] = this.login !== undefined ? this.login : null;
            data["name"] = this.name !== undefined ? this.name : null;
            data["public_gists"] = this.public_gists !== undefined ? this.public_gists : null;
            data["public_repos"] = this.public_repos !== undefined ? this.public_repos : null;
            data["type"] = this.type !== undefined ? this.type : null;
            data["url"] = this.url !== undefined ? this.url : null;
            return data;
        };
        return Organization;
    }());
    GithubApiClient.Organization = Organization;
    var OrganizationAsTeamMember = /** @class */ (function () {
        function OrganizationAsTeamMember(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        OrganizationAsTeamMember.prototype.init = function (data) {
            if (data) {
                if (data["errors"] && data["errors"].constructor === Array) {
                    this.errors = [];
                    for (var _i = 0, _a = data["errors"]; _i < _a.length; _i++) {
                        var item = _a[_i];
                        this.errors.push(Errors.fromJS(item));
                    }
                }
                this.message = data["message"] !== undefined ? data["message"] : null;
            }
        };
        OrganizationAsTeamMember.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new OrganizationAsTeamMember();
            result.init(data);
            return result;
        };
        OrganizationAsTeamMember.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            if (this.errors && this.errors.constructor === Array) {
                data["errors"] = [];
                for (var _i = 0, _a = this.errors; _i < _a.length; _i++) {
                    var item = _a[_i];
                    data["errors"].push(item.toJSON());
                }
            }
            data["message"] = this.message !== undefined ? this.message : null;
            return data;
        };
        return OrganizationAsTeamMember;
    }());
    GithubApiClient.OrganizationAsTeamMember = OrganizationAsTeamMember;
    var ParticipationStats = /** @class */ (function () {
        function ParticipationStats(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        ParticipationStats.prototype.init = function (data) {
            if (data) {
                if (data["all"] && data["all"].constructor === Array) {
                    this.all = [];
                    for (var _i = 0, _a = data["all"]; _i < _a.length; _i++) {
                        var item = _a[_i];
                        this.all.push(item);
                    }
                }
                if (data["owner"] && data["owner"].constructor === Array) {
                    this.owner = [];
                    for (var _b = 0, _c = data["owner"]; _b < _c.length; _b++) {
                        var item = _c[_b];
                        this.owner.push(item);
                    }
                }
            }
        };
        ParticipationStats.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new ParticipationStats();
            result.init(data);
            return result;
        };
        ParticipationStats.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            if (this.all && this.all.constructor === Array) {
                data["all"] = [];
                for (var _i = 0, _a = this.all; _i < _a.length; _i++) {
                    var item = _a[_i];
                    data["all"].push(item);
                }
            }
            if (this.owner && this.owner.constructor === Array) {
                data["owner"] = [];
                for (var _b = 0, _c = this.owner; _b < _c.length; _b++) {
                    var item = _c[_b];
                    data["owner"].push(item);
                }
            }
            return data;
        };
        return ParticipationStats;
    }());
    GithubApiClient.ParticipationStats = ParticipationStats;
    var PatchGist = /** @class */ (function () {
        function PatchGist(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        PatchGist.prototype.init = function (data) {
            if (data) {
                this.description = data["description"] !== undefined ? data["description"] : null;
                this.files = data["files"] ? Files4.fromJS(data["files"]) : null;
            }
        };
        PatchGist.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new PatchGist();
            result.init(data);
            return result;
        };
        PatchGist.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["description"] = this.description !== undefined ? this.description : null;
            data["files"] = this.files ? this.files.toJSON() : null;
            return data;
        };
        return PatchGist;
    }());
    GithubApiClient.PatchGist = PatchGist;
    var PatchOrg = /** @class */ (function () {
        function PatchOrg(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        PatchOrg.prototype.init = function (data) {
            if (data) {
                this.billing_email = data["billing_email"] !== undefined ? data["billing_email"] : null;
                this.company = data["company"] !== undefined ? data["company"] : null;
                this.email = data["email"] !== undefined ? data["email"] : null;
                this.location = data["location"] !== undefined ? data["location"] : null;
                this.name = data["name"] !== undefined ? data["name"] : null;
            }
        };
        PatchOrg.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new PatchOrg();
            result.init(data);
            return result;
        };
        PatchOrg.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["billing_email"] = this.billing_email !== undefined ? this.billing_email : null;
            data["company"] = this.company !== undefined ? this.company : null;
            data["email"] = this.email !== undefined ? this.email : null;
            data["location"] = this.location !== undefined ? this.location : null;
            data["name"] = this.name !== undefined ? this.name : null;
            return data;
        };
        return PatchOrg;
    }());
    GithubApiClient.PatchOrg = PatchOrg;
    var PostComment = /** @class */ (function () {
        function PostComment(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        PostComment.prototype.init = function (data) {
            if (data) {
                this.body = data["body"] !== undefined ? data["body"] : null;
            }
        };
        PostComment.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new PostComment();
            result.init(data);
            return result;
        };
        PostComment.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["body"] = this.body !== undefined ? this.body : null;
            return data;
        };
        return PostComment;
    }());
    GithubApiClient.PostComment = PostComment;
    var PostGist = /** @class */ (function () {
        function PostGist(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        PostGist.prototype.init = function (data) {
            if (data) {
                this.description = data["description"] !== undefined ? data["description"] : null;
                this.files = data["files"] ? Files5.fromJS(data["files"]) : null;
                this.public = data["public"] !== undefined ? data["public"] : null;
            }
        };
        PostGist.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new PostGist();
            result.init(data);
            return result;
        };
        PostGist.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["description"] = this.description !== undefined ? this.description : null;
            data["files"] = this.files ? this.files.toJSON() : null;
            data["public"] = this.public !== undefined ? this.public : null;
            return data;
        };
        return PostGist;
    }());
    GithubApiClient.PostGist = PostGist;
    var PostRepo = /** @class */ (function () {
        function PostRepo(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        PostRepo.prototype.init = function (data) {
            if (data) {
                this.auto_init = data["auto_init"] !== undefined ? data["auto_init"] : null;
                this.description = data["description"] !== undefined ? data["description"] : null;
                this.gitignore_template = data["gitignore_template"] !== undefined ? data["gitignore_template"] : null;
                this.has_downloads = data["has_downloads"] !== undefined ? data["has_downloads"] : null;
                this.has_issues = data["has_issues"] !== undefined ? data["has_issues"] : null;
                this.has_wiki = data["has_wiki"] !== undefined ? data["has_wiki"] : null;
                this.homepage = data["homepage"] !== undefined ? data["homepage"] : null;
                this.name = data["name"] !== undefined ? data["name"] : null;
                this.private = data["private"] !== undefined ? data["private"] : null;
                this.team_id = data["team_id"] !== undefined ? data["team_id"] : null;
            }
        };
        PostRepo.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new PostRepo();
            result.init(data);
            return result;
        };
        PostRepo.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["auto_init"] = this.auto_init !== undefined ? this.auto_init : null;
            data["description"] = this.description !== undefined ? this.description : null;
            data["gitignore_template"] = this.gitignore_template !== undefined ? this.gitignore_template : null;
            data["has_downloads"] = this.has_downloads !== undefined ? this.has_downloads : null;
            data["has_issues"] = this.has_issues !== undefined ? this.has_issues : null;
            data["has_wiki"] = this.has_wiki !== undefined ? this.has_wiki : null;
            data["homepage"] = this.homepage !== undefined ? this.homepage : null;
            data["name"] = this.name !== undefined ? this.name : null;
            data["private"] = this.private !== undefined ? this.private : null;
            data["team_id"] = this.team_id !== undefined ? this.team_id : null;
            return data;
        };
        return PostRepo;
    }());
    GithubApiClient.PostRepo = PostRepo;
    var PullRequest = /** @class */ (function () {
        function PullRequest(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        PullRequest.prototype.init = function (data) {
            if (data) {
                this._links = data["_links"] ? _links4.fromJS(data["_links"]) : null;
                this.additions = data["additions"] !== undefined ? data["additions"] : null;
                this.base = data["base"] ? Base.fromJS(data["base"]) : null;
                this.body = data["body"] !== undefined ? data["body"] : null;
                this.changed_files = data["changed_files"] !== undefined ? data["changed_files"] : null;
                this.closed_at = data["closed_at"] !== undefined ? data["closed_at"] : null;
                this.comments = data["comments"] !== undefined ? data["comments"] : null;
                this.commits = data["commits"] !== undefined ? data["commits"] : null;
                this.created_at = data["created_at"] !== undefined ? data["created_at"] : null;
                this.deletions = data["deletions"] !== undefined ? data["deletions"] : null;
                this.diff_url = data["diff_url"] !== undefined ? data["diff_url"] : null;
                this.head = data["head"] ? Head.fromJS(data["head"]) : null;
                this.html_url = data["html_url"] !== undefined ? data["html_url"] : null;
                this.issue_url = data["issue_url"] !== undefined ? data["issue_url"] : null;
                this.merge_commit_sha = data["merge_commit_sha"] !== undefined ? data["merge_commit_sha"] : null;
                this.mergeable = data["mergeable"] !== undefined ? data["mergeable"] : null;
                this.merged = data["merged"] !== undefined ? data["merged"] : null;
                this.merged_at = data["merged_at"] !== undefined ? data["merged_at"] : null;
                this.merged_by = data["merged_by"] ? Merged_by.fromJS(data["merged_by"]) : null;
                this.number = data["number"] !== undefined ? data["number"] : null;
                this.patch_url = data["patch_url"] !== undefined ? data["patch_url"] : null;
                this.state = data["state"] !== undefined ? data["state"] : null;
                this.title = data["title"] !== undefined ? data["title"] : null;
                this.updated_at = data["updated_at"] !== undefined ? data["updated_at"] : null;
                this.url = data["url"] !== undefined ? data["url"] : null;
                this.user = data["user"] ? User5.fromJS(data["user"]) : null;
            }
        };
        PullRequest.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new PullRequest();
            result.init(data);
            return result;
        };
        PullRequest.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["_links"] = this._links ? this._links.toJSON() : null;
            data["additions"] = this.additions !== undefined ? this.additions : null;
            data["base"] = this.base ? this.base.toJSON() : null;
            data["body"] = this.body !== undefined ? this.body : null;
            data["changed_files"] = this.changed_files !== undefined ? this.changed_files : null;
            data["closed_at"] = this.closed_at !== undefined ? this.closed_at : null;
            data["comments"] = this.comments !== undefined ? this.comments : null;
            data["commits"] = this.commits !== undefined ? this.commits : null;
            data["created_at"] = this.created_at !== undefined ? this.created_at : null;
            data["deletions"] = this.deletions !== undefined ? this.deletions : null;
            data["diff_url"] = this.diff_url !== undefined ? this.diff_url : null;
            data["head"] = this.head ? this.head.toJSON() : null;
            data["html_url"] = this.html_url !== undefined ? this.html_url : null;
            data["issue_url"] = this.issue_url !== undefined ? this.issue_url : null;
            data["merge_commit_sha"] = this.merge_commit_sha !== undefined ? this.merge_commit_sha : null;
            data["mergeable"] = this.mergeable !== undefined ? this.mergeable : null;
            data["merged"] = this.merged !== undefined ? this.merged : null;
            data["merged_at"] = this.merged_at !== undefined ? this.merged_at : null;
            data["merged_by"] = this.merged_by ? this.merged_by.toJSON() : null;
            data["number"] = this.number !== undefined ? this.number : null;
            data["patch_url"] = this.patch_url !== undefined ? this.patch_url : null;
            data["state"] = this.state !== undefined ? this.state : null;
            data["title"] = this.title !== undefined ? this.title : null;
            data["updated_at"] = this.updated_at !== undefined ? this.updated_at : null;
            data["url"] = this.url !== undefined ? this.url : null;
            data["user"] = this.user ? this.user.toJSON() : null;
            return data;
        };
        return PullRequest;
    }());
    GithubApiClient.PullRequest = PullRequest;
    var PullUpdate = /** @class */ (function () {
        function PullUpdate(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        PullUpdate.prototype.init = function (data) {
            if (data) {
                this.body = data["body"] !== undefined ? data["body"] : null;
                this.state = data["state"] !== undefined ? data["state"] : null;
                this.title = data["title"] !== undefined ? data["title"] : null;
            }
        };
        PullUpdate.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new PullUpdate();
            result.init(data);
            return result;
        };
        PullUpdate.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["body"] = this.body !== undefined ? this.body : null;
            data["state"] = this.state !== undefined ? this.state : null;
            data["title"] = this.title !== undefined ? this.title : null;
            return data;
        };
        return PullUpdate;
    }());
    GithubApiClient.PullUpdate = PullUpdate;
    var PullsComment = /** @class */ (function () {
        function PullsComment(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        PullsComment.prototype.init = function (data) {
            if (data) {
                this._links = data["_links"] ? _links5.fromJS(data["_links"]) : null;
                this.body = data["body"] !== undefined ? data["body"] : null;
                this.commit_id = data["commit_id"] !== undefined ? data["commit_id"] : null;
                this.created_at = data["created_at"] !== undefined ? data["created_at"] : null;
                this.id = data["id"] !== undefined ? data["id"] : null;
                this.path = data["path"] !== undefined ? data["path"] : null;
                this.position = data["position"] !== undefined ? data["position"] : null;
                this.updated_at = data["updated_at"] !== undefined ? data["updated_at"] : null;
                this.url = data["url"] !== undefined ? data["url"] : null;
                this.user = data["user"] ? User6.fromJS(data["user"]) : null;
            }
        };
        PullsComment.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new PullsComment();
            result.init(data);
            return result;
        };
        PullsComment.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["_links"] = this._links ? this._links.toJSON() : null;
            data["body"] = this.body !== undefined ? this.body : null;
            data["commit_id"] = this.commit_id !== undefined ? this.commit_id : null;
            data["created_at"] = this.created_at !== undefined ? this.created_at : null;
            data["id"] = this.id !== undefined ? this.id : null;
            data["path"] = this.path !== undefined ? this.path : null;
            data["position"] = this.position !== undefined ? this.position : null;
            data["updated_at"] = this.updated_at !== undefined ? this.updated_at : null;
            data["url"] = this.url !== undefined ? this.url : null;
            data["user"] = this.user ? this.user.toJSON() : null;
            return data;
        };
        return PullsComment;
    }());
    GithubApiClient.PullsComment = PullsComment;
    var PullsCommentPost = /** @class */ (function () {
        function PullsCommentPost(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        PullsCommentPost.prototype.init = function (data) {
            if (data) {
                this.body = data["body"] !== undefined ? data["body"] : null;
                this.commit_id = data["commit_id"] !== undefined ? data["commit_id"] : null;
                this.path = data["path"] !== undefined ? data["path"] : null;
                this.position = data["position"] !== undefined ? data["position"] : null;
            }
        };
        PullsCommentPost.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new PullsCommentPost();
            result.init(data);
            return result;
        };
        PullsCommentPost.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["body"] = this.body !== undefined ? this.body : null;
            data["commit_id"] = this.commit_id !== undefined ? this.commit_id : null;
            data["path"] = this.path !== undefined ? this.path : null;
            data["position"] = this.position !== undefined ? this.position : null;
            return data;
        };
        return PullsCommentPost;
    }());
    GithubApiClient.PullsCommentPost = PullsCommentPost;
    var PullsPost = /** @class */ (function () {
        function PullsPost(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        PullsPost.prototype.init = function (data) {
            if (data) {
                this.base = data["base"] !== undefined ? data["base"] : null;
                this.body = data["body"] !== undefined ? data["body"] : null;
                this.head = data["head"] !== undefined ? data["head"] : null;
                this.title = data["title"] !== undefined ? data["title"] : null;
            }
        };
        PullsPost.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new PullsPost();
            result.init(data);
            return result;
        };
        PullsPost.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["base"] = this.base !== undefined ? this.base : null;
            data["body"] = this.body !== undefined ? this.body : null;
            data["head"] = this.head !== undefined ? this.head : null;
            data["title"] = this.title !== undefined ? this.title : null;
            return data;
        };
        return PullsPost;
    }());
    GithubApiClient.PullsPost = PullsPost;
    var PutSubscription = /** @class */ (function () {
        function PutSubscription(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        PutSubscription.prototype.init = function (data) {
            if (data) {
                this.created_at = data["created_at"] !== undefined ? data["created_at"] : null;
                this.ignored = data["ignored"] !== undefined ? data["ignored"] : null;
                if (data["reason"]) {
                    this.reason = {};
                    for (var key in data["reason"]) {
                        if (data["reason"].hasOwnProperty(key))
                            this.reason[key] = data["reason"][key];
                    }
                }
                this.subscribed = data["subscribed"] !== undefined ? data["subscribed"] : null;
                this.thread_url = data["thread_url"] !== undefined ? data["thread_url"] : null;
                this.url = data["url"] !== undefined ? data["url"] : null;
            }
        };
        PutSubscription.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new PutSubscription();
            result.init(data);
            return result;
        };
        PutSubscription.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["created_at"] = this.created_at !== undefined ? this.created_at : null;
            data["ignored"] = this.ignored !== undefined ? this.ignored : null;
            if (this.reason) {
                data["reason"] = {};
                for (var key in this.reason) {
                    if (this.reason.hasOwnProperty(key))
                        data["reason"][key] = this.reason[key] !== undefined ? this.reason[key] : null;
                }
            }
            data["subscribed"] = this.subscribed !== undefined ? this.subscribed : null;
            data["thread_url"] = this.thread_url !== undefined ? this.thread_url : null;
            data["url"] = this.url !== undefined ? this.url : null;
            return data;
        };
        return PutSubscription;
    }());
    GithubApiClient.PutSubscription = PutSubscription;
    var Rate_limit = /** @class */ (function () {
        function Rate_limit(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Rate_limit.prototype.init = function (data) {
            if (data) {
                this.rate = data["rate"] ? Rate.fromJS(data["rate"]) : null;
            }
        };
        Rate_limit.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Rate_limit();
            result.init(data);
            return result;
        };
        Rate_limit.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["rate"] = this.rate ? this.rate.toJSON() : null;
            return data;
        };
        return Rate_limit;
    }());
    GithubApiClient.Rate_limit = Rate_limit;
    var Readme = /** @class */ (function () {
        function Readme(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Readme.prototype.init = function (data) {
            if (data) {
                this._links = data["_links"] ? _links6.fromJS(data["_links"]) : null;
                this.content = data["content"] !== undefined ? data["content"] : null;
                this.encoding = data["encoding"] !== undefined ? data["encoding"] : null;
                this.git_url = data["git_url"] !== undefined ? data["git_url"] : null;
                this.html_url = data["html_url"] !== undefined ? data["html_url"] : null;
                this.name = data["name"] !== undefined ? data["name"] : null;
                this.path = data["path"] !== undefined ? data["path"] : null;
                this.sha = data["sha"] !== undefined ? data["sha"] : null;
                this.size = data["size"] !== undefined ? data["size"] : null;
                this.type = data["type"] !== undefined ? data["type"] : null;
                this.url = data["url"] !== undefined ? data["url"] : null;
            }
        };
        Readme.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Readme();
            result.init(data);
            return result;
        };
        Readme.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["_links"] = this._links ? this._links.toJSON() : null;
            data["content"] = this.content !== undefined ? this.content : null;
            data["encoding"] = this.encoding !== undefined ? this.encoding : null;
            data["git_url"] = this.git_url !== undefined ? this.git_url : null;
            data["html_url"] = this.html_url !== undefined ? this.html_url : null;
            data["name"] = this.name !== undefined ? this.name : null;
            data["path"] = this.path !== undefined ? this.path : null;
            data["sha"] = this.sha !== undefined ? this.sha : null;
            data["size"] = this.size !== undefined ? this.size : null;
            data["type"] = this.type !== undefined ? this.type : null;
            data["url"] = this.url !== undefined ? this.url : null;
            return data;
        };
        return Readme;
    }());
    GithubApiClient.Readme = Readme;
    var RefBody = /** @class */ (function () {
        function RefBody(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        RefBody.prototype.init = function (data) {
            if (data) {
                this.object = data["object"] ? Object2.fromJS(data["object"]) : null;
                this.ref = data["ref"] !== undefined ? data["ref"] : null;
                this.url = data["url"] !== undefined ? data["url"] : null;
            }
        };
        RefBody.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new RefBody();
            result.init(data);
            return result;
        };
        RefBody.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["object"] = this.object ? this.object.toJSON() : null;
            data["ref"] = this.ref !== undefined ? this.ref : null;
            data["url"] = this.url !== undefined ? this.url : null;
            return data;
        };
        return RefBody;
    }());
    GithubApiClient.RefBody = RefBody;
    var RefsBody = /** @class */ (function () {
        function RefsBody(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        RefsBody.prototype.init = function (data) {
            if (data) {
                this.ref = data["ref"] !== undefined ? data["ref"] : null;
                this.sha = data["sha"] !== undefined ? data["sha"] : null;
            }
        };
        RefsBody.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new RefsBody();
            result.init(data);
            return result;
        };
        RefsBody.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["ref"] = this.ref !== undefined ? this.ref : null;
            data["sha"] = this.sha !== undefined ? this.sha : null;
            return data;
        };
        return RefsBody;
    }());
    GithubApiClient.RefsBody = RefsBody;
    var Release = /** @class */ (function () {
        function Release(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Release.prototype.init = function (data) {
            if (data) {
                if (data["assets"] && data["assets"].constructor === Array) {
                    this.assets = [];
                    for (var _i = 0, _a = data["assets"]; _i < _a.length; _i++) {
                        var item = _a[_i];
                        this.assets.push(Assets.fromJS(item));
                    }
                }
                this.assets_url = data["assets_url"] !== undefined ? data["assets_url"] : null;
                this.author = data["author"] ? Author4.fromJS(data["author"]) : null;
                this.body = data["body"] !== undefined ? data["body"] : null;
                this.created_at = data["created_at"] !== undefined ? data["created_at"] : null;
                this.draft = data["draft"] !== undefined ? data["draft"] : null;
                this.html_url = data["html_url"] !== undefined ? data["html_url"] : null;
                this.id = data["id"] !== undefined ? data["id"] : null;
                this.name = data["name"] !== undefined ? data["name"] : null;
                this.prerelease = data["prerelease"] !== undefined ? data["prerelease"] : null;
                this.published_at = data["published_at"] !== undefined ? data["published_at"] : null;
                this.tag_name = data["tag_name"] !== undefined ? data["tag_name"] : null;
                this.tarball_url = data["tarball_url"] !== undefined ? data["tarball_url"] : null;
                this.target_commitish = data["target_commitish"] !== undefined ? data["target_commitish"] : null;
                this.upload_url = data["upload_url"] !== undefined ? data["upload_url"] : null;
                this.url = data["url"] !== undefined ? data["url"] : null;
                this.zipball_url = data["zipball_url"] !== undefined ? data["zipball_url"] : null;
            }
        };
        Release.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Release();
            result.init(data);
            return result;
        };
        Release.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            if (this.assets && this.assets.constructor === Array) {
                data["assets"] = [];
                for (var _i = 0, _a = this.assets; _i < _a.length; _i++) {
                    var item = _a[_i];
                    data["assets"].push(item.toJSON());
                }
            }
            data["assets_url"] = this.assets_url !== undefined ? this.assets_url : null;
            data["author"] = this.author ? this.author.toJSON() : null;
            data["body"] = this.body !== undefined ? this.body : null;
            data["created_at"] = this.created_at !== undefined ? this.created_at : null;
            data["draft"] = this.draft !== undefined ? this.draft : null;
            data["html_url"] = this.html_url !== undefined ? this.html_url : null;
            data["id"] = this.id !== undefined ? this.id : null;
            data["name"] = this.name !== undefined ? this.name : null;
            data["prerelease"] = this.prerelease !== undefined ? this.prerelease : null;
            data["published_at"] = this.published_at !== undefined ? this.published_at : null;
            data["tag_name"] = this.tag_name !== undefined ? this.tag_name : null;
            data["tarball_url"] = this.tarball_url !== undefined ? this.tarball_url : null;
            data["target_commitish"] = this.target_commitish !== undefined ? this.target_commitish : null;
            data["upload_url"] = this.upload_url !== undefined ? this.upload_url : null;
            data["url"] = this.url !== undefined ? this.url : null;
            data["zipball_url"] = this.zipball_url !== undefined ? this.zipball_url : null;
            return data;
        };
        return Release;
    }());
    GithubApiClient.Release = Release;
    var ReleaseCreate = /** @class */ (function () {
        function ReleaseCreate(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        ReleaseCreate.prototype.init = function (data) {
            if (data) {
                this.body = data["body"] !== undefined ? data["body"] : null;
                this.draft = data["draft"] !== undefined ? data["draft"] : null;
                this.name = data["name"] !== undefined ? data["name"] : null;
                this.prerelease = data["prerelease"] !== undefined ? data["prerelease"] : null;
                this.tag_name = data["tag_name"] !== undefined ? data["tag_name"] : null;
                this.target_commitish = data["target_commitish"] !== undefined ? data["target_commitish"] : null;
            }
        };
        ReleaseCreate.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new ReleaseCreate();
            result.init(data);
            return result;
        };
        ReleaseCreate.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["body"] = this.body !== undefined ? this.body : null;
            data["draft"] = this.draft !== undefined ? this.draft : null;
            data["name"] = this.name !== undefined ? this.name : null;
            data["prerelease"] = this.prerelease !== undefined ? this.prerelease : null;
            data["tag_name"] = this.tag_name !== undefined ? this.tag_name : null;
            data["target_commitish"] = this.target_commitish !== undefined ? this.target_commitish : null;
            return data;
        };
        return ReleaseCreate;
    }());
    GithubApiClient.ReleaseCreate = ReleaseCreate;
    var Repo = /** @class */ (function () {
        function Repo(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Repo.prototype.init = function (data) {
            if (data) {
                this.clone_url = data["clone_url"] !== undefined ? data["clone_url"] : null;
                this.created_at = data["created_at"] !== undefined ? data["created_at"] : null;
                this.description = data["description"] !== undefined ? data["description"] : null;
                this.fork = data["fork"] !== undefined ? data["fork"] : null;
                this.forks = data["forks"] !== undefined ? data["forks"] : null;
                this.forks_count = data["forks_count"] !== undefined ? data["forks_count"] : null;
                this.full_name = data["full_name"] !== undefined ? data["full_name"] : null;
                this.git_url = data["git_url"] !== undefined ? data["git_url"] : null;
                this.has_downloads = data["has_downloads"] !== undefined ? data["has_downloads"] : null;
                this.has_issues = data["has_issues"] !== undefined ? data["has_issues"] : null;
                this.has_wiki = data["has_wiki"] !== undefined ? data["has_wiki"] : null;
                this.homepage = data["homepage"] !== undefined ? data["homepage"] : null;
                this.html_url = data["html_url"] !== undefined ? data["html_url"] : null;
                this.id = data["id"] !== undefined ? data["id"] : null;
                this.language = data["language"] !== undefined ? data["language"] : null;
                this.master_branch = data["master_branch"] !== undefined ? data["master_branch"] : null;
                this.mirror_url = data["mirror_url"] !== undefined ? data["mirror_url"] : null;
                this.name = data["name"] !== undefined ? data["name"] : null;
                this.open_issues = data["open_issues"] !== undefined ? data["open_issues"] : null;
                this.open_issues_count = data["open_issues_count"] !== undefined ? data["open_issues_count"] : null;
                this.organization = data["organization"] ? Organization2.fromJS(data["organization"]) : null;
                this.owner = data["owner"] ? Owner2.fromJS(data["owner"]) : null;
                this.parent = data["parent"] ? Parent.fromJS(data["parent"]) : null;
                this.private = data["private"] !== undefined ? data["private"] : null;
                this.pushed_at = data["pushed_at"] !== undefined ? data["pushed_at"] : null;
                this.size = data["size"] !== undefined ? data["size"] : null;
                this.source = data["source"] ? Source.fromJS(data["source"]) : null;
                this.ssh_url = data["ssh_url"] !== undefined ? data["ssh_url"] : null;
                this.svn_url = data["svn_url"] !== undefined ? data["svn_url"] : null;
                this.updated_at = data["updated_at"] !== undefined ? data["updated_at"] : null;
                this.url = data["url"] !== undefined ? data["url"] : null;
                this.watchers = data["watchers"] !== undefined ? data["watchers"] : null;
                this.watchers_count = data["watchers_count"] !== undefined ? data["watchers_count"] : null;
            }
        };
        Repo.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Repo();
            result.init(data);
            return result;
        };
        Repo.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["clone_url"] = this.clone_url !== undefined ? this.clone_url : null;
            data["created_at"] = this.created_at !== undefined ? this.created_at : null;
            data["description"] = this.description !== undefined ? this.description : null;
            data["fork"] = this.fork !== undefined ? this.fork : null;
            data["forks"] = this.forks !== undefined ? this.forks : null;
            data["forks_count"] = this.forks_count !== undefined ? this.forks_count : null;
            data["full_name"] = this.full_name !== undefined ? this.full_name : null;
            data["git_url"] = this.git_url !== undefined ? this.git_url : null;
            data["has_downloads"] = this.has_downloads !== undefined ? this.has_downloads : null;
            data["has_issues"] = this.has_issues !== undefined ? this.has_issues : null;
            data["has_wiki"] = this.has_wiki !== undefined ? this.has_wiki : null;
            data["homepage"] = this.homepage !== undefined ? this.homepage : null;
            data["html_url"] = this.html_url !== undefined ? this.html_url : null;
            data["id"] = this.id !== undefined ? this.id : null;
            data["language"] = this.language !== undefined ? this.language : null;
            data["master_branch"] = this.master_branch !== undefined ? this.master_branch : null;
            data["mirror_url"] = this.mirror_url !== undefined ? this.mirror_url : null;
            data["name"] = this.name !== undefined ? this.name : null;
            data["open_issues"] = this.open_issues !== undefined ? this.open_issues : null;
            data["open_issues_count"] = this.open_issues_count !== undefined ? this.open_issues_count : null;
            data["organization"] = this.organization ? this.organization.toJSON() : null;
            data["owner"] = this.owner ? this.owner.toJSON() : null;
            data["parent"] = this.parent ? this.parent.toJSON() : null;
            data["private"] = this.private !== undefined ? this.private : null;
            data["pushed_at"] = this.pushed_at !== undefined ? this.pushed_at : null;
            data["size"] = this.size !== undefined ? this.size : null;
            data["source"] = this.source ? this.source.toJSON() : null;
            data["ssh_url"] = this.ssh_url !== undefined ? this.ssh_url : null;
            data["svn_url"] = this.svn_url !== undefined ? this.svn_url : null;
            data["updated_at"] = this.updated_at !== undefined ? this.updated_at : null;
            data["url"] = this.url !== undefined ? this.url : null;
            data["watchers"] = this.watchers !== undefined ? this.watchers : null;
            data["watchers_count"] = this.watchers_count !== undefined ? this.watchers_count : null;
            return data;
        };
        return Repo;
    }());
    GithubApiClient.Repo = Repo;
    var RepoCommit = /** @class */ (function () {
        function RepoCommit(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        RepoCommit.prototype.init = function (data) {
            if (data) {
                this.author = data["author"] ? Author5.fromJS(data["author"]) : null;
                this.committer = data["committer"] ? Committer5.fromJS(data["committer"]) : null;
                this.message = data["message"] !== undefined ? data["message"] : null;
                if (data["parents"] && data["parents"].constructor === Array) {
                    this.parents = [];
                    for (var _i = 0, _a = data["parents"]; _i < _a.length; _i++) {
                        var item = _a[_i];
                        this.parents.push(Parents3.fromJS(item));
                    }
                }
                this.sha = data["sha"] !== undefined ? data["sha"] : null;
                this.tree = data["tree"] ? Tree2.fromJS(data["tree"]) : null;
                this.url = data["url"] !== undefined ? data["url"] : null;
            }
        };
        RepoCommit.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new RepoCommit();
            result.init(data);
            return result;
        };
        RepoCommit.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["author"] = this.author ? this.author.toJSON() : null;
            data["committer"] = this.committer ? this.committer.toJSON() : null;
            data["message"] = this.message !== undefined ? this.message : null;
            if (this.parents && this.parents.constructor === Array) {
                data["parents"] = [];
                for (var _i = 0, _a = this.parents; _i < _a.length; _i++) {
                    var item = _a[_i];
                    data["parents"].push(item.toJSON());
                }
            }
            data["sha"] = this.sha !== undefined ? this.sha : null;
            data["tree"] = this.tree ? this.tree.toJSON() : null;
            data["url"] = this.url !== undefined ? this.url : null;
            return data;
        };
        return RepoCommit;
    }());
    GithubApiClient.RepoCommit = RepoCommit;
    var RepoCommitBody = /** @class */ (function () {
        function RepoCommitBody(data) {
            this.parents = [];
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        RepoCommitBody.prototype.init = function (data) {
            if (data) {
                this.author = data["author"] ? Author6.fromJS(data["author"]) : null;
                this.message = data["message"] !== undefined ? data["message"] : null;
                if (data["parents"] && data["parents"].constructor === Array) {
                    this.parents = [];
                    for (var _i = 0, _a = data["parents"]; _i < _a.length; _i++) {
                        var item = _a[_i];
                        this.parents.push(item);
                    }
                }
                this.tree = data["tree"] !== undefined ? data["tree"] : null;
            }
        };
        RepoCommitBody.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new RepoCommitBody();
            result.init(data);
            return result;
        };
        RepoCommitBody.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["author"] = this.author ? this.author.toJSON() : null;
            data["message"] = this.message !== undefined ? this.message : null;
            if (this.parents && this.parents.constructor === Array) {
                data["parents"] = [];
                for (var _i = 0, _a = this.parents; _i < _a.length; _i++) {
                    var item = _a[_i];
                    data["parents"].push(item);
                }
            }
            data["tree"] = this.tree !== undefined ? this.tree : null;
            return data;
        };
        return RepoCommitBody;
    }());
    GithubApiClient.RepoCommitBody = RepoCommitBody;
    var RepoEdit = /** @class */ (function () {
        function RepoEdit(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        RepoEdit.prototype.init = function (data) {
            if (data) {
                this.description = data["description"] !== undefined ? data["description"] : null;
                this.has_downloads = data["has_downloads"] !== undefined ? data["has_downloads"] : null;
                this.has_issues = data["has_issues"] !== undefined ? data["has_issues"] : null;
                this.has_wiki = data["has_wiki"] !== undefined ? data["has_wiki"] : null;
                this.homepage = data["homepage"] !== undefined ? data["homepage"] : null;
                this.name = data["name"] !== undefined ? data["name"] : null;
                this.private = data["private"] !== undefined ? data["private"] : null;
            }
        };
        RepoEdit.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new RepoEdit();
            result.init(data);
            return result;
        };
        RepoEdit.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["description"] = this.description !== undefined ? this.description : null;
            data["has_downloads"] = this.has_downloads !== undefined ? this.has_downloads : null;
            data["has_issues"] = this.has_issues !== undefined ? this.has_issues : null;
            data["has_wiki"] = this.has_wiki !== undefined ? this.has_wiki : null;
            data["homepage"] = this.homepage !== undefined ? this.homepage : null;
            data["name"] = this.name !== undefined ? this.name : null;
            data["private"] = this.private !== undefined ? this.private : null;
            return data;
        };
        return RepoEdit;
    }());
    GithubApiClient.RepoEdit = RepoEdit;
    var SearchCode = /** @class */ (function () {
        function SearchCode(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        SearchCode.prototype.init = function (data) {
            if (data) {
                if (data["items"] && data["items"].constructor === Array) {
                    this.items = [];
                    for (var _i = 0, _a = data["items"]; _i < _a.length; _i++) {
                        var item = _a[_i];
                        this.items.push(Items.fromJS(item));
                    }
                }
                this.total_count = data["total_count"] !== undefined ? data["total_count"] : null;
            }
        };
        SearchCode.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new SearchCode();
            result.init(data);
            return result;
        };
        SearchCode.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            if (this.items && this.items.constructor === Array) {
                data["items"] = [];
                for (var _i = 0, _a = this.items; _i < _a.length; _i++) {
                    var item = _a[_i];
                    data["items"].push(item.toJSON());
                }
            }
            data["total_count"] = this.total_count !== undefined ? this.total_count : null;
            return data;
        };
        return SearchCode;
    }());
    GithubApiClient.SearchCode = SearchCode;
    var SearchIssues = /** @class */ (function () {
        function SearchIssues(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        SearchIssues.prototype.init = function (data) {
            if (data) {
                if (data["items"] && data["items"].constructor === Array) {
                    this.items = [];
                    for (var _i = 0, _a = data["items"]; _i < _a.length; _i++) {
                        var item = _a[_i];
                        this.items.push(Items2.fromJS(item));
                    }
                }
                this.total_count = data["total_count"] !== undefined ? data["total_count"] : null;
            }
        };
        SearchIssues.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new SearchIssues();
            result.init(data);
            return result;
        };
        SearchIssues.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            if (this.items && this.items.constructor === Array) {
                data["items"] = [];
                for (var _i = 0, _a = this.items; _i < _a.length; _i++) {
                    var item = _a[_i];
                    data["items"].push(item.toJSON());
                }
            }
            data["total_count"] = this.total_count !== undefined ? this.total_count : null;
            return data;
        };
        return SearchIssues;
    }());
    GithubApiClient.SearchIssues = SearchIssues;
    var SearchIssuesByKeyword = /** @class */ (function () {
        function SearchIssuesByKeyword(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        SearchIssuesByKeyword.prototype.init = function (data) {
            if (data) {
                if (data["issues"] && data["issues"].constructor === Array) {
                    this.issues = [];
                    for (var _i = 0, _a = data["issues"]; _i < _a.length; _i++) {
                        var item = _a[_i];
                        this.issues.push(Issues.fromJS(item));
                    }
                }
            }
        };
        SearchIssuesByKeyword.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new SearchIssuesByKeyword();
            result.init(data);
            return result;
        };
        SearchIssuesByKeyword.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            if (this.issues && this.issues.constructor === Array) {
                data["issues"] = [];
                for (var _i = 0, _a = this.issues; _i < _a.length; _i++) {
                    var item = _a[_i];
                    data["issues"].push(item.toJSON());
                }
            }
            return data;
        };
        return SearchIssuesByKeyword;
    }());
    GithubApiClient.SearchIssuesByKeyword = SearchIssuesByKeyword;
    var SearchRepositories = /** @class */ (function () {
        function SearchRepositories(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        SearchRepositories.prototype.init = function (data) {
            if (data) {
                if (data["items"] && data["items"].constructor === Array) {
                    this.items = [];
                    for (var _i = 0, _a = data["items"]; _i < _a.length; _i++) {
                        var item = _a[_i];
                        this.items.push(Items3.fromJS(item));
                    }
                }
                this.total_count = data["total_count"] !== undefined ? data["total_count"] : null;
            }
        };
        SearchRepositories.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new SearchRepositories();
            result.init(data);
            return result;
        };
        SearchRepositories.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            if (this.items && this.items.constructor === Array) {
                data["items"] = [];
                for (var _i = 0, _a = this.items; _i < _a.length; _i++) {
                    var item = _a[_i];
                    data["items"].push(item.toJSON());
                }
            }
            data["total_count"] = this.total_count !== undefined ? this.total_count : null;
            return data;
        };
        return SearchRepositories;
    }());
    GithubApiClient.SearchRepositories = SearchRepositories;
    var SearchRepositoriesByKeyword = /** @class */ (function () {
        function SearchRepositoriesByKeyword(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        SearchRepositoriesByKeyword.prototype.init = function (data) {
            if (data) {
                if (data["repositories"] && data["repositories"].constructor === Array) {
                    this.repositories = [];
                    for (var _i = 0, _a = data["repositories"]; _i < _a.length; _i++) {
                        var item = _a[_i];
                        this.repositories.push(Repositories.fromJS(item));
                    }
                }
            }
        };
        SearchRepositoriesByKeyword.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new SearchRepositoriesByKeyword();
            result.init(data);
            return result;
        };
        SearchRepositoriesByKeyword.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            if (this.repositories && this.repositories.constructor === Array) {
                data["repositories"] = [];
                for (var _i = 0, _a = this.repositories; _i < _a.length; _i++) {
                    var item = _a[_i];
                    data["repositories"].push(item.toJSON());
                }
            }
            return data;
        };
        return SearchRepositoriesByKeyword;
    }());
    GithubApiClient.SearchRepositoriesByKeyword = SearchRepositoriesByKeyword;
    var SearchUserByEmail = /** @class */ (function () {
        function SearchUserByEmail(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        SearchUserByEmail.prototype.init = function (data) {
            if (data) {
                this.user = data["user"] ? User7.fromJS(data["user"]) : null;
            }
        };
        SearchUserByEmail.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new SearchUserByEmail();
            result.init(data);
            return result;
        };
        SearchUserByEmail.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["user"] = this.user ? this.user.toJSON() : null;
            return data;
        };
        return SearchUserByEmail;
    }());
    GithubApiClient.SearchUserByEmail = SearchUserByEmail;
    var SearchUsers = /** @class */ (function () {
        function SearchUsers(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        SearchUsers.prototype.init = function (data) {
            if (data) {
                if (data["items"] && data["items"].constructor === Array) {
                    this.items = [];
                    for (var _i = 0, _a = data["items"]; _i < _a.length; _i++) {
                        var item = _a[_i];
                        this.items.push(Items4.fromJS(item));
                    }
                }
                this.total_count = data["total_count"] !== undefined ? data["total_count"] : null;
            }
        };
        SearchUsers.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new SearchUsers();
            result.init(data);
            return result;
        };
        SearchUsers.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            if (this.items && this.items.constructor === Array) {
                data["items"] = [];
                for (var _i = 0, _a = this.items; _i < _a.length; _i++) {
                    var item = _a[_i];
                    data["items"].push(item.toJSON());
                }
            }
            data["total_count"] = this.total_count !== undefined ? this.total_count : null;
            return data;
        };
        return SearchUsers;
    }());
    GithubApiClient.SearchUsers = SearchUsers;
    var SearchUsersByKeyword = /** @class */ (function () {
        function SearchUsersByKeyword(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        SearchUsersByKeyword.prototype.init = function (data) {
            if (data) {
                if (data["users"] && data["users"].constructor === Array) {
                    this.users = [];
                    for (var _i = 0, _a = data["users"]; _i < _a.length; _i++) {
                        var item = _a[_i];
                        this.users.push(Users.fromJS(item));
                    }
                }
            }
        };
        SearchUsersByKeyword.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new SearchUsersByKeyword();
            result.init(data);
            return result;
        };
        SearchUsersByKeyword.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            if (this.users && this.users.constructor === Array) {
                data["users"] = [];
                for (var _i = 0, _a = this.users; _i < _a.length; _i++) {
                    var item = _a[_i];
                    data["users"].push(item.toJSON());
                }
            }
            return data;
        };
        return SearchUsersByKeyword;
    }());
    GithubApiClient.SearchUsersByKeyword = SearchUsersByKeyword;
    var Subscribition = /** @class */ (function () {
        function Subscribition(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Subscribition.prototype.init = function (data) {
            if (data) {
                this.created_at = data["created_at"] !== undefined ? data["created_at"] : null;
                this.ignored = data["ignored"] !== undefined ? data["ignored"] : null;
                this.reason = data["reason"] !== undefined ? data["reason"] : null;
                this.repository_url = data["repository_url"] !== undefined ? data["repository_url"] : null;
                this.subscribed = data["subscribed"] !== undefined ? data["subscribed"] : null;
                this.url = data["url"] !== undefined ? data["url"] : null;
            }
        };
        Subscribition.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Subscribition();
            result.init(data);
            return result;
        };
        Subscribition.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["created_at"] = this.created_at !== undefined ? this.created_at : null;
            data["ignored"] = this.ignored !== undefined ? this.ignored : null;
            data["reason"] = this.reason !== undefined ? this.reason : null;
            data["repository_url"] = this.repository_url !== undefined ? this.repository_url : null;
            data["subscribed"] = this.subscribed !== undefined ? this.subscribed : null;
            data["url"] = this.url !== undefined ? this.url : null;
            return data;
        };
        return Subscribition;
    }());
    GithubApiClient.Subscribition = Subscribition;
    var SubscribitionBody = /** @class */ (function () {
        function SubscribitionBody(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        SubscribitionBody.prototype.init = function (data) {
            if (data) {
                this.ignored = data["ignored"] !== undefined ? data["ignored"] : null;
                this.subscribed = data["subscribed"] !== undefined ? data["subscribed"] : null;
            }
        };
        SubscribitionBody.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new SubscribitionBody();
            result.init(data);
            return result;
        };
        SubscribitionBody.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["ignored"] = this.ignored !== undefined ? this.ignored : null;
            data["subscribed"] = this.subscribed !== undefined ? this.subscribed : null;
            return data;
        };
        return SubscribitionBody;
    }());
    GithubApiClient.SubscribitionBody = SubscribitionBody;
    var Subscription = /** @class */ (function () {
        function Subscription(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Subscription.prototype.init = function (data) {
            if (data) {
                this.created_at = data["created_at"] !== undefined ? data["created_at"] : null;
                this.ignored = data["ignored"] !== undefined ? data["ignored"] : null;
                this.reason = data["reason"] !== undefined ? data["reason"] : null;
                this.subscribed = data["subscribed"] !== undefined ? data["subscribed"] : null;
                this.thread_url = data["thread_url"] !== undefined ? data["thread_url"] : null;
                this.url = data["url"] !== undefined ? data["url"] : null;
            }
        };
        Subscription.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Subscription();
            result.init(data);
            return result;
        };
        Subscription.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["created_at"] = this.created_at !== undefined ? this.created_at : null;
            data["ignored"] = this.ignored !== undefined ? this.ignored : null;
            data["reason"] = this.reason !== undefined ? this.reason : null;
            data["subscribed"] = this.subscribed !== undefined ? this.subscribed : null;
            data["thread_url"] = this.thread_url !== undefined ? this.thread_url : null;
            data["url"] = this.url !== undefined ? this.url : null;
            return data;
        };
        return Subscription;
    }());
    GithubApiClient.Subscription = Subscription;
    var Tag = /** @class */ (function () {
        function Tag(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Tag.prototype.init = function (data) {
            if (data) {
                this.message = data["message"] !== undefined ? data["message"] : null;
                this.object = data["object"] ? Object3.fromJS(data["object"]) : null;
                this.sha = data["sha"] !== undefined ? data["sha"] : null;
                this.tag = data["tag"] !== undefined ? data["tag"] : null;
                this.tagger = data["tagger"] ? Tagger.fromJS(data["tagger"]) : null;
                this.url = data["url"] !== undefined ? data["url"] : null;
            }
        };
        Tag.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Tag();
            result.init(data);
            return result;
        };
        Tag.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["message"] = this.message !== undefined ? this.message : null;
            data["object"] = this.object ? this.object.toJSON() : null;
            data["sha"] = this.sha !== undefined ? this.sha : null;
            data["tag"] = this.tag !== undefined ? this.tag : null;
            data["tagger"] = this.tagger ? this.tagger.toJSON() : null;
            data["url"] = this.url !== undefined ? this.url : null;
            return data;
        };
        return Tag;
    }());
    GithubApiClient.Tag = Tag;
    var Tags = /** @class */ (function () {
        function Tags(data) {
            this.tagger = new Tagger2();
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Tags.prototype.init = function (data) {
            if (data) {
                this.message = data["message"] !== undefined ? data["message"] : null;
                this.object = data["object"] !== undefined ? data["object"] : null;
                this.tag = data["tag"] !== undefined ? data["tag"] : null;
                this.tagger = data["tagger"] ? Tagger2.fromJS(data["tagger"]) : new Tagger2();
                this.type = data["type"] !== undefined ? data["type"] : null;
            }
        };
        Tags.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Tags();
            result.init(data);
            return result;
        };
        Tags.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["message"] = this.message !== undefined ? this.message : null;
            data["object"] = this.object !== undefined ? this.object : null;
            data["tag"] = this.tag !== undefined ? this.tag : null;
            data["tagger"] = this.tagger ? this.tagger.toJSON() : null;
            data["type"] = this.type !== undefined ? this.type : null;
            return data;
        };
        return Tags;
    }());
    GithubApiClient.Tags = Tags;
    var Team = /** @class */ (function () {
        function Team(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Team.prototype.init = function (data) {
            if (data) {
                this.id = data["id"] !== undefined ? data["id"] : null;
                this.members_count = data["members_count"] !== undefined ? data["members_count"] : null;
                this.name = data["name"] !== undefined ? data["name"] : null;
                this.permission = data["permission"] !== undefined ? data["permission"] : null;
                this.repos_count = data["repos_count"] !== undefined ? data["repos_count"] : null;
                this.url = data["url"] !== undefined ? data["url"] : null;
            }
        };
        Team.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Team();
            result.init(data);
            return result;
        };
        Team.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["id"] = this.id !== undefined ? this.id : null;
            data["members_count"] = this.members_count !== undefined ? this.members_count : null;
            data["name"] = this.name !== undefined ? this.name : null;
            data["permission"] = this.permission !== undefined ? this.permission : null;
            data["repos_count"] = this.repos_count !== undefined ? this.repos_count : null;
            data["url"] = this.url !== undefined ? this.url : null;
            return data;
        };
        return Team;
    }());
    GithubApiClient.Team = Team;
    var TeamMembership = /** @class */ (function () {
        function TeamMembership(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        TeamMembership.prototype.init = function (data) {
            if (data) {
                this.state = data["state"] !== undefined ? data["state"] : null;
                this.url = data["url"] !== undefined ? data["url"] : null;
            }
        };
        TeamMembership.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new TeamMembership();
            result.init(data);
            return result;
        };
        TeamMembership.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["state"] = this.state !== undefined ? this.state : null;
            data["url"] = this.url !== undefined ? this.url : null;
            return data;
        };
        return TeamMembership;
    }());
    GithubApiClient.TeamMembership = TeamMembership;
    var Tree = /** @class */ (function () {
        function Tree(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Tree.prototype.init = function (data) {
            if (data) {
                this.sha = data["sha"] !== undefined ? data["sha"] : null;
                if (data["tree"] && data["tree"].constructor === Array) {
                    this.tree = [];
                    for (var _i = 0, _a = data["tree"]; _i < _a.length; _i++) {
                        var item = _a[_i];
                        this.tree.push(Tree3.fromJS(item));
                    }
                }
                this.url = data["url"] !== undefined ? data["url"] : null;
            }
        };
        Tree.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Tree();
            result.init(data);
            return result;
        };
        Tree.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["sha"] = this.sha !== undefined ? this.sha : null;
            if (this.tree && this.tree.constructor === Array) {
                data["tree"] = [];
                for (var _i = 0, _a = this.tree; _i < _a.length; _i++) {
                    var item = _a[_i];
                    data["tree"].push(item.toJSON());
                }
            }
            data["url"] = this.url !== undefined ? this.url : null;
            return data;
        };
        return Tree;
    }());
    GithubApiClient.Tree = Tree;
    var Trees = /** @class */ (function () {
        function Trees(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Trees.prototype.init = function (data) {
            if (data) {
                this.base_tree = data["base_tree"] !== undefined ? data["base_tree"] : null;
                this.sha = data["sha"] !== undefined ? data["sha"] : null;
                if (data["tree"] && data["tree"].constructor === Array) {
                    this.tree = [];
                    for (var _i = 0, _a = data["tree"]; _i < _a.length; _i++) {
                        var item = _a[_i];
                        this.tree.push(Tree4.fromJS(item));
                    }
                }
                this.url = data["url"] !== undefined ? data["url"] : null;
            }
        };
        Trees.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Trees();
            result.init(data);
            return result;
        };
        Trees.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["base_tree"] = this.base_tree !== undefined ? this.base_tree : null;
            data["sha"] = this.sha !== undefined ? this.sha : null;
            if (this.tree && this.tree.constructor === Array) {
                data["tree"] = [];
                for (var _i = 0, _a = this.tree; _i < _a.length; _i++) {
                    var item = _a[_i];
                    data["tree"].push(item.toJSON());
                }
            }
            data["url"] = this.url !== undefined ? this.url : null;
            return data;
        };
        return Trees;
    }());
    GithubApiClient.Trees = Trees;
    var User = /** @class */ (function () {
        function User(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        User.prototype.init = function (data) {
            if (data) {
                this.avatar_url = data["avatar_url"] !== undefined ? data["avatar_url"] : null;
                this.bio = data["bio"] !== undefined ? data["bio"] : null;
                this.blog = data["blog"] !== undefined ? data["blog"] : null;
                this.collaborators = data["collaborators"] !== undefined ? data["collaborators"] : null;
                this.company = data["company"] !== undefined ? data["company"] : null;
                this.created_at = data["created_at"] !== undefined ? data["created_at"] : null;
                this.disk_usage = data["disk_usage"] !== undefined ? data["disk_usage"] : null;
                this.email = data["email"] !== undefined ? data["email"] : null;
                this.followers = data["followers"] !== undefined ? data["followers"] : null;
                this.following = data["following"] !== undefined ? data["following"] : null;
                this.gravatar_id = data["gravatar_id"] !== undefined ? data["gravatar_id"] : null;
                this.hireable = data["hireable"] !== undefined ? data["hireable"] : null;
                this.html_url = data["html_url"] !== undefined ? data["html_url"] : null;
                this.id = data["id"] !== undefined ? data["id"] : null;
                this.location = data["location"] !== undefined ? data["location"] : null;
                this.login = data["login"] !== undefined ? data["login"] : null;
                this.name = data["name"] !== undefined ? data["name"] : null;
                this.owned_private_repos = data["owned_private_repos"] !== undefined ? data["owned_private_repos"] : null;
                this.plan = data["plan"] ? Plan.fromJS(data["plan"]) : null;
                this.private_gists = data["private_gists"] !== undefined ? data["private_gists"] : null;
                this.public_gists = data["public_gists"] !== undefined ? data["public_gists"] : null;
                this.public_repos = data["public_repos"] !== undefined ? data["public_repos"] : null;
                this.total_private_repos = data["total_private_repos"] !== undefined ? data["total_private_repos"] : null;
                this.type = data["type"] !== undefined ? data["type"] : null;
                this.url = data["url"] !== undefined ? data["url"] : null;
            }
        };
        User.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new User();
            result.init(data);
            return result;
        };
        User.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["avatar_url"] = this.avatar_url !== undefined ? this.avatar_url : null;
            data["bio"] = this.bio !== undefined ? this.bio : null;
            data["blog"] = this.blog !== undefined ? this.blog : null;
            data["collaborators"] = this.collaborators !== undefined ? this.collaborators : null;
            data["company"] = this.company !== undefined ? this.company : null;
            data["created_at"] = this.created_at !== undefined ? this.created_at : null;
            data["disk_usage"] = this.disk_usage !== undefined ? this.disk_usage : null;
            data["email"] = this.email !== undefined ? this.email : null;
            data["followers"] = this.followers !== undefined ? this.followers : null;
            data["following"] = this.following !== undefined ? this.following : null;
            data["gravatar_id"] = this.gravatar_id !== undefined ? this.gravatar_id : null;
            data["hireable"] = this.hireable !== undefined ? this.hireable : null;
            data["html_url"] = this.html_url !== undefined ? this.html_url : null;
            data["id"] = this.id !== undefined ? this.id : null;
            data["location"] = this.location !== undefined ? this.location : null;
            data["login"] = this.login !== undefined ? this.login : null;
            data["name"] = this.name !== undefined ? this.name : null;
            data["owned_private_repos"] = this.owned_private_repos !== undefined ? this.owned_private_repos : null;
            data["plan"] = this.plan ? this.plan.toJSON() : null;
            data["private_gists"] = this.private_gists !== undefined ? this.private_gists : null;
            data["public_gists"] = this.public_gists !== undefined ? this.public_gists : null;
            data["public_repos"] = this.public_repos !== undefined ? this.public_repos : null;
            data["total_private_repos"] = this.total_private_repos !== undefined ? this.total_private_repos : null;
            data["type"] = this.type !== undefined ? this.type : null;
            data["url"] = this.url !== undefined ? this.url : null;
            return data;
        };
        return User;
    }());
    GithubApiClient.User = User;
    var UserKeysKeyId = /** @class */ (function () {
        function UserKeysKeyId(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        UserKeysKeyId.prototype.init = function (data) {
            if (data) {
                this.id = data["id"] !== undefined ? data["id"] : null;
                this.key = data["key"] !== undefined ? data["key"] : null;
                this.title = data["title"] !== undefined ? data["title"] : null;
                this.url = data["url"] !== undefined ? data["url"] : null;
            }
        };
        UserKeysKeyId.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new UserKeysKeyId();
            result.init(data);
            return result;
        };
        UserKeysKeyId.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["id"] = this.id !== undefined ? this.id : null;
            data["key"] = this.key !== undefined ? this.key : null;
            data["title"] = this.title !== undefined ? this.title : null;
            data["url"] = this.url !== undefined ? this.url : null;
            return data;
        };
        return UserKeysKeyId;
    }());
    GithubApiClient.UserKeysKeyId = UserKeysKeyId;
    var UserKeysPost = /** @class */ (function () {
        function UserKeysPost(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        UserKeysPost.prototype.init = function (data) {
            if (data) {
                this.key = data["key"] !== undefined ? data["key"] : null;
                this.title = data["title"] !== undefined ? data["title"] : null;
            }
        };
        UserKeysPost.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new UserKeysPost();
            result.init(data);
            return result;
        };
        UserKeysPost.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["key"] = this.key !== undefined ? this.key : null;
            data["title"] = this.title !== undefined ? this.title : null;
            return data;
        };
        return UserKeysPost;
    }());
    GithubApiClient.UserKeysPost = UserKeysPost;
    var UserUpdate = /** @class */ (function () {
        function UserUpdate(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        UserUpdate.prototype.init = function (data) {
            if (data) {
                this.bio = data["bio"] !== undefined ? data["bio"] : null;
                this.blog = data["blog"] !== undefined ? data["blog"] : null;
                this.company = data["company"] !== undefined ? data["company"] : null;
                this.email = data["email"] !== undefined ? data["email"] : null;
                this.hireable = data["hireable"] !== undefined ? data["hireable"] : null;
                this.location = data["location"] !== undefined ? data["location"] : null;
                this.name = data["name"] !== undefined ? data["name"] : null;
            }
        };
        UserUpdate.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new UserUpdate();
            result.init(data);
            return result;
        };
        UserUpdate.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["bio"] = this.bio !== undefined ? this.bio : null;
            data["blog"] = this.blog !== undefined ? this.blog : null;
            data["company"] = this.company !== undefined ? this.company : null;
            data["email"] = this.email !== undefined ? this.email : null;
            data["hireable"] = this.hireable !== undefined ? this.hireable : null;
            data["location"] = this.location !== undefined ? this.location : null;
            data["name"] = this.name !== undefined ? this.name : null;
            return data;
        };
        return UserUpdate;
    }());
    GithubApiClient.UserUpdate = UserUpdate;
    var UserUserId = /** @class */ (function () {
        function UserUserId(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        UserUserId.prototype.init = function (data) {
            if (data) {
                this.avatar_url = data["avatar_url"] !== undefined ? data["avatar_url"] : null;
                this.bio = data["bio"] !== undefined ? data["bio"] : null;
                this.blog = data["blog"] !== undefined ? data["blog"] : null;
                this.company = data["company"] !== undefined ? data["company"] : null;
                this.created_at = data["created_at"] !== undefined ? data["created_at"] : null;
                this.email = data["email"] !== undefined ? data["email"] : null;
                this.followers = data["followers"] !== undefined ? data["followers"] : null;
                this.following = data["following"] !== undefined ? data["following"] : null;
                this.gravatar_id = data["gravatar_id"] !== undefined ? data["gravatar_id"] : null;
                this.hireable = data["hireable"] !== undefined ? data["hireable"] : null;
                this.html_url = data["html_url"] !== undefined ? data["html_url"] : null;
                this.id = data["id"] !== undefined ? data["id"] : null;
                this.location = data["location"] !== undefined ? data["location"] : null;
                this.login = data["login"] !== undefined ? data["login"] : null;
                this.name = data["name"] !== undefined ? data["name"] : null;
                this.public_gists = data["public_gists"] !== undefined ? data["public_gists"] : null;
                this.public_repos = data["public_repos"] !== undefined ? data["public_repos"] : null;
                this.type = data["type"] !== undefined ? data["type"] : null;
                this.url = data["url"] !== undefined ? data["url"] : null;
            }
        };
        UserUserId.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new UserUserId();
            result.init(data);
            return result;
        };
        UserUserId.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["avatar_url"] = this.avatar_url !== undefined ? this.avatar_url : null;
            data["bio"] = this.bio !== undefined ? this.bio : null;
            data["blog"] = this.blog !== undefined ? this.blog : null;
            data["company"] = this.company !== undefined ? this.company : null;
            data["created_at"] = this.created_at !== undefined ? this.created_at : null;
            data["email"] = this.email !== undefined ? this.email : null;
            data["followers"] = this.followers !== undefined ? this.followers : null;
            data["following"] = this.following !== undefined ? this.following : null;
            data["gravatar_id"] = this.gravatar_id !== undefined ? this.gravatar_id : null;
            data["hireable"] = this.hireable !== undefined ? this.hireable : null;
            data["html_url"] = this.html_url !== undefined ? this.html_url : null;
            data["id"] = this.id !== undefined ? this.id : null;
            data["location"] = this.location !== undefined ? this.location : null;
            data["login"] = this.login !== undefined ? this.login : null;
            data["name"] = this.name !== undefined ? this.name : null;
            data["public_gists"] = this.public_gists !== undefined ? this.public_gists : null;
            data["public_repos"] = this.public_repos !== undefined ? this.public_repos : null;
            data["type"] = this.type !== undefined ? this.type : null;
            data["url"] = this.url !== undefined ? this.url : null;
            return data;
        };
        return UserUserId;
    }());
    GithubApiClient.UserUserId = UserUserId;
    /** Issues assigned to you / created by you / mentioning you / you're subscribed to updates for / All issues the authenticated user can see */
    var Filter;
    (function (Filter) {
        Filter[Filter["Assigned"] = "assigned"] = "Assigned";
        Filter[Filter["Created"] = "created"] = "Created";
        Filter[Filter["Mentioned"] = "mentioned"] = "Mentioned";
        Filter[Filter["Subscribed"] = "subscribed"] = "Subscribed";
        Filter[Filter["All"] = "all"] = "All";
    })(Filter = GithubApiClient.Filter || (GithubApiClient.Filter = {}));
    var State;
    (function (State) {
        State[State["Open"] = "open"] = "Open";
        State[State["Closed"] = "closed"] = "Closed";
    })(State = GithubApiClient.State || (GithubApiClient.State = {}));
    var Sort;
    (function (Sort) {
        Sort[Sort["Created"] = "created"] = "Created";
        Sort[Sort["Updated"] = "updated"] = "Updated";
        Sort[Sort["Comments"] = "comments"] = "Comments";
    })(Sort = GithubApiClient.Sort || (GithubApiClient.Sort = {}));
    var Direction;
    (function (Direction) {
        Direction[Direction["Asc"] = "asc"] = "Asc";
        Direction[Direction["Desc"] = "desc"] = "Desc";
    })(Direction = GithubApiClient.Direction || (GithubApiClient.Direction = {}));
    /** Indicates the state of the issues to return. Can be either open or closed. */
    var State2;
    (function (State2) {
        State2[State2["Open"] = "open"] = "Open";
        State2[State2["Closed"] = "closed"] = "Closed";
    })(State2 = GithubApiClient.State2 || (GithubApiClient.State2 = {}));
    /** The sort field. if sort param is provided. Can be either asc or desc. */
    var Order;
    (function (Order) {
        Order[Order["Desc"] = "desc"] = "Desc";
        Order[Order["Asc"] = "asc"] = "Asc";
    })(Order = GithubApiClient.Order || (GithubApiClient.Order = {}));
    /** The sort field. One of stars, forks, or updated. Default: results are sorted by best match. */
    var Sort2;
    (function (Sort2) {
        Sort2[Sort2["Updated"] = "updated"] = "Updated";
        Sort2[Sort2["Stars"] = "stars"] = "Stars";
        Sort2[Sort2["Forks"] = "forks"] = "Forks";
    })(Sort2 = GithubApiClient.Sort2 || (GithubApiClient.Sort2 = {}));
    /** The sort field. if sort param is provided. Can be either asc or desc. */
    var Order2;
    (function (Order2) {
        Order2[Order2["Desc"] = "desc"] = "Desc";
        Order2[Order2["Asc"] = "asc"] = "Asc";
    })(Order2 = GithubApiClient.Order2 || (GithubApiClient.Order2 = {}));
    /** The sort field. One of stars, forks, or updated. Default: results are sorted by best match. */
    var Sort3;
    (function (Sort3) {
        Sort3[Sort3["Updated"] = "updated"] = "Updated";
        Sort3[Sort3["Stars"] = "stars"] = "Stars";
        Sort3[Sort3["Forks"] = "forks"] = "Forks";
    })(Sort3 = GithubApiClient.Sort3 || (GithubApiClient.Sort3 = {}));
    /** Issues assigned to you / created by you / mentioning you / you're subscribed to updates for / All issues the authenticated user can see */
    var Filter2;
    (function (Filter2) {
        Filter2[Filter2["Assigned"] = "assigned"] = "Assigned";
        Filter2[Filter2["Created"] = "created"] = "Created";
        Filter2[Filter2["Mentioned"] = "mentioned"] = "Mentioned";
        Filter2[Filter2["Subscribed"] = "subscribed"] = "Subscribed";
        Filter2[Filter2["All"] = "all"] = "All";
    })(Filter2 = GithubApiClient.Filter2 || (GithubApiClient.Filter2 = {}));
    var State3;
    (function (State3) {
        State3[State3["Open"] = "open"] = "Open";
        State3[State3["Closed"] = "closed"] = "Closed";
    })(State3 = GithubApiClient.State3 || (GithubApiClient.State3 = {}));
    var Sort4;
    (function (Sort4) {
        Sort4[Sort4["Created"] = "created"] = "Created";
        Sort4[Sort4["Updated"] = "updated"] = "Updated";
        Sort4[Sort4["Comments"] = "comments"] = "Comments";
    })(Sort4 = GithubApiClient.Sort4 || (GithubApiClient.Sort4 = {}));
    var Direction2;
    (function (Direction2) {
        Direction2[Direction2["Asc"] = "asc"] = "Asc";
        Direction2[Direction2["Desc"] = "desc"] = "Desc";
    })(Direction2 = GithubApiClient.Direction2 || (GithubApiClient.Direction2 = {}));
    var Type;
    (function (Type) {
        Type[Type["All"] = "all"] = "All";
        Type[Type["Public"] = "public"] = "Public";
        Type[Type["Private"] = "private"] = "Private";
        Type[Type["Forks"] = "forks"] = "Forks";
        Type[Type["Sources"] = "sources"] = "Sources";
        Type[Type["Member"] = "member"] = "Member";
    })(Type = GithubApiClient.Type || (GithubApiClient.Type = {}));
    var Sort5;
    (function (Sort5) {
        Sort5[Sort5["Newes"] = "newes"] = "Newes";
        Sort5[Sort5["Oldes"] = "oldes"] = "Oldes";
        Sort5[Sort5["Watchers"] = "watchers"] = "Watchers";
    })(Sort5 = GithubApiClient.Sort5 || (GithubApiClient.Sort5 = {}));
    /** Issues assigned to you / created by you / mentioning you / you're subscribed to updates for / All issues the authenticated user can see */
    var Filter3;
    (function (Filter3) {
        Filter3[Filter3["Assigned"] = "assigned"] = "Assigned";
        Filter3[Filter3["Created"] = "created"] = "Created";
        Filter3[Filter3["Mentioned"] = "mentioned"] = "Mentioned";
        Filter3[Filter3["Subscribed"] = "subscribed"] = "Subscribed";
        Filter3[Filter3["All"] = "all"] = "All";
    })(Filter3 = GithubApiClient.Filter3 || (GithubApiClient.Filter3 = {}));
    var State4;
    (function (State4) {
        State4[State4["Open"] = "open"] = "Open";
        State4[State4["Closed"] = "closed"] = "Closed";
    })(State4 = GithubApiClient.State4 || (GithubApiClient.State4 = {}));
    var Sort6;
    (function (Sort6) {
        Sort6[Sort6["Created"] = "created"] = "Created";
        Sort6[Sort6["Updated"] = "updated"] = "Updated";
        Sort6[Sort6["Comments"] = "comments"] = "Comments";
    })(Sort6 = GithubApiClient.Sort6 || (GithubApiClient.Sort6 = {}));
    var Direction3;
    (function (Direction3) {
        Direction3[Direction3["Asc"] = "asc"] = "Asc";
        Direction3[Direction3["Desc"] = "desc"] = "Desc";
    })(Direction3 = GithubApiClient.Direction3 || (GithubApiClient.Direction3 = {}));
    var Sort7;
    (function (Sort7) {
        Sort7[Sort7["Created"] = "created"] = "Created";
        Sort7[Sort7["Updated"] = "updated"] = "Updated";
    })(Sort7 = GithubApiClient.Sort7 || (GithubApiClient.Sort7 = {}));
    /** String to filter by state. */
    var State5;
    (function (State5) {
        State5[State5["Open"] = "open"] = "Open";
        State5[State5["Closed"] = "closed"] = "Closed";
    })(State5 = GithubApiClient.State5 || (GithubApiClient.State5 = {}));
    var Sort8;
    (function (Sort8) {
        Sort8[Sort8["Due_date"] = "due_date"] = "Due_date";
        Sort8[Sort8["Completeness"] = "completeness"] = "Completeness";
    })(Sort8 = GithubApiClient.Sort8 || (GithubApiClient.Sort8 = {}));
    /** String to filter by state. */
    var State6;
    (function (State6) {
        State6[State6["Open"] = "open"] = "Open";
        State6[State6["Closed"] = "closed"] = "Closed";
    })(State6 = GithubApiClient.State6 || (GithubApiClient.State6 = {}));
    var Sort9;
    (function (Sort9) {
        Sort9[Sort9["Created"] = "created"] = "Created";
        Sort9[Sort9["Updated"] = "updated"] = "Updated";
    })(Sort9 = GithubApiClient.Sort9 || (GithubApiClient.Sort9 = {}));
    var Archive_format;
    (function (Archive_format) {
        Archive_format[Archive_format["Tarball"] = "tarball"] = "Tarball";
        Archive_format[Archive_format["Zipball"] = "zipball"] = "Zipball";
    })(Archive_format = GithubApiClient.Archive_format || (GithubApiClient.Archive_format = {}));
    /** The sort field. if sort param is provided. Can be either asc or desc. */
    var Order3;
    (function (Order3) {
        Order3[Order3["Desc"] = "desc"] = "Desc";
        Order3[Order3["Asc"] = "asc"] = "Asc";
    })(Order3 = GithubApiClient.Order3 || (GithubApiClient.Order3 = {}));
    /** Can only be 'indexed', which indicates how recently a file has been indexed by the GitHub search infrastructure. If not provided, results are sorted by best match. */
    var Sort10;
    (function (Sort10) {
        Sort10[Sort10["Indexed"] = "indexed"] = "Indexed";
    })(Sort10 = GithubApiClient.Sort10 || (GithubApiClient.Sort10 = {}));
    /** The sort field. if sort param is provided. Can be either asc or desc. */
    var Order4;
    (function (Order4) {
        Order4[Order4["Desc"] = "desc"] = "Desc";
        Order4[Order4["Asc"] = "asc"] = "Asc";
    })(Order4 = GithubApiClient.Order4 || (GithubApiClient.Order4 = {}));
    /** The sort field. Can be comments, created, or updated. Default: results are sorted by best match. */
    var Sort11;
    (function (Sort11) {
        Sort11[Sort11["Updated"] = "updated"] = "Updated";
        Sort11[Sort11["Created"] = "created"] = "Created";
        Sort11[Sort11["Comments"] = "comments"] = "Comments";
    })(Sort11 = GithubApiClient.Sort11 || (GithubApiClient.Sort11 = {}));
    /** The sort field. if sort param is provided. Can be either asc or desc. */
    var Order5;
    (function (Order5) {
        Order5[Order5["Desc"] = "desc"] = "Desc";
        Order5[Order5["Asc"] = "asc"] = "Asc";
    })(Order5 = GithubApiClient.Order5 || (GithubApiClient.Order5 = {}));
    /** If not provided, results are sorted by best match. */
    var Sort12;
    (function (Sort12) {
        Sort12[Sort12["Stars"] = "stars"] = "Stars";
        Sort12[Sort12["Forks"] = "forks"] = "Forks";
        Sort12[Sort12["Updated"] = "updated"] = "Updated";
    })(Sort12 = GithubApiClient.Sort12 || (GithubApiClient.Sort12 = {}));
    /** The sort field. if sort param is provided. Can be either asc or desc. */
    var Order6;
    (function (Order6) {
        Order6[Order6["Desc"] = "desc"] = "Desc";
        Order6[Order6["Asc"] = "asc"] = "Asc";
    })(Order6 = GithubApiClient.Order6 || (GithubApiClient.Order6 = {}));
    /** If not provided, results are sorted by best match. */
    var Sort13;
    (function (Sort13) {
        Sort13[Sort13["Followers"] = "followers"] = "Followers";
        Sort13[Sort13["Repositories"] = "repositories"] = "Repositories";
        Sort13[Sort13["Joined"] = "joined"] = "Joined";
    })(Sort13 = GithubApiClient.Sort13 || (GithubApiClient.Sort13 = {}));
    /** Issues assigned to you / created by you / mentioning you / you're subscribed to updates for / All issues the authenticated user can see */
    var Filter4;
    (function (Filter4) {
        Filter4[Filter4["Assigned"] = "assigned"] = "Assigned";
        Filter4[Filter4["Created"] = "created"] = "Created";
        Filter4[Filter4["Mentioned"] = "mentioned"] = "Mentioned";
        Filter4[Filter4["Subscribed"] = "subscribed"] = "Subscribed";
        Filter4[Filter4["All"] = "all"] = "All";
    })(Filter4 = GithubApiClient.Filter4 || (GithubApiClient.Filter4 = {}));
    var State7;
    (function (State7) {
        State7[State7["Open"] = "open"] = "Open";
        State7[State7["Closed"] = "closed"] = "Closed";
    })(State7 = GithubApiClient.State7 || (GithubApiClient.State7 = {}));
    var Sort14;
    (function (Sort14) {
        Sort14[Sort14["Created"] = "created"] = "Created";
        Sort14[Sort14["Updated"] = "updated"] = "Updated";
        Sort14[Sort14["Comments"] = "comments"] = "Comments";
    })(Sort14 = GithubApiClient.Sort14 || (GithubApiClient.Sort14 = {}));
    var Direction4;
    (function (Direction4) {
        Direction4[Direction4["Asc"] = "asc"] = "Asc";
        Direction4[Direction4["Desc"] = "desc"] = "Desc";
    })(Direction4 = GithubApiClient.Direction4 || (GithubApiClient.Direction4 = {}));
    var Type2;
    (function (Type2) {
        Type2[Type2["All"] = "all"] = "All";
        Type2[Type2["Public"] = "public"] = "Public";
        Type2[Type2["Private"] = "private"] = "Private";
        Type2[Type2["Forks"] = "forks"] = "Forks";
        Type2[Type2["Sources"] = "sources"] = "Sources";
        Type2[Type2["Member"] = "member"] = "Member";
    })(Type2 = GithubApiClient.Type2 || (GithubApiClient.Type2 = {}));
    var Sort15;
    (function (Sort15) {
        Sort15[Sort15["Created"] = "created"] = "Created";
        Sort15[Sort15["Updated"] = "updated"] = "Updated";
    })(Sort15 = GithubApiClient.Sort15 || (GithubApiClient.Sort15 = {}));
    var Type3;
    (function (Type3) {
        Type3[Type3["All"] = "all"] = "All";
        Type3[Type3["Public"] = "public"] = "Public";
        Type3[Type3["Private"] = "private"] = "Private";
        Type3[Type3["Forks"] = "forks"] = "Forks";
        Type3[Type3["Sources"] = "sources"] = "Sources";
        Type3[Type3["Member"] = "member"] = "Member";
    })(Type3 = GithubApiClient.Type3 || (GithubApiClient.Type3 = {}));
    var Anonymous = /** @class */ (function () {
        function Anonymous(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Anonymous.prototype.init = function (data) {
            if (data) {
                this.comments = data["comments"] !== undefined ? data["comments"] : null;
                this.comments_url = data["comments_url"] !== undefined ? data["comments_url"] : null;
                this.created_at = data["created_at"] !== undefined ? data["created_at"] : null;
                this.description = data["description"] !== undefined ? data["description"] : null;
                this.files = data["files"] ? Files6.fromJS(data["files"]) : null;
                this.git_pull_url = data["git_pull_url"] !== undefined ? data["git_pull_url"] : null;
                this.git_push_url = data["git_push_url"] !== undefined ? data["git_push_url"] : null;
                this.html_url = data["html_url"] !== undefined ? data["html_url"] : null;
                this.id = data["id"] !== undefined ? data["id"] : null;
                this.public = data["public"] !== undefined ? data["public"] : null;
                this.url = data["url"] !== undefined ? data["url"] : null;
                this.user = data["user"] ? User8.fromJS(data["user"]) : null;
            }
        };
        Anonymous.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Anonymous();
            result.init(data);
            return result;
        };
        Anonymous.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["comments"] = this.comments !== undefined ? this.comments : null;
            data["comments_url"] = this.comments_url !== undefined ? this.comments_url : null;
            data["created_at"] = this.created_at !== undefined ? this.created_at : null;
            data["description"] = this.description !== undefined ? this.description : null;
            data["files"] = this.files ? this.files.toJSON() : null;
            data["git_pull_url"] = this.git_pull_url !== undefined ? this.git_pull_url : null;
            data["git_push_url"] = this.git_push_url !== undefined ? this.git_push_url : null;
            data["html_url"] = this.html_url !== undefined ? this.html_url : null;
            data["id"] = this.id !== undefined ? this.id : null;
            data["public"] = this.public !== undefined ? this.public : null;
            data["url"] = this.url !== undefined ? this.url : null;
            data["user"] = this.user ? this.user.toJSON() : null;
            return data;
        };
        return Anonymous;
    }());
    GithubApiClient.Anonymous = Anonymous;
    var Anonymous2 = /** @class */ (function () {
        function Anonymous2(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Anonymous2.prototype.init = function (data) {
            if (data) {
                this.assignee = data["assignee"] ? Assignee.fromJS(data["assignee"]) : null;
                this.body = data["body"] !== undefined ? data["body"] : null;
                this.closed_at = data["closed_at"] !== undefined ? data["closed_at"] : null;
                this.comments = data["comments"] !== undefined ? data["comments"] : null;
                this.created_at = data["created_at"] !== undefined ? data["created_at"] : null;
                this.html_url = data["html_url"] !== undefined ? data["html_url"] : null;
                if (data["labels"] && data["labels"].constructor === Array) {
                    this.labels = [];
                    for (var _i = 0, _a = data["labels"]; _i < _a.length; _i++) {
                        var item = _a[_i];
                        this.labels.push(Labels.fromJS(item));
                    }
                }
                this.milestone = data["milestone"] ? Milestone2.fromJS(data["milestone"]) : null;
                this.number = data["number"] !== undefined ? data["number"] : null;
                this.pull_request = data["pull_request"] ? Pull_request.fromJS(data["pull_request"]) : null;
                this.state = data["state"] !== undefined ? data["state"] : null;
                this.title = data["title"] !== undefined ? data["title"] : null;
                this.updated_at = data["updated_at"] !== undefined ? data["updated_at"] : null;
                this.url = data["url"] !== undefined ? data["url"] : null;
                this.user = data["user"] ? User9.fromJS(data["user"]) : null;
            }
        };
        Anonymous2.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Anonymous2();
            result.init(data);
            return result;
        };
        Anonymous2.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["assignee"] = this.assignee ? this.assignee.toJSON() : null;
            data["body"] = this.body !== undefined ? this.body : null;
            data["closed_at"] = this.closed_at !== undefined ? this.closed_at : null;
            data["comments"] = this.comments !== undefined ? this.comments : null;
            data["created_at"] = this.created_at !== undefined ? this.created_at : null;
            data["html_url"] = this.html_url !== undefined ? this.html_url : null;
            if (this.labels && this.labels.constructor === Array) {
                data["labels"] = [];
                for (var _i = 0, _a = this.labels; _i < _a.length; _i++) {
                    var item = _a[_i];
                    data["labels"].push(item.toJSON());
                }
            }
            data["milestone"] = this.milestone ? this.milestone.toJSON() : null;
            data["number"] = this.number !== undefined ? this.number : null;
            data["pull_request"] = this.pull_request ? this.pull_request.toJSON() : null;
            data["state"] = this.state !== undefined ? this.state : null;
            data["title"] = this.title !== undefined ? this.title : null;
            data["updated_at"] = this.updated_at !== undefined ? this.updated_at : null;
            data["url"] = this.url !== undefined ? this.url : null;
            data["user"] = this.user ? this.user.toJSON() : null;
            return data;
        };
        return Anonymous2;
    }());
    GithubApiClient.Anonymous2 = Anonymous2;
    var Anonymous3 = /** @class */ (function () {
        function Anonymous3(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Anonymous3.prototype.init = function (data) {
            if (data) {
                this.description = data["description"] !== undefined ? data["description"] : null;
                this.fork = data["fork"] !== undefined ? data["fork"] : null;
                this.full_name = data["full_name"] !== undefined ? data["full_name"] : null;
                this.html_url = data["html_url"] !== undefined ? data["html_url"] : null;
                this.id = data["id"] !== undefined ? data["id"] : null;
                this.name = data["name"] !== undefined ? data["name"] : null;
                this.owner = data["owner"] ? Owner3.fromJS(data["owner"]) : null;
                this.private = data["private"] !== undefined ? data["private"] : null;
                this.url = data["url"] !== undefined ? data["url"] : null;
            }
        };
        Anonymous3.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Anonymous3();
            result.init(data);
            return result;
        };
        Anonymous3.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["description"] = this.description !== undefined ? this.description : null;
            data["fork"] = this.fork !== undefined ? this.fork : null;
            data["full_name"] = this.full_name !== undefined ? this.full_name : null;
            data["html_url"] = this.html_url !== undefined ? this.html_url : null;
            data["id"] = this.id !== undefined ? this.id : null;
            data["name"] = this.name !== undefined ? this.name : null;
            data["owner"] = this.owner ? this.owner.toJSON() : null;
            data["private"] = this.private !== undefined ? this.private : null;
            data["url"] = this.url !== undefined ? this.url : null;
            return data;
        };
        return Anonymous3;
    }());
    GithubApiClient.Anonymous3 = Anonymous3;
    var Anonymous4 = /** @class */ (function () {
        function Anonymous4(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Anonymous4.prototype.init = function (data) {
            if (data) {
                this.avatar_url = data["avatar_url"] !== undefined ? data["avatar_url"] : null;
                this.gravatar_id = data["gravatar_id"] !== undefined ? data["gravatar_id"] : null;
                this.id = data["id"] !== undefined ? data["id"] : null;
                this.login = data["login"] !== undefined ? data["login"] : null;
                this.url = data["url"] !== undefined ? data["url"] : null;
            }
        };
        Anonymous4.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Anonymous4();
            result.init(data);
            return result;
        };
        Anonymous4.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["avatar_url"] = this.avatar_url !== undefined ? this.avatar_url : null;
            data["gravatar_id"] = this.gravatar_id !== undefined ? this.gravatar_id : null;
            data["id"] = this.id !== undefined ? this.id : null;
            data["login"] = this.login !== undefined ? this.login : null;
            data["url"] = this.url !== undefined ? this.url : null;
            return data;
        };
        return Anonymous4;
    }());
    GithubApiClient.Anonymous4 = Anonymous4;
    var Anonymous5 = /** @class */ (function () {
        function Anonymous5(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Anonymous5.prototype.init = function (data) {
            if (data) {
                this.body = data["body"] !== undefined ? data["body"] : null;
                this.created_at = data["created_at"] !== undefined ? data["created_at"] : null;
                this.id = data["id"] !== undefined ? data["id"] : null;
                this.url = data["url"] !== undefined ? data["url"] : null;
                this.user = data["user"] ? User10.fromJS(data["user"]) : null;
            }
        };
        Anonymous5.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Anonymous5();
            result.init(data);
            return result;
        };
        Anonymous5.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["body"] = this.body !== undefined ? this.body : null;
            data["created_at"] = this.created_at !== undefined ? this.created_at : null;
            data["id"] = this.id !== undefined ? this.id : null;
            data["url"] = this.url !== undefined ? this.url : null;
            data["user"] = this.user ? this.user.toJSON() : null;
            return data;
        };
        return Anonymous5;
    }());
    GithubApiClient.Anonymous5 = Anonymous5;
    var Anonymous6 = /** @class */ (function () {
        function Anonymous6(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Anonymous6.prototype.init = function (data) {
            if (data) {
                this.clone_url = data["clone_url"] !== undefined ? data["clone_url"] : null;
                this.created_at = data["created_at"] !== undefined ? data["created_at"] : null;
                this.description = data["description"] !== undefined ? data["description"] : null;
                this.fork = data["fork"] !== undefined ? data["fork"] : null;
                this.forks = data["forks"] !== undefined ? data["forks"] : null;
                this.forks_count = data["forks_count"] !== undefined ? data["forks_count"] : null;
                this.full_name = data["full_name"] !== undefined ? data["full_name"] : null;
                this.git_url = data["git_url"] !== undefined ? data["git_url"] : null;
                this.homepage = data["homepage"] !== undefined ? data["homepage"] : null;
                this.html_url = data["html_url"] !== undefined ? data["html_url"] : null;
                this.id = data["id"] !== undefined ? data["id"] : null;
                this.language = data["language"] !== undefined ? data["language"] : null;
                this.master_branch = data["master_branch"] !== undefined ? data["master_branch"] : null;
                this.mirror_url = data["mirror_url"] !== undefined ? data["mirror_url"] : null;
                this.name = data["name"] !== undefined ? data["name"] : null;
                this.open_issues = data["open_issues"] !== undefined ? data["open_issues"] : null;
                this.open_issues_count = data["open_issues_count"] !== undefined ? data["open_issues_count"] : null;
                this.owner = data["owner"] ? Owner4.fromJS(data["owner"]) : null;
                this.private = data["private"] !== undefined ? data["private"] : null;
                this.pushed_at = data["pushed_at"] !== undefined ? data["pushed_at"] : null;
                this.size = data["size"] !== undefined ? data["size"] : null;
                this.ssh_url = data["ssh_url"] !== undefined ? data["ssh_url"] : null;
                this.svn_url = data["svn_url"] !== undefined ? data["svn_url"] : null;
                this.updated_at = data["updated_at"] !== undefined ? data["updated_at"] : null;
                this.url = data["url"] !== undefined ? data["url"] : null;
                this.watchers = data["watchers"] !== undefined ? data["watchers"] : null;
                this.watchers_count = data["watchers_count"] !== undefined ? data["watchers_count"] : null;
            }
        };
        Anonymous6.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Anonymous6();
            result.init(data);
            return result;
        };
        Anonymous6.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["clone_url"] = this.clone_url !== undefined ? this.clone_url : null;
            data["created_at"] = this.created_at !== undefined ? this.created_at : null;
            data["description"] = this.description !== undefined ? this.description : null;
            data["fork"] = this.fork !== undefined ? this.fork : null;
            data["forks"] = this.forks !== undefined ? this.forks : null;
            data["forks_count"] = this.forks_count !== undefined ? this.forks_count : null;
            data["full_name"] = this.full_name !== undefined ? this.full_name : null;
            data["git_url"] = this.git_url !== undefined ? this.git_url : null;
            data["homepage"] = this.homepage !== undefined ? this.homepage : null;
            data["html_url"] = this.html_url !== undefined ? this.html_url : null;
            data["id"] = this.id !== undefined ? this.id : null;
            data["language"] = this.language !== undefined ? this.language : null;
            data["master_branch"] = this.master_branch !== undefined ? this.master_branch : null;
            data["mirror_url"] = this.mirror_url !== undefined ? this.mirror_url : null;
            data["name"] = this.name !== undefined ? this.name : null;
            data["open_issues"] = this.open_issues !== undefined ? this.open_issues : null;
            data["open_issues_count"] = this.open_issues_count !== undefined ? this.open_issues_count : null;
            data["owner"] = this.owner ? this.owner.toJSON() : null;
            data["private"] = this.private !== undefined ? this.private : null;
            data["pushed_at"] = this.pushed_at !== undefined ? this.pushed_at : null;
            data["size"] = this.size !== undefined ? this.size : null;
            data["ssh_url"] = this.ssh_url !== undefined ? this.ssh_url : null;
            data["svn_url"] = this.svn_url !== undefined ? this.svn_url : null;
            data["updated_at"] = this.updated_at !== undefined ? this.updated_at : null;
            data["url"] = this.url !== undefined ? this.url : null;
            data["watchers"] = this.watchers !== undefined ? this.watchers : null;
            data["watchers_count"] = this.watchers_count !== undefined ? this.watchers_count : null;
            return data;
        };
        return Anonymous6;
    }());
    GithubApiClient.Anonymous6 = Anonymous6;
    var Anonymous7 = /** @class */ (function () {
        function Anonymous7(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Anonymous7.prototype.init = function (data) {
            if (data) {
                this.id = data["id"] !== undefined ? data["id"] : null;
                this.name = data["name"] !== undefined ? data["name"] : null;
                this.url = data["url"] !== undefined ? data["url"] : null;
            }
        };
        Anonymous7.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Anonymous7();
            result.init(data);
            return result;
        };
        Anonymous7.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["id"] = this.id !== undefined ? this.id : null;
            data["name"] = this.name !== undefined ? this.name : null;
            data["url"] = this.url !== undefined ? this.url : null;
            return data;
        };
        return Anonymous7;
    }());
    GithubApiClient.Anonymous7 = Anonymous7;
    var Anonymous8 = /** @class */ (function () {
        function Anonymous8(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Anonymous8.prototype.init = function (data) {
            if (data) {
                this.avatar_url = data["avatar_url"] !== undefined ? data["avatar_url"] : null;
                this.gravatar_id = data["gravatar_id"] !== undefined ? data["gravatar_id"] : null;
                this.id = data["id"] !== undefined ? data["id"] : null;
                this.login = data["login"] !== undefined ? data["login"] : null;
                this.url = data["url"] !== undefined ? data["url"] : null;
            }
        };
        Anonymous8.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Anonymous8();
            result.init(data);
            return result;
        };
        Anonymous8.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["avatar_url"] = this.avatar_url !== undefined ? this.avatar_url : null;
            data["gravatar_id"] = this.gravatar_id !== undefined ? this.gravatar_id : null;
            data["id"] = this.id !== undefined ? this.id : null;
            data["login"] = this.login !== undefined ? this.login : null;
            data["url"] = this.url !== undefined ? this.url : null;
            return data;
        };
        return Anonymous8;
    }());
    GithubApiClient.Anonymous8 = Anonymous8;
    var Anonymous9 = /** @class */ (function () {
        function Anonymous9(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Anonymous9.prototype.init = function (data) {
            if (data) {
                this.commit = data["commit"] ? Commit7.fromJS(data["commit"]) : null;
                this.name = data["name"] !== undefined ? data["name"] : null;
            }
        };
        Anonymous9.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Anonymous9();
            result.init(data);
            return result;
        };
        Anonymous9.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["commit"] = this.commit ? this.commit.toJSON() : null;
            data["name"] = this.name !== undefined ? this.name : null;
            return data;
        };
        return Anonymous9;
    }());
    GithubApiClient.Anonymous9 = Anonymous9;
    var Anonymous10 = /** @class */ (function () {
        function Anonymous10(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Anonymous10.prototype.init = function (data) {
            if (data) {
                this.body = data["body"] !== undefined ? data["body"] : null;
                this.commit_id = data["commit_id"] !== undefined ? data["commit_id"] : null;
                this.created_at = data["created_at"] !== undefined ? data["created_at"] : null;
                this.html_url = data["html_url"] !== undefined ? data["html_url"] : null;
                this.id = data["id"] !== undefined ? data["id"] : null;
                this.line = data["line"] !== undefined ? data["line"] : null;
                this.path = data["path"] !== undefined ? data["path"] : null;
                this.position = data["position"] !== undefined ? data["position"] : null;
                this.updated_at = data["updated_at"] !== undefined ? data["updated_at"] : null;
                this.url = data["url"] !== undefined ? data["url"] : null;
                this.user = data["user"] ? User11.fromJS(data["user"]) : null;
            }
        };
        Anonymous10.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Anonymous10();
            result.init(data);
            return result;
        };
        Anonymous10.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["body"] = this.body !== undefined ? this.body : null;
            data["commit_id"] = this.commit_id !== undefined ? this.commit_id : null;
            data["created_at"] = this.created_at !== undefined ? this.created_at : null;
            data["html_url"] = this.html_url !== undefined ? this.html_url : null;
            data["id"] = this.id !== undefined ? this.id : null;
            data["line"] = this.line !== undefined ? this.line : null;
            data["path"] = this.path !== undefined ? this.path : null;
            data["position"] = this.position !== undefined ? this.position : null;
            data["updated_at"] = this.updated_at !== undefined ? this.updated_at : null;
            data["url"] = this.url !== undefined ? this.url : null;
            data["user"] = this.user ? this.user.toJSON() : null;
            return data;
        };
        return Anonymous10;
    }());
    GithubApiClient.Anonymous10 = Anonymous10;
    var Anonymous11 = /** @class */ (function () {
        function Anonymous11(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Anonymous11.prototype.init = function (data) {
            if (data) {
                this.author = data["author"] ? Author7.fromJS(data["author"]) : null;
                this.commit = data["commit"] ? Commit8.fromJS(data["commit"]) : null;
                this.committer = data["committer"] ? Committer6.fromJS(data["committer"]) : null;
                if (data["parents"] && data["parents"].constructor === Array) {
                    this.parents = [];
                    for (var _i = 0, _a = data["parents"]; _i < _a.length; _i++) {
                        var item = _a[_i];
                        this.parents.push(Parents4.fromJS(item));
                    }
                }
                this.sha = data["sha"] !== undefined ? data["sha"] : null;
                this.url = data["url"] !== undefined ? data["url"] : null;
            }
        };
        Anonymous11.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Anonymous11();
            result.init(data);
            return result;
        };
        Anonymous11.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["author"] = this.author ? this.author.toJSON() : null;
            data["commit"] = this.commit ? this.commit.toJSON() : null;
            data["committer"] = this.committer ? this.committer.toJSON() : null;
            if (this.parents && this.parents.constructor === Array) {
                data["parents"] = [];
                for (var _i = 0, _a = this.parents; _i < _a.length; _i++) {
                    var item = _a[_i];
                    data["parents"].push(item.toJSON());
                }
            }
            data["sha"] = this.sha !== undefined ? this.sha : null;
            data["url"] = this.url !== undefined ? this.url : null;
            return data;
        };
        return Anonymous11;
    }());
    GithubApiClient.Anonymous11 = Anonymous11;
    var Anonymous12 = /** @class */ (function () {
        function Anonymous12(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Anonymous12.prototype.init = function (data) {
            if (data) {
                this.commit_url = data["commit_url"] !== undefined ? data["commit_url"] : null;
                this.name = data["name"] !== undefined ? data["name"] : null;
                this.repository_url = data["repository_url"] !== undefined ? data["repository_url"] : null;
                this.sha = data["sha"] !== undefined ? data["sha"] : null;
                this.state = data["state"] !== undefined ? data["state"] : null;
                if (data["statuses"] && data["statuses"].constructor === Array) {
                    this.statuses = [];
                    for (var _i = 0, _a = data["statuses"]; _i < _a.length; _i++) {
                        var item = _a[_i];
                        this.statuses.push(Statuses.fromJS(item));
                    }
                }
            }
        };
        Anonymous12.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Anonymous12();
            result.init(data);
            return result;
        };
        Anonymous12.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["commit_url"] = this.commit_url !== undefined ? this.commit_url : null;
            data["name"] = this.name !== undefined ? this.name : null;
            data["repository_url"] = this.repository_url !== undefined ? this.repository_url : null;
            data["sha"] = this.sha !== undefined ? this.sha : null;
            data["state"] = this.state !== undefined ? this.state : null;
            if (this.statuses && this.statuses.constructor === Array) {
                data["statuses"] = [];
                for (var _i = 0, _a = this.statuses; _i < _a.length; _i++) {
                    var item = _a[_i];
                    data["statuses"].push(item.toJSON());
                }
            }
            return data;
        };
        return Anonymous12;
    }());
    GithubApiClient.Anonymous12 = Anonymous12;
    var Anonymous13 = /** @class */ (function () {
        function Anonymous13(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Anonymous13.prototype.init = function (data) {
            if (data) {
                this.avatar_url = data["avatar_url"] !== undefined ? data["avatar_url"] : null;
                this.contributions = data["contributions"] !== undefined ? data["contributions"] : null;
                this.gravatar_id = data["gravatar_id"] !== undefined ? data["gravatar_id"] : null;
                this.id = data["id"] !== undefined ? data["id"] : null;
                this.login = data["login"] !== undefined ? data["login"] : null;
                this.url = data["url"] !== undefined ? data["url"] : null;
            }
        };
        Anonymous13.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Anonymous13();
            result.init(data);
            return result;
        };
        Anonymous13.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["avatar_url"] = this.avatar_url !== undefined ? this.avatar_url : null;
            data["contributions"] = this.contributions !== undefined ? this.contributions : null;
            data["gravatar_id"] = this.gravatar_id !== undefined ? this.gravatar_id : null;
            data["id"] = this.id !== undefined ? this.id : null;
            data["login"] = this.login !== undefined ? this.login : null;
            data["url"] = this.url !== undefined ? this.url : null;
            return data;
        };
        return Anonymous13;
    }());
    GithubApiClient.Anonymous13 = Anonymous13;
    var Anonymous14 = /** @class */ (function () {
        function Anonymous14(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Anonymous14.prototype.init = function (data) {
            if (data) {
                this.created_at = data["created_at"] !== undefined ? data["created_at"] : null;
                this.creator = data["creator"] ? Creator3.fromJS(data["creator"]) : null;
                this.description = data["description"] !== undefined ? data["description"] : null;
                this.id = data["id"] !== undefined ? data["id"] : null;
                this.payload = data["payload"] !== undefined ? data["payload"] : null;
                this.sha = data["sha"] !== undefined ? data["sha"] : null;
                this.statuses_url = data["statuses_url"] !== undefined ? data["statuses_url"] : null;
                this.updated_at = data["updated_at"] !== undefined ? data["updated_at"] : null;
                this.url = data["url"] !== undefined ? data["url"] : null;
            }
        };
        Anonymous14.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Anonymous14();
            result.init(data);
            return result;
        };
        Anonymous14.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["created_at"] = this.created_at !== undefined ? this.created_at : null;
            data["creator"] = this.creator ? this.creator.toJSON() : null;
            data["description"] = this.description !== undefined ? this.description : null;
            data["id"] = this.id !== undefined ? this.id : null;
            data["payload"] = this.payload !== undefined ? this.payload : null;
            data["sha"] = this.sha !== undefined ? this.sha : null;
            data["statuses_url"] = this.statuses_url !== undefined ? this.statuses_url : null;
            data["updated_at"] = this.updated_at !== undefined ? this.updated_at : null;
            data["url"] = this.url !== undefined ? this.url : null;
            return data;
        };
        return Anonymous14;
    }());
    GithubApiClient.Anonymous14 = Anonymous14;
    var Anonymous15 = /** @class */ (function () {
        function Anonymous15(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Anonymous15.prototype.init = function (data) {
            if (data) {
                this.created_at = data["created_at"] !== undefined ? data["created_at"] : null;
                this.creator = data["creator"] ? Creator4.fromJS(data["creator"]) : null;
                this.description = data["description"] !== undefined ? data["description"] : null;
                this.id = data["id"] !== undefined ? data["id"] : null;
                this.payload = data["payload"] !== undefined ? data["payload"] : null;
                this.state = data["state"] !== undefined ? data["state"] : null;
                this.target_url = data["target_url"] !== undefined ? data["target_url"] : null;
                this.updated_at = data["updated_at"] !== undefined ? data["updated_at"] : null;
                this.url = data["url"] !== undefined ? data["url"] : null;
            }
        };
        Anonymous15.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Anonymous15();
            result.init(data);
            return result;
        };
        Anonymous15.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["created_at"] = this.created_at !== undefined ? this.created_at : null;
            data["creator"] = this.creator ? this.creator.toJSON() : null;
            data["description"] = this.description !== undefined ? this.description : null;
            data["id"] = this.id !== undefined ? this.id : null;
            data["payload"] = this.payload !== undefined ? this.payload : null;
            data["state"] = this.state !== undefined ? this.state : null;
            data["target_url"] = this.target_url !== undefined ? this.target_url : null;
            data["updated_at"] = this.updated_at !== undefined ? this.updated_at : null;
            data["url"] = this.url !== undefined ? this.url : null;
            return data;
        };
        return Anonymous15;
    }());
    GithubApiClient.Anonymous15 = Anonymous15;
    var Anonymous16 = /** @class */ (function () {
        function Anonymous16(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Anonymous16.prototype.init = function (data) {
            if (data) {
                this.clone_url = data["clone_url"] !== undefined ? data["clone_url"] : null;
                this.created_at = data["created_at"] !== undefined ? data["created_at"] : null;
                this.description = data["description"] !== undefined ? data["description"] : null;
                this.fork = data["fork"] !== undefined ? data["fork"] : null;
                this.forks = data["forks"] !== undefined ? data["forks"] : null;
                this.forks_count = data["forks_count"] !== undefined ? data["forks_count"] : null;
                this.full_name = data["full_name"] !== undefined ? data["full_name"] : null;
                this.git_url = data["git_url"] !== undefined ? data["git_url"] : null;
                this.homepage = data["homepage"] !== undefined ? data["homepage"] : null;
                this.html_url = data["html_url"] !== undefined ? data["html_url"] : null;
                this.id = data["id"] !== undefined ? data["id"] : null;
                this.language = data["language"] !== undefined ? data["language"] : null;
                this.master_branch = data["master_branch"] !== undefined ? data["master_branch"] : null;
                this.mirror_url = data["mirror_url"] !== undefined ? data["mirror_url"] : null;
                this.name = data["name"] !== undefined ? data["name"] : null;
                this.open_issues = data["open_issues"] !== undefined ? data["open_issues"] : null;
                this.open_issues_count = data["open_issues_count"] !== undefined ? data["open_issues_count"] : null;
                this.owner = data["owner"] ? Owner5.fromJS(data["owner"]) : null;
                this.private = data["private"] !== undefined ? data["private"] : null;
                this.pushed_at = data["pushed_at"] !== undefined ? data["pushed_at"] : null;
                this.size = data["size"] !== undefined ? data["size"] : null;
                this.ssh_url = data["ssh_url"] !== undefined ? data["ssh_url"] : null;
                this.svn_url = data["svn_url"] !== undefined ? data["svn_url"] : null;
                this.updated_at = data["updated_at"] !== undefined ? data["updated_at"] : null;
                this.url = data["url"] !== undefined ? data["url"] : null;
                this.watchers = data["watchers"] !== undefined ? data["watchers"] : null;
                this.watchers_count = data["watchers_count"] !== undefined ? data["watchers_count"] : null;
            }
        };
        Anonymous16.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Anonymous16();
            result.init(data);
            return result;
        };
        Anonymous16.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["clone_url"] = this.clone_url !== undefined ? this.clone_url : null;
            data["created_at"] = this.created_at !== undefined ? this.created_at : null;
            data["description"] = this.description !== undefined ? this.description : null;
            data["fork"] = this.fork !== undefined ? this.fork : null;
            data["forks"] = this.forks !== undefined ? this.forks : null;
            data["forks_count"] = this.forks_count !== undefined ? this.forks_count : null;
            data["full_name"] = this.full_name !== undefined ? this.full_name : null;
            data["git_url"] = this.git_url !== undefined ? this.git_url : null;
            data["homepage"] = this.homepage !== undefined ? this.homepage : null;
            data["html_url"] = this.html_url !== undefined ? this.html_url : null;
            data["id"] = this.id !== undefined ? this.id : null;
            data["language"] = this.language !== undefined ? this.language : null;
            data["master_branch"] = this.master_branch !== undefined ? this.master_branch : null;
            data["mirror_url"] = this.mirror_url !== undefined ? this.mirror_url : null;
            data["name"] = this.name !== undefined ? this.name : null;
            data["open_issues"] = this.open_issues !== undefined ? this.open_issues : null;
            data["open_issues_count"] = this.open_issues_count !== undefined ? this.open_issues_count : null;
            data["owner"] = this.owner ? this.owner.toJSON() : null;
            data["private"] = this.private !== undefined ? this.private : null;
            data["pushed_at"] = this.pushed_at !== undefined ? this.pushed_at : null;
            data["size"] = this.size !== undefined ? this.size : null;
            data["ssh_url"] = this.ssh_url !== undefined ? this.ssh_url : null;
            data["svn_url"] = this.svn_url !== undefined ? this.svn_url : null;
            data["updated_at"] = this.updated_at !== undefined ? this.updated_at : null;
            data["url"] = this.url !== undefined ? this.url : null;
            data["watchers"] = this.watchers !== undefined ? this.watchers : null;
            data["watchers_count"] = this.watchers_count !== undefined ? this.watchers_count : null;
            return data;
        };
        return Anonymous16;
    }());
    GithubApiClient.Anonymous16 = Anonymous16;
    var Anonymous17 = /** @class */ (function () {
        function Anonymous17(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Anonymous17.prototype.init = function (data) {
            if (data) {
                this.object = data["object"] ? Object4.fromJS(data["object"]) : null;
                this.ref = data["ref"] !== undefined ? data["ref"] : null;
                this.url = data["url"] !== undefined ? data["url"] : null;
            }
        };
        Anonymous17.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Anonymous17();
            result.init(data);
            return result;
        };
        Anonymous17.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["object"] = this.object ? this.object.toJSON() : null;
            data["ref"] = this.ref !== undefined ? this.ref : null;
            data["url"] = this.url !== undefined ? this.url : null;
            return data;
        };
        return Anonymous17;
    }());
    GithubApiClient.Anonymous17 = Anonymous17;
    var Anonymous18 = /** @class */ (function () {
        function Anonymous18(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Anonymous18.prototype.init = function (data) {
            if (data) {
                this.active = data["active"] !== undefined ? data["active"] : null;
                this.config = data["config"] ? Config.fromJS(data["config"]) : null;
                this.created_at = data["created_at"] !== undefined ? data["created_at"] : null;
                if (data["events"] && data["events"].constructor === Array) {
                    this.events = [];
                    for (var _i = 0, _a = data["events"]; _i < _a.length; _i++) {
                        var item = _a[_i];
                        this.events.push(item);
                    }
                }
                this.id = data["id"] !== undefined ? data["id"] : null;
                this.name = data["name"] !== undefined ? data["name"] : null;
                this.updated_at = data["updated_at"] !== undefined ? data["updated_at"] : null;
                this.url = data["url"] !== undefined ? data["url"] : null;
            }
        };
        Anonymous18.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Anonymous18();
            result.init(data);
            return result;
        };
        Anonymous18.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["active"] = this.active !== undefined ? this.active : null;
            data["config"] = this.config ? this.config.toJSON() : null;
            data["created_at"] = this.created_at !== undefined ? this.created_at : null;
            if (this.events && this.events.constructor === Array) {
                data["events"] = [];
                for (var _i = 0, _a = this.events; _i < _a.length; _i++) {
                    var item = _a[_i];
                    data["events"].push(item);
                }
            }
            data["id"] = this.id !== undefined ? this.id : null;
            data["name"] = this.name !== undefined ? this.name : null;
            data["updated_at"] = this.updated_at !== undefined ? this.updated_at : null;
            data["url"] = this.url !== undefined ? this.url : null;
            return data;
        };
        return Anonymous18;
    }());
    GithubApiClient.Anonymous18 = Anonymous18;
    var Anonymous19 = /** @class */ (function () {
        function Anonymous19(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Anonymous19.prototype.init = function (data) {
            if (data) {
                this._links = data["_links"] ? _links7.fromJS(data["_links"]) : null;
                this.body = data["body"] !== undefined ? data["body"] : null;
                this.commit_id = data["commit_id"] !== undefined ? data["commit_id"] : null;
                this.created_at = data["created_at"] !== undefined ? data["created_at"] : null;
                this.id = data["id"] !== undefined ? data["id"] : null;
                this.path = data["path"] !== undefined ? data["path"] : null;
                this.position = data["position"] !== undefined ? data["position"] : null;
                this.updated_at = data["updated_at"] !== undefined ? data["updated_at"] : null;
                this.url = data["url"] !== undefined ? data["url"] : null;
                this.user = data["user"] ? User12.fromJS(data["user"]) : null;
            }
        };
        Anonymous19.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Anonymous19();
            result.init(data);
            return result;
        };
        Anonymous19.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["_links"] = this._links ? this._links.toJSON() : null;
            data["body"] = this.body !== undefined ? this.body : null;
            data["commit_id"] = this.commit_id !== undefined ? this.commit_id : null;
            data["created_at"] = this.created_at !== undefined ? this.created_at : null;
            data["id"] = this.id !== undefined ? this.id : null;
            data["path"] = this.path !== undefined ? this.path : null;
            data["position"] = this.position !== undefined ? this.position : null;
            data["updated_at"] = this.updated_at !== undefined ? this.updated_at : null;
            data["url"] = this.url !== undefined ? this.url : null;
            data["user"] = this.user ? this.user.toJSON() : null;
            return data;
        };
        return Anonymous19;
    }());
    GithubApiClient.Anonymous19 = Anonymous19;
    var Anonymous20 = /** @class */ (function () {
        function Anonymous20(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Anonymous20.prototype.init = function (data) {
            if (data) {
                this.color = data["color"] !== undefined ? data["color"] : null;
                this.name = data["name"] !== undefined ? data["name"] : null;
                this.url = data["url"] !== undefined ? data["url"] : null;
            }
        };
        Anonymous20.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Anonymous20();
            result.init(data);
            return result;
        };
        Anonymous20.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["color"] = this.color !== undefined ? this.color : null;
            data["name"] = this.name !== undefined ? this.name : null;
            data["url"] = this.url !== undefined ? this.url : null;
            return data;
        };
        return Anonymous20;
    }());
    GithubApiClient.Anonymous20 = Anonymous20;
    var Anonymous21 = /** @class */ (function () {
        function Anonymous21(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Anonymous21.prototype.init = function (data) {
            if (data) {
                this.id = data["id"] !== undefined ? data["id"] : null;
                this.key = data["key"] !== undefined ? data["key"] : null;
                this.title = data["title"] !== undefined ? data["title"] : null;
                this.url = data["url"] !== undefined ? data["url"] : null;
            }
        };
        Anonymous21.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Anonymous21();
            result.init(data);
            return result;
        };
        Anonymous21.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["id"] = this.id !== undefined ? this.id : null;
            data["key"] = this.key !== undefined ? this.key : null;
            data["title"] = this.title !== undefined ? this.title : null;
            data["url"] = this.url !== undefined ? this.url : null;
            return data;
        };
        return Anonymous21;
    }());
    GithubApiClient.Anonymous21 = Anonymous21;
    var Anonymous22 = /** @class */ (function () {
        function Anonymous22(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Anonymous22.prototype.init = function (data) {
            if (data) {
                this._links = data["_links"] ? _links8.fromJS(data["_links"]) : null;
                this.base = data["base"] ? Base2.fromJS(data["base"]) : null;
                this.body = data["body"] !== undefined ? data["body"] : null;
                this.closed_at = data["closed_at"] !== undefined ? data["closed_at"] : null;
                this.created_at = data["created_at"] !== undefined ? data["created_at"] : null;
                this.diff_url = data["diff_url"] !== undefined ? data["diff_url"] : null;
                this.head = data["head"] ? Head2.fromJS(data["head"]) : null;
                this.html_url = data["html_url"] !== undefined ? data["html_url"] : null;
                this.issue_url = data["issue_url"] !== undefined ? data["issue_url"] : null;
                this.merged_at = data["merged_at"] !== undefined ? data["merged_at"] : null;
                this.number = data["number"] !== undefined ? data["number"] : null;
                this.patch_url = data["patch_url"] !== undefined ? data["patch_url"] : null;
                this.state = data["state"] !== undefined ? data["state"] : null;
                this.title = data["title"] !== undefined ? data["title"] : null;
                this.updated_at = data["updated_at"] !== undefined ? data["updated_at"] : null;
                this.url = data["url"] !== undefined ? data["url"] : null;
                this.user = data["user"] ? User13.fromJS(data["user"]) : null;
            }
        };
        Anonymous22.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Anonymous22();
            result.init(data);
            return result;
        };
        Anonymous22.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["_links"] = this._links ? this._links.toJSON() : null;
            data["base"] = this.base ? this.base.toJSON() : null;
            data["body"] = this.body !== undefined ? this.body : null;
            data["closed_at"] = this.closed_at !== undefined ? this.closed_at : null;
            data["created_at"] = this.created_at !== undefined ? this.created_at : null;
            data["diff_url"] = this.diff_url !== undefined ? this.diff_url : null;
            data["head"] = this.head ? this.head.toJSON() : null;
            data["html_url"] = this.html_url !== undefined ? this.html_url : null;
            data["issue_url"] = this.issue_url !== undefined ? this.issue_url : null;
            data["merged_at"] = this.merged_at !== undefined ? this.merged_at : null;
            data["number"] = this.number !== undefined ? this.number : null;
            data["patch_url"] = this.patch_url !== undefined ? this.patch_url : null;
            data["state"] = this.state !== undefined ? this.state : null;
            data["title"] = this.title !== undefined ? this.title : null;
            data["updated_at"] = this.updated_at !== undefined ? this.updated_at : null;
            data["url"] = this.url !== undefined ? this.url : null;
            data["user"] = this.user ? this.user.toJSON() : null;
            return data;
        };
        return Anonymous22;
    }());
    GithubApiClient.Anonymous22 = Anonymous22;
    var Anonymous23 = /** @class */ (function () {
        function Anonymous23(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Anonymous23.prototype.init = function (data) {
            if (data) {
                if (data["assets"] && data["assets"].constructor === Array) {
                    this.assets = [];
                    for (var _i = 0, _a = data["assets"]; _i < _a.length; _i++) {
                        var item = _a[_i];
                        this.assets.push(Assets2.fromJS(item));
                    }
                }
                this.assets_url = data["assets_url"] !== undefined ? data["assets_url"] : null;
                this.author = data["author"] ? Author8.fromJS(data["author"]) : null;
                this.body = data["body"] !== undefined ? data["body"] : null;
                this.created_at = data["created_at"] !== undefined ? data["created_at"] : null;
                this.draft = data["draft"] !== undefined ? data["draft"] : null;
                this.html_url = data["html_url"] !== undefined ? data["html_url"] : null;
                this.id = data["id"] !== undefined ? data["id"] : null;
                this.name = data["name"] !== undefined ? data["name"] : null;
                this.prerelease = data["prerelease"] !== undefined ? data["prerelease"] : null;
                this.published_at = data["published_at"] !== undefined ? data["published_at"] : null;
                this.tag_name = data["tag_name"] !== undefined ? data["tag_name"] : null;
                this.tarball_url = data["tarball_url"] !== undefined ? data["tarball_url"] : null;
                this.target_commitish = data["target_commitish"] !== undefined ? data["target_commitish"] : null;
                this.upload_url = data["upload_url"] !== undefined ? data["upload_url"] : null;
                this.url = data["url"] !== undefined ? data["url"] : null;
                this.zipball_url = data["zipball_url"] !== undefined ? data["zipball_url"] : null;
            }
        };
        Anonymous23.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Anonymous23();
            result.init(data);
            return result;
        };
        Anonymous23.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            if (this.assets && this.assets.constructor === Array) {
                data["assets"] = [];
                for (var _i = 0, _a = this.assets; _i < _a.length; _i++) {
                    var item = _a[_i];
                    data["assets"].push(item.toJSON());
                }
            }
            data["assets_url"] = this.assets_url !== undefined ? this.assets_url : null;
            data["author"] = this.author ? this.author.toJSON() : null;
            data["body"] = this.body !== undefined ? this.body : null;
            data["created_at"] = this.created_at !== undefined ? this.created_at : null;
            data["draft"] = this.draft !== undefined ? this.draft : null;
            data["html_url"] = this.html_url !== undefined ? this.html_url : null;
            data["id"] = this.id !== undefined ? this.id : null;
            data["name"] = this.name !== undefined ? this.name : null;
            data["prerelease"] = this.prerelease !== undefined ? this.prerelease : null;
            data["published_at"] = this.published_at !== undefined ? this.published_at : null;
            data["tag_name"] = this.tag_name !== undefined ? this.tag_name : null;
            data["tarball_url"] = this.tarball_url !== undefined ? this.tarball_url : null;
            data["target_commitish"] = this.target_commitish !== undefined ? this.target_commitish : null;
            data["upload_url"] = this.upload_url !== undefined ? this.upload_url : null;
            data["url"] = this.url !== undefined ? this.url : null;
            data["zipball_url"] = this.zipball_url !== undefined ? this.zipball_url : null;
            return data;
        };
        return Anonymous23;
    }());
    GithubApiClient.Anonymous23 = Anonymous23;
    var Anonymous24 = /** @class */ (function () {
        function Anonymous24(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Anonymous24.prototype.init = function (data) {
            if (data) {
                this.content_type = data["content_type"] !== undefined ? data["content_type"] : null;
                this.created_at = data["created_at"] !== undefined ? data["created_at"] : null;
                this.download_count = data["download_count"] !== undefined ? data["download_count"] : null;
                this.id = data["id"] !== undefined ? data["id"] : null;
                this.label = data["label"] !== undefined ? data["label"] : null;
                this.name = data["name"] !== undefined ? data["name"] : null;
                this.size = data["size"] !== undefined ? data["size"] : null;
                this.state = data["state"] !== undefined ? data["state"] : null;
                this.updated_at = data["updated_at"] !== undefined ? data["updated_at"] : null;
                this.uploader = data["uploader"] ? Uploader2.fromJS(data["uploader"]) : null;
                this.url = data["url"] !== undefined ? data["url"] : null;
            }
        };
        Anonymous24.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Anonymous24();
            result.init(data);
            return result;
        };
        Anonymous24.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["content_type"] = this.content_type !== undefined ? this.content_type : null;
            data["created_at"] = this.created_at !== undefined ? this.created_at : null;
            data["download_count"] = this.download_count !== undefined ? this.download_count : null;
            data["id"] = this.id !== undefined ? this.id : null;
            data["label"] = this.label !== undefined ? this.label : null;
            data["name"] = this.name !== undefined ? this.name : null;
            data["size"] = this.size !== undefined ? this.size : null;
            data["state"] = this.state !== undefined ? this.state : null;
            data["updated_at"] = this.updated_at !== undefined ? this.updated_at : null;
            data["uploader"] = this.uploader ? this.uploader.toJSON() : null;
            data["url"] = this.url !== undefined ? this.url : null;
            return data;
        };
        return Anonymous24;
    }());
    GithubApiClient.Anonymous24 = Anonymous24;
    var Anonymous25 = /** @class */ (function () {
        function Anonymous25(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Anonymous25.prototype.init = function (data) {
            if (data) {
                if (data["days"] && data["days"].constructor === Array) {
                    this.days = [];
                    for (var _i = 0, _a = data["days"]; _i < _a.length; _i++) {
                        var item = _a[_i];
                        this.days.push(item);
                    }
                }
                this.total = data["total"] !== undefined ? data["total"] : null;
                this.week = data["week"] !== undefined ? data["week"] : null;
            }
        };
        Anonymous25.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Anonymous25();
            result.init(data);
            return result;
        };
        Anonymous25.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            if (this.days && this.days.constructor === Array) {
                data["days"] = [];
                for (var _i = 0, _a = this.days; _i < _a.length; _i++) {
                    var item = _a[_i];
                    data["days"].push(item);
                }
            }
            data["total"] = this.total !== undefined ? this.total : null;
            data["week"] = this.week !== undefined ? this.week : null;
            return data;
        };
        return Anonymous25;
    }());
    GithubApiClient.Anonymous25 = Anonymous25;
    var Anonymous26 = /** @class */ (function () {
        function Anonymous26(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Anonymous26.prototype.init = function (data) {
            if (data) {
                this.author = data["author"] ? Author9.fromJS(data["author"]) : null;
                this.total = data["total"] !== undefined ? data["total"] : null;
                if (data["weeks"] && data["weeks"].constructor === Array) {
                    this.weeks = [];
                    for (var _i = 0, _a = data["weeks"]; _i < _a.length; _i++) {
                        var item = _a[_i];
                        this.weeks.push(Weeks.fromJS(item));
                    }
                }
            }
        };
        Anonymous26.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Anonymous26();
            result.init(data);
            return result;
        };
        Anonymous26.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["author"] = this.author ? this.author.toJSON() : null;
            data["total"] = this.total !== undefined ? this.total : null;
            if (this.weeks && this.weeks.constructor === Array) {
                data["weeks"] = [];
                for (var _i = 0, _a = this.weeks; _i < _a.length; _i++) {
                    var item = _a[_i];
                    data["weeks"].push(item.toJSON());
                }
            }
            return data;
        };
        return Anonymous26;
    }());
    GithubApiClient.Anonymous26 = Anonymous26;
    var Anonymous27 = /** @class */ (function () {
        function Anonymous27(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Anonymous27.prototype.init = function (data) {
            if (data) {
                this.created_at = data["created_at"] !== undefined ? data["created_at"] : null;
                this.creator = data["creator"] ? Creator5.fromJS(data["creator"]) : null;
                this.description = data["description"] !== undefined ? data["description"] : null;
                this.id = data["id"] !== undefined ? data["id"] : null;
                this.state = data["state"] !== undefined ? data["state"] : null;
                this.target_url = data["target_url"] !== undefined ? data["target_url"] : null;
                this.updated_at = data["updated_at"] !== undefined ? data["updated_at"] : null;
                this.url = data["url"] !== undefined ? data["url"] : null;
            }
        };
        Anonymous27.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Anonymous27();
            result.init(data);
            return result;
        };
        Anonymous27.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["created_at"] = this.created_at !== undefined ? this.created_at : null;
            data["creator"] = this.creator ? this.creator.toJSON() : null;
            data["description"] = this.description !== undefined ? this.description : null;
            data["id"] = this.id !== undefined ? this.id : null;
            data["state"] = this.state !== undefined ? this.state : null;
            data["target_url"] = this.target_url !== undefined ? this.target_url : null;
            data["updated_at"] = this.updated_at !== undefined ? this.updated_at : null;
            data["url"] = this.url !== undefined ? this.url : null;
            return data;
        };
        return Anonymous27;
    }());
    GithubApiClient.Anonymous27 = Anonymous27;
    var Anonymous28 = /** @class */ (function () {
        function Anonymous28(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Anonymous28.prototype.init = function (data) {
            if (data) {
                this.clone_url = data["clone_url"] !== undefined ? data["clone_url"] : null;
                this.created_at = data["created_at"] !== undefined ? data["created_at"] : null;
                this.description = data["description"] !== undefined ? data["description"] : null;
                this.fork = data["fork"] !== undefined ? data["fork"] : null;
                this.forks = data["forks"] !== undefined ? data["forks"] : null;
                this.forks_count = data["forks_count"] !== undefined ? data["forks_count"] : null;
                this.full_name = data["full_name"] !== undefined ? data["full_name"] : null;
                this.git_url = data["git_url"] !== undefined ? data["git_url"] : null;
                this.homepage = data["homepage"] !== undefined ? data["homepage"] : null;
                this.html_url = data["html_url"] !== undefined ? data["html_url"] : null;
                this.id = data["id"] !== undefined ? data["id"] : null;
                this.language = data["language"] !== undefined ? data["language"] : null;
                this.master_branch = data["master_branch"] !== undefined ? data["master_branch"] : null;
                this.mirror_url = data["mirror_url"] !== undefined ? data["mirror_url"] : null;
                this.name = data["name"] !== undefined ? data["name"] : null;
                this.open_issues = data["open_issues"] !== undefined ? data["open_issues"] : null;
                this.open_issues_count = data["open_issues_count"] !== undefined ? data["open_issues_count"] : null;
                this.owner = data["owner"] ? Owner6.fromJS(data["owner"]) : null;
                this.private = data["private"] !== undefined ? data["private"] : null;
                this.pushed_at = data["pushed_at"] !== undefined ? data["pushed_at"] : null;
                this.size = data["size"] !== undefined ? data["size"] : null;
                this.ssh_url = data["ssh_url"] !== undefined ? data["ssh_url"] : null;
                this.svn_url = data["svn_url"] !== undefined ? data["svn_url"] : null;
                this.updated_at = data["updated_at"] !== undefined ? data["updated_at"] : null;
                this.url = data["url"] !== undefined ? data["url"] : null;
                this.watchers = data["watchers"] !== undefined ? data["watchers"] : null;
                this.watchers_count = data["watchers_count"] !== undefined ? data["watchers_count"] : null;
            }
        };
        Anonymous28.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Anonymous28();
            result.init(data);
            return result;
        };
        Anonymous28.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["clone_url"] = this.clone_url !== undefined ? this.clone_url : null;
            data["created_at"] = this.created_at !== undefined ? this.created_at : null;
            data["description"] = this.description !== undefined ? this.description : null;
            data["fork"] = this.fork !== undefined ? this.fork : null;
            data["forks"] = this.forks !== undefined ? this.forks : null;
            data["forks_count"] = this.forks_count !== undefined ? this.forks_count : null;
            data["full_name"] = this.full_name !== undefined ? this.full_name : null;
            data["git_url"] = this.git_url !== undefined ? this.git_url : null;
            data["homepage"] = this.homepage !== undefined ? this.homepage : null;
            data["html_url"] = this.html_url !== undefined ? this.html_url : null;
            data["id"] = this.id !== undefined ? this.id : null;
            data["language"] = this.language !== undefined ? this.language : null;
            data["master_branch"] = this.master_branch !== undefined ? this.master_branch : null;
            data["mirror_url"] = this.mirror_url !== undefined ? this.mirror_url : null;
            data["name"] = this.name !== undefined ? this.name : null;
            data["open_issues"] = this.open_issues !== undefined ? this.open_issues : null;
            data["open_issues_count"] = this.open_issues_count !== undefined ? this.open_issues_count : null;
            data["owner"] = this.owner ? this.owner.toJSON() : null;
            data["private"] = this.private !== undefined ? this.private : null;
            data["pushed_at"] = this.pushed_at !== undefined ? this.pushed_at : null;
            data["size"] = this.size !== undefined ? this.size : null;
            data["ssh_url"] = this.ssh_url !== undefined ? this.ssh_url : null;
            data["svn_url"] = this.svn_url !== undefined ? this.svn_url : null;
            data["updated_at"] = this.updated_at !== undefined ? this.updated_at : null;
            data["url"] = this.url !== undefined ? this.url : null;
            data["watchers"] = this.watchers !== undefined ? this.watchers : null;
            data["watchers_count"] = this.watchers_count !== undefined ? this.watchers_count : null;
            return data;
        };
        return Anonymous28;
    }());
    GithubApiClient.Anonymous28 = Anonymous28;
    var Anonymous29 = /** @class */ (function () {
        function Anonymous29(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Anonymous29.prototype.init = function (data) {
            if (data) {
                this.clone_url = data["clone_url"] !== undefined ? data["clone_url"] : null;
                this.created_at = data["created_at"] !== undefined ? data["created_at"] : null;
                this.description = data["description"] !== undefined ? data["description"] : null;
                this.fork = data["fork"] !== undefined ? data["fork"] : null;
                this.forks = data["forks"] !== undefined ? data["forks"] : null;
                this.forks_count = data["forks_count"] !== undefined ? data["forks_count"] : null;
                this.full_name = data["full_name"] !== undefined ? data["full_name"] : null;
                this.git_url = data["git_url"] !== undefined ? data["git_url"] : null;
                this.homepage = data["homepage"] !== undefined ? data["homepage"] : null;
                this.html_url = data["html_url"] !== undefined ? data["html_url"] : null;
                this.id = data["id"] !== undefined ? data["id"] : null;
                this.language = data["language"] !== undefined ? data["language"] : null;
                this.master_branch = data["master_branch"] !== undefined ? data["master_branch"] : null;
                this.mirror_url = data["mirror_url"] !== undefined ? data["mirror_url"] : null;
                this.name = data["name"] !== undefined ? data["name"] : null;
                this.open_issues = data["open_issues"] !== undefined ? data["open_issues"] : null;
                this.open_issues_count = data["open_issues_count"] !== undefined ? data["open_issues_count"] : null;
                this.owner = data["owner"] ? Owner7.fromJS(data["owner"]) : null;
                this.private = data["private"] !== undefined ? data["private"] : null;
                this.pushed_at = data["pushed_at"] !== undefined ? data["pushed_at"] : null;
                this.size = data["size"] !== undefined ? data["size"] : null;
                this.ssh_url = data["ssh_url"] !== undefined ? data["ssh_url"] : null;
                this.svn_url = data["svn_url"] !== undefined ? data["svn_url"] : null;
                this.updated_at = data["updated_at"] !== undefined ? data["updated_at"] : null;
                this.url = data["url"] !== undefined ? data["url"] : null;
                this.watchers = data["watchers"] !== undefined ? data["watchers"] : null;
                this.watchers_count = data["watchers_count"] !== undefined ? data["watchers_count"] : null;
            }
        };
        Anonymous29.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Anonymous29();
            result.init(data);
            return result;
        };
        Anonymous29.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["clone_url"] = this.clone_url !== undefined ? this.clone_url : null;
            data["created_at"] = this.created_at !== undefined ? this.created_at : null;
            data["description"] = this.description !== undefined ? this.description : null;
            data["fork"] = this.fork !== undefined ? this.fork : null;
            data["forks"] = this.forks !== undefined ? this.forks : null;
            data["forks_count"] = this.forks_count !== undefined ? this.forks_count : null;
            data["full_name"] = this.full_name !== undefined ? this.full_name : null;
            data["git_url"] = this.git_url !== undefined ? this.git_url : null;
            data["homepage"] = this.homepage !== undefined ? this.homepage : null;
            data["html_url"] = this.html_url !== undefined ? this.html_url : null;
            data["id"] = this.id !== undefined ? this.id : null;
            data["language"] = this.language !== undefined ? this.language : null;
            data["master_branch"] = this.master_branch !== undefined ? this.master_branch : null;
            data["mirror_url"] = this.mirror_url !== undefined ? this.mirror_url : null;
            data["name"] = this.name !== undefined ? this.name : null;
            data["open_issues"] = this.open_issues !== undefined ? this.open_issues : null;
            data["open_issues_count"] = this.open_issues_count !== undefined ? this.open_issues_count : null;
            data["owner"] = this.owner ? this.owner.toJSON() : null;
            data["private"] = this.private !== undefined ? this.private : null;
            data["pushed_at"] = this.pushed_at !== undefined ? this.pushed_at : null;
            data["size"] = this.size !== undefined ? this.size : null;
            data["ssh_url"] = this.ssh_url !== undefined ? this.ssh_url : null;
            data["svn_url"] = this.svn_url !== undefined ? this.svn_url : null;
            data["updated_at"] = this.updated_at !== undefined ? this.updated_at : null;
            data["url"] = this.url !== undefined ? this.url : null;
            data["watchers"] = this.watchers !== undefined ? this.watchers : null;
            data["watchers_count"] = this.watchers_count !== undefined ? this.watchers_count : null;
            return data;
        };
        return Anonymous29;
    }());
    GithubApiClient.Anonymous29 = Anonymous29;
    var Anonymous30 = /** @class */ (function () {
        function Anonymous30(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Anonymous30.prototype.init = function (data) {
            if (data) {
                this.id = data["id"] !== undefined ? data["id"] : null;
                this.members_count = data["members_count"] !== undefined ? data["members_count"] : null;
                this.name = data["name"] !== undefined ? data["name"] : null;
                this.organization = data["organization"] ? Organization3.fromJS(data["organization"]) : null;
                this.permission = data["permission"] !== undefined ? data["permission"] : null;
                this.repos_count = data["repos_count"] !== undefined ? data["repos_count"] : null;
                this.url = data["url"] !== undefined ? data["url"] : null;
            }
        };
        Anonymous30.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Anonymous30();
            result.init(data);
            return result;
        };
        Anonymous30.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["id"] = this.id !== undefined ? this.id : null;
            data["members_count"] = this.members_count !== undefined ? this.members_count : null;
            data["name"] = this.name !== undefined ? this.name : null;
            data["organization"] = this.organization ? this.organization.toJSON() : null;
            data["permission"] = this.permission !== undefined ? this.permission : null;
            data["repos_count"] = this.repos_count !== undefined ? this.repos_count : null;
            data["url"] = this.url !== undefined ? this.url : null;
            return data;
        };
        return Anonymous30;
    }());
    GithubApiClient.Anonymous30 = Anonymous30;
    var Uploader = /** @class */ (function () {
        function Uploader(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Uploader.prototype.init = function (data) {
            if (data) {
                this.avatar_url = data["avatar_url"] !== undefined ? data["avatar_url"] : null;
                this.events_url = data["events_url"] !== undefined ? data["events_url"] : null;
                this.followers_url = data["followers_url"] !== undefined ? data["followers_url"] : null;
                this.following_url = data["following_url"] !== undefined ? data["following_url"] : null;
                this.gists_url = data["gists_url"] !== undefined ? data["gists_url"] : null;
                this.gravatar_id = data["gravatar_id"] !== undefined ? data["gravatar_id"] : null;
                this.html_url = data["html_url"] !== undefined ? data["html_url"] : null;
                this.id = data["id"] !== undefined ? data["id"] : null;
                this.login = data["login"] !== undefined ? data["login"] : null;
                this.organizations_url = data["organizations_url"] !== undefined ? data["organizations_url"] : null;
                this.received_events_url = data["received_events_url"] !== undefined ? data["received_events_url"] : null;
                this.repos_url = data["repos_url"] !== undefined ? data["repos_url"] : null;
                this.site_admin = data["site_admin"] !== undefined ? data["site_admin"] : null;
                this.starred_url = data["starred_url"] !== undefined ? data["starred_url"] : null;
                this.subscriptions_url = data["subscriptions_url"] !== undefined ? data["subscriptions_url"] : null;
                this.type = data["type"] !== undefined ? data["type"] : null;
                this.url = data["url"] !== undefined ? data["url"] : null;
            }
        };
        Uploader.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Uploader();
            result.init(data);
            return result;
        };
        Uploader.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["avatar_url"] = this.avatar_url !== undefined ? this.avatar_url : null;
            data["events_url"] = this.events_url !== undefined ? this.events_url : null;
            data["followers_url"] = this.followers_url !== undefined ? this.followers_url : null;
            data["following_url"] = this.following_url !== undefined ? this.following_url : null;
            data["gists_url"] = this.gists_url !== undefined ? this.gists_url : null;
            data["gravatar_id"] = this.gravatar_id !== undefined ? this.gravatar_id : null;
            data["html_url"] = this.html_url !== undefined ? this.html_url : null;
            data["id"] = this.id !== undefined ? this.id : null;
            data["login"] = this.login !== undefined ? this.login : null;
            data["organizations_url"] = this.organizations_url !== undefined ? this.organizations_url : null;
            data["received_events_url"] = this.received_events_url !== undefined ? this.received_events_url : null;
            data["repos_url"] = this.repos_url !== undefined ? this.repos_url : null;
            data["site_admin"] = this.site_admin !== undefined ? this.site_admin : null;
            data["starred_url"] = this.starred_url !== undefined ? this.starred_url : null;
            data["subscriptions_url"] = this.subscriptions_url !== undefined ? this.subscriptions_url : null;
            data["type"] = this.type !== undefined ? this.type : null;
            data["url"] = this.url !== undefined ? this.url : null;
            return data;
        };
        return Uploader;
    }());
    GithubApiClient.Uploader = Uploader;
    var BlobEncoding;
    (function (BlobEncoding) {
        BlobEncoding[BlobEncoding["Utf8"] = "utf-8"] = "Utf8";
        BlobEncoding[BlobEncoding["Base64"] = "base64"] = "Base64";
    })(BlobEncoding = GithubApiClient.BlobEncoding || (GithubApiClient.BlobEncoding = {}));
    var _links = /** @class */ (function () {
        function _links(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        _links.prototype.init = function (data) {
            if (data) {
                this.html = data["html"] !== undefined ? data["html"] : null;
                this.self = data["self"] !== undefined ? data["self"] : null;
            }
        };
        _links.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new _links();
            result.init(data);
            return result;
        };
        _links.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["html"] = this.html !== undefined ? this.html : null;
            data["self"] = this.self !== undefined ? this.self : null;
            return data;
        };
        return _links;
    }());
    GithubApiClient._links = _links;
    var Commit2 = /** @class */ (function () {
        function Commit2(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Commit2.prototype.init = function (data) {
            if (data) {
                this.author = data["author"] ? Author10.fromJS(data["author"]) : null;
                this.commit = data["commit"] ? Commit9.fromJS(data["commit"]) : null;
                this.committer = data["committer"] ? Committer7.fromJS(data["committer"]) : null;
                if (data["parents"] && data["parents"].constructor === Array) {
                    this.parents = [];
                    for (var _i = 0, _a = data["parents"]; _i < _a.length; _i++) {
                        var item = _a[_i];
                        this.parents.push(Parents5.fromJS(item));
                    }
                }
                this.sha = data["sha"] !== undefined ? data["sha"] : null;
                this.url = data["url"] !== undefined ? data["url"] : null;
            }
        };
        Commit2.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Commit2();
            result.init(data);
            return result;
        };
        Commit2.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["author"] = this.author ? this.author.toJSON() : null;
            data["commit"] = this.commit ? this.commit.toJSON() : null;
            data["committer"] = this.committer ? this.committer.toJSON() : null;
            if (this.parents && this.parents.constructor === Array) {
                data["parents"] = [];
                for (var _i = 0, _a = this.parents; _i < _a.length; _i++) {
                    var item = _a[_i];
                    data["parents"].push(item.toJSON());
                }
            }
            data["sha"] = this.sha !== undefined ? this.sha : null;
            data["url"] = this.url !== undefined ? this.url : null;
            return data;
        };
        return Commit2;
    }());
    GithubApiClient.Commit2 = Commit2;
    var Author = /** @class */ (function () {
        function Author(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Author.prototype.init = function (data) {
            if (data) {
                this.avatar_url = data["avatar_url"] !== undefined ? data["avatar_url"] : null;
                this.gravatar_id = data["gravatar_id"] !== undefined ? data["gravatar_id"] : null;
                this.id = data["id"] !== undefined ? data["id"] : null;
                this.login = data["login"] !== undefined ? data["login"] : null;
                this.url = data["url"] !== undefined ? data["url"] : null;
            }
        };
        Author.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Author();
            result.init(data);
            return result;
        };
        Author.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["avatar_url"] = this.avatar_url !== undefined ? this.avatar_url : null;
            data["gravatar_id"] = this.gravatar_id !== undefined ? this.gravatar_id : null;
            data["id"] = this.id !== undefined ? this.id : null;
            data["login"] = this.login !== undefined ? this.login : null;
            data["url"] = this.url !== undefined ? this.url : null;
            return data;
        };
        return Author;
    }());
    GithubApiClient.Author = Author;
    var Commit3 = /** @class */ (function () {
        function Commit3(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Commit3.prototype.init = function (data) {
            if (data) {
                this.author = data["author"] ? Author11.fromJS(data["author"]) : null;
                this.committer = data["committer"] ? Committer8.fromJS(data["committer"]) : null;
                this.message = data["message"] !== undefined ? data["message"] : null;
                this.tree = data["tree"] ? Tree5.fromJS(data["tree"]) : null;
                this.url = data["url"] !== undefined ? data["url"] : null;
            }
        };
        Commit3.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Commit3();
            result.init(data);
            return result;
        };
        Commit3.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["author"] = this.author ? this.author.toJSON() : null;
            data["committer"] = this.committer ? this.committer.toJSON() : null;
            data["message"] = this.message !== undefined ? this.message : null;
            data["tree"] = this.tree ? this.tree.toJSON() : null;
            data["url"] = this.url !== undefined ? this.url : null;
            return data;
        };
        return Commit3;
    }());
    GithubApiClient.Commit3 = Commit3;
    var Committer = /** @class */ (function () {
        function Committer(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Committer.prototype.init = function (data) {
            if (data) {
                this.avatar_url = data["avatar_url"] !== undefined ? data["avatar_url"] : null;
                this.gravatar_id = data["gravatar_id"] !== undefined ? data["gravatar_id"] : null;
                this.id = data["id"] !== undefined ? data["id"] : null;
                this.login = data["login"] !== undefined ? data["login"] : null;
                this.url = data["url"] !== undefined ? data["url"] : null;
            }
        };
        Committer.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Committer();
            result.init(data);
            return result;
        };
        Committer.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["avatar_url"] = this.avatar_url !== undefined ? this.avatar_url : null;
            data["gravatar_id"] = this.gravatar_id !== undefined ? this.gravatar_id : null;
            data["id"] = this.id !== undefined ? this.id : null;
            data["login"] = this.login !== undefined ? this.login : null;
            data["url"] = this.url !== undefined ? this.url : null;
            return data;
        };
        return Committer;
    }());
    GithubApiClient.Committer = Committer;
    var Files = /** @class */ (function () {
        function Files(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Files.prototype.init = function (data) {
            if (data) {
                this.additions = data["additions"] !== undefined ? data["additions"] : null;
                this.blob_url = data["blob_url"] !== undefined ? data["blob_url"] : null;
                this.changes = data["changes"] !== undefined ? data["changes"] : null;
                this.deletions = data["deletions"] !== undefined ? data["deletions"] : null;
                this.filename = data["filename"] !== undefined ? data["filename"] : null;
                this.patch = data["patch"] !== undefined ? data["patch"] : null;
                this.raw_url = data["raw_url"] !== undefined ? data["raw_url"] : null;
                this.status = data["status"] !== undefined ? data["status"] : null;
            }
        };
        Files.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Files();
            result.init(data);
            return result;
        };
        Files.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["additions"] = this.additions !== undefined ? this.additions : null;
            data["blob_url"] = this.blob_url !== undefined ? this.blob_url : null;
            data["changes"] = this.changes !== undefined ? this.changes : null;
            data["deletions"] = this.deletions !== undefined ? this.deletions : null;
            data["filename"] = this.filename !== undefined ? this.filename : null;
            data["patch"] = this.patch !== undefined ? this.patch : null;
            data["raw_url"] = this.raw_url !== undefined ? this.raw_url : null;
            data["status"] = this.status !== undefined ? this.status : null;
            return data;
        };
        return Files;
    }());
    GithubApiClient.Files = Files;
    var Parents = /** @class */ (function () {
        function Parents(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Parents.prototype.init = function (data) {
            if (data) {
                this.sha = data["sha"] !== undefined ? data["sha"] : null;
                this.url = data["url"] !== undefined ? data["url"] : null;
            }
        };
        Parents.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Parents();
            result.init(data);
            return result;
        };
        Parents.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["sha"] = this.sha !== undefined ? this.sha : null;
            data["url"] = this.url !== undefined ? this.url : null;
            return data;
        };
        return Parents;
    }());
    GithubApiClient.Parents = Parents;
    var Stats = /** @class */ (function () {
        function Stats(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Stats.prototype.init = function (data) {
            if (data) {
                this.additions = data["additions"] !== undefined ? data["additions"] : null;
                this.deletions = data["deletions"] !== undefined ? data["deletions"] : null;
                this.total = data["total"] !== undefined ? data["total"] : null;
            }
        };
        Stats.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Stats();
            result.init(data);
            return result;
        };
        Stats.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["additions"] = this.additions !== undefined ? this.additions : null;
            data["deletions"] = this.deletions !== undefined ? this.deletions : null;
            data["total"] = this.total !== undefined ? this.total : null;
            return data;
        };
        return Stats;
    }());
    GithubApiClient.Stats = Stats;
    var User2 = /** @class */ (function () {
        function User2(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        User2.prototype.init = function (data) {
            if (data) {
                this.avatar_url = data["avatar_url"] !== undefined ? data["avatar_url"] : null;
                this.gravatar_id = data["gravatar_id"] !== undefined ? data["gravatar_id"] : null;
                this.id = data["id"] !== undefined ? data["id"] : null;
                this.login = data["login"] !== undefined ? data["login"] : null;
                this.url = data["url"] !== undefined ? data["url"] : null;
            }
        };
        User2.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new User2();
            result.init(data);
            return result;
        };
        User2.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["avatar_url"] = this.avatar_url !== undefined ? this.avatar_url : null;
            data["gravatar_id"] = this.gravatar_id !== undefined ? this.gravatar_id : null;
            data["id"] = this.id !== undefined ? this.id : null;
            data["login"] = this.login !== undefined ? this.login : null;
            data["url"] = this.url !== undefined ? this.url : null;
            return data;
        };
        return User2;
    }());
    GithubApiClient.User2 = User2;
    var Base_commit = /** @class */ (function () {
        function Base_commit(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Base_commit.prototype.init = function (data) {
            if (data) {
                this.author = data["author"] ? Author12.fromJS(data["author"]) : null;
                this.commit = data["commit"] ? Commit10.fromJS(data["commit"]) : null;
                this.committer = data["committer"] ? Committer9.fromJS(data["committer"]) : null;
                if (data["parents"] && data["parents"].constructor === Array) {
                    this.parents = [];
                    for (var _i = 0, _a = data["parents"]; _i < _a.length; _i++) {
                        var item = _a[_i];
                        this.parents.push(Parents6.fromJS(item));
                    }
                }
                this.sha = data["sha"] !== undefined ? data["sha"] : null;
                this.url = data["url"] !== undefined ? data["url"] : null;
            }
        };
        Base_commit.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Base_commit();
            result.init(data);
            return result;
        };
        Base_commit.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["author"] = this.author ? this.author.toJSON() : null;
            data["commit"] = this.commit ? this.commit.toJSON() : null;
            data["committer"] = this.committer ? this.committer.toJSON() : null;
            if (this.parents && this.parents.constructor === Array) {
                data["parents"] = [];
                for (var _i = 0, _a = this.parents; _i < _a.length; _i++) {
                    var item = _a[_i];
                    data["parents"].push(item.toJSON());
                }
            }
            data["sha"] = this.sha !== undefined ? this.sha : null;
            data["url"] = this.url !== undefined ? this.url : null;
            return data;
        };
        return Base_commit;
    }());
    GithubApiClient.Base_commit = Base_commit;
    var Commits = /** @class */ (function () {
        function Commits(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Commits.prototype.init = function (data) {
            if (data) {
                this.author = data["author"] ? Author13.fromJS(data["author"]) : null;
                this.commit = data["commit"] ? Commit11.fromJS(data["commit"]) : null;
                this.committer = data["committer"] ? Committer10.fromJS(data["committer"]) : null;
                if (data["parents"] && data["parents"].constructor === Array) {
                    this.parents = [];
                    for (var _i = 0, _a = data["parents"]; _i < _a.length; _i++) {
                        var item = _a[_i];
                        this.parents.push(Parents7.fromJS(item));
                    }
                }
                this.sha = data["sha"] !== undefined ? data["sha"] : null;
                this.url = data["url"] !== undefined ? data["url"] : null;
            }
        };
        Commits.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Commits();
            result.init(data);
            return result;
        };
        Commits.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["author"] = this.author ? this.author.toJSON() : null;
            data["commit"] = this.commit ? this.commit.toJSON() : null;
            data["committer"] = this.committer ? this.committer.toJSON() : null;
            if (this.parents && this.parents.constructor === Array) {
                data["parents"] = [];
                for (var _i = 0, _a = this.parents; _i < _a.length; _i++) {
                    var item = _a[_i];
                    data["parents"].push(item.toJSON());
                }
            }
            data["sha"] = this.sha !== undefined ? this.sha : null;
            data["url"] = this.url !== undefined ? this.url : null;
            return data;
        };
        return Commits;
    }());
    GithubApiClient.Commits = Commits;
    var Files2 = /** @class */ (function () {
        function Files2(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Files2.prototype.init = function (data) {
            if (data) {
                this.additions = data["additions"] !== undefined ? data["additions"] : null;
                this.blob_url = data["blob_url"] !== undefined ? data["blob_url"] : null;
                this.changes = data["changes"] !== undefined ? data["changes"] : null;
                this.contents_url = data["contents_url"] !== undefined ? data["contents_url"] : null;
                this.deletions = data["deletions"] !== undefined ? data["deletions"] : null;
                this.filename = data["filename"] !== undefined ? data["filename"] : null;
                this.patch = data["patch"] !== undefined ? data["patch"] : null;
                this.raw_url = data["raw_url"] !== undefined ? data["raw_url"] : null;
                this.sha = data["sha"] !== undefined ? data["sha"] : null;
                this.status = data["status"] !== undefined ? data["status"] : null;
            }
        };
        Files2.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Files2();
            result.init(data);
            return result;
        };
        Files2.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["additions"] = this.additions !== undefined ? this.additions : null;
            data["blob_url"] = this.blob_url !== undefined ? this.blob_url : null;
            data["changes"] = this.changes !== undefined ? this.changes : null;
            data["contents_url"] = this.contents_url !== undefined ? this.contents_url : null;
            data["deletions"] = this.deletions !== undefined ? this.deletions : null;
            data["filename"] = this.filename !== undefined ? this.filename : null;
            data["patch"] = this.patch !== undefined ? this.patch : null;
            data["raw_url"] = this.raw_url !== undefined ? this.raw_url : null;
            data["sha"] = this.sha !== undefined ? this.sha : null;
            data["status"] = this.status !== undefined ? this.status : null;
            return data;
        };
        return Files2;
    }());
    GithubApiClient.Files2 = Files2;
    var _links2 = /** @class */ (function () {
        function _links2(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        _links2.prototype.init = function (data) {
            if (data) {
                this.git = data["git"] !== undefined ? data["git"] : null;
                this.html = data["html"] !== undefined ? data["html"] : null;
                this.self = data["self"] !== undefined ? data["self"] : null;
            }
        };
        _links2.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new _links2();
            result.init(data);
            return result;
        };
        _links2.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["git"] = this.git !== undefined ? this.git : null;
            data["html"] = this.html !== undefined ? this.html : null;
            data["self"] = this.self !== undefined ? this.self : null;
            return data;
        };
        return _links2;
    }());
    GithubApiClient._links2 = _links2;
    var Commit4 = /** @class */ (function () {
        function Commit4(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Commit4.prototype.init = function (data) {
            if (data) {
                this.author = data["author"] ? Author14.fromJS(data["author"]) : null;
                this.committer = data["committer"] ? Committer11.fromJS(data["committer"]) : null;
                this.html_url = data["html_url"] !== undefined ? data["html_url"] : null;
                this.message = data["message"] !== undefined ? data["message"] : null;
                if (data["parents"] && data["parents"].constructor === Array) {
                    this.parents = [];
                    for (var _i = 0, _a = data["parents"]; _i < _a.length; _i++) {
                        var item = _a[_i];
                        this.parents.push(Parents8.fromJS(item));
                    }
                }
                this.sha = data["sha"] !== undefined ? data["sha"] : null;
                this.tree = data["tree"] ? Tree6.fromJS(data["tree"]) : null;
                this.url = data["url"] !== undefined ? data["url"] : null;
            }
        };
        Commit4.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Commit4();
            result.init(data);
            return result;
        };
        Commit4.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["author"] = this.author ? this.author.toJSON() : null;
            data["committer"] = this.committer ? this.committer.toJSON() : null;
            data["html_url"] = this.html_url !== undefined ? this.html_url : null;
            data["message"] = this.message !== undefined ? this.message : null;
            if (this.parents && this.parents.constructor === Array) {
                data["parents"] = [];
                for (var _i = 0, _a = this.parents; _i < _a.length; _i++) {
                    var item = _a[_i];
                    data["parents"].push(item.toJSON());
                }
            }
            data["sha"] = this.sha !== undefined ? this.sha : null;
            data["tree"] = this.tree ? this.tree.toJSON() : null;
            data["url"] = this.url !== undefined ? this.url : null;
            return data;
        };
        return Commit4;
    }());
    GithubApiClient.Commit4 = Commit4;
    var Content = /** @class */ (function () {
        function Content(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Content.prototype.init = function (data) {
            if (data) {
                this._links = data["_links"] ? _links9.fromJS(data["_links"]) : null;
                this.git_url = data["git_url"] !== undefined ? data["git_url"] : null;
                this.html_url = data["html_url"] !== undefined ? data["html_url"] : null;
                this.name = data["name"] !== undefined ? data["name"] : null;
                this.path = data["path"] !== undefined ? data["path"] : null;
                this.sha = data["sha"] !== undefined ? data["sha"] : null;
                this.size = data["size"] !== undefined ? data["size"] : null;
                this.type = data["type"] !== undefined ? data["type"] : null;
                this.url = data["url"] !== undefined ? data["url"] : null;
            }
        };
        Content.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Content();
            result.init(data);
            return result;
        };
        Content.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["_links"] = this._links ? this._links.toJSON() : null;
            data["git_url"] = this.git_url !== undefined ? this.git_url : null;
            data["html_url"] = this.html_url !== undefined ? this.html_url : null;
            data["name"] = this.name !== undefined ? this.name : null;
            data["path"] = this.path !== undefined ? this.path : null;
            data["sha"] = this.sha !== undefined ? this.sha : null;
            data["size"] = this.size !== undefined ? this.size : null;
            data["type"] = this.type !== undefined ? this.type : null;
            data["url"] = this.url !== undefined ? this.url : null;
            return data;
        };
        return Content;
    }());
    GithubApiClient.Content = Content;
    var Committer2 = /** @class */ (function () {
        function Committer2(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Committer2.prototype.init = function (data) {
            if (data) {
                this.email = data["email"] !== undefined ? data["email"] : null;
                this.name = data["name"] !== undefined ? data["name"] : null;
            }
        };
        Committer2.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Committer2();
            result.init(data);
            return result;
        };
        Committer2.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["email"] = this.email !== undefined ? this.email : null;
            data["name"] = this.name !== undefined ? this.name : null;
            return data;
        };
        return Committer2;
    }());
    GithubApiClient.Committer2 = Committer2;
    var Commit5 = /** @class */ (function () {
        function Commit5(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Commit5.prototype.init = function (data) {
            if (data) {
                this.author = data["author"] ? Author15.fromJS(data["author"]) : null;
                this.committer = data["committer"] ? Committer12.fromJS(data["committer"]) : null;
                this.html_url = data["html_url"] !== undefined ? data["html_url"] : null;
                this.message = data["message"] !== undefined ? data["message"] : null;
                this.parents = data["parents"] ? Parents9.fromJS(data["parents"]) : null;
                this.sha = data["sha"] !== undefined ? data["sha"] : null;
                this.tree = data["tree"] ? Tree7.fromJS(data["tree"]) : null;
                this.url = data["url"] !== undefined ? data["url"] : null;
            }
        };
        Commit5.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Commit5();
            result.init(data);
            return result;
        };
        Commit5.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["author"] = this.author ? this.author.toJSON() : null;
            data["committer"] = this.committer ? this.committer.toJSON() : null;
            data["html_url"] = this.html_url !== undefined ? this.html_url : null;
            data["message"] = this.message !== undefined ? this.message : null;
            data["parents"] = this.parents ? this.parents.toJSON() : null;
            data["sha"] = this.sha !== undefined ? this.sha : null;
            data["tree"] = this.tree ? this.tree.toJSON() : null;
            data["url"] = this.url !== undefined ? this.url : null;
            return data;
        };
        return Commit5;
    }());
    GithubApiClient.Commit5 = Commit5;
    var Committer3 = /** @class */ (function () {
        function Committer3(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Committer3.prototype.init = function (data) {
            if (data) {
                this.email = data["email"] !== undefined ? data["email"] : null;
                this.name = data["name"] !== undefined ? data["name"] : null;
            }
        };
        Committer3.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Committer3();
            result.init(data);
            return result;
        };
        Committer3.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["email"] = this.email !== undefined ? this.email : null;
            data["name"] = this.name !== undefined ? this.name : null;
            return data;
        };
        return Committer3;
    }());
    GithubApiClient.Committer3 = Committer3;
    var Payload = /** @class */ (function () {
        function Payload(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Payload.prototype.init = function (data) {
            if (data) {
                this.deploy_user = data["deploy_user"] !== undefined ? data["deploy_user"] : null;
                this.environment = data["environment"] !== undefined ? data["environment"] : null;
                this.room_id = data["room_id"] !== undefined ? data["room_id"] : null;
            }
        };
        Payload.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Payload();
            result.init(data);
            return result;
        };
        Payload.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["deploy_user"] = this.deploy_user !== undefined ? this.deploy_user : null;
            data["environment"] = this.environment !== undefined ? this.environment : null;
            data["room_id"] = this.room_id !== undefined ? this.room_id : null;
            return data;
        };
        return Payload;
    }());
    GithubApiClient.Payload = Payload;
    var Creator = /** @class */ (function () {
        function Creator(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Creator.prototype.init = function (data) {
            if (data) {
                this.avatar_url = data["avatar_url"] !== undefined ? data["avatar_url"] : null;
                this.events_url = data["events_url"] !== undefined ? data["events_url"] : null;
                this.followers_url = data["followers_url"] !== undefined ? data["followers_url"] : null;
                this.following_url = data["following_url"] !== undefined ? data["following_url"] : null;
                this.gists_url = data["gists_url"] !== undefined ? data["gists_url"] : null;
                this.gravatar_id = data["gravatar_id"] !== undefined ? data["gravatar_id"] : null;
                this.html_url = data["html_url"] !== undefined ? data["html_url"] : null;
                this.id = data["id"] !== undefined ? data["id"] : null;
                this.login = data["login"] !== undefined ? data["login"] : null;
                this.organizations_url = data["organizations_url"] !== undefined ? data["organizations_url"] : null;
                this.received_events_url = data["received_events_url"] !== undefined ? data["received_events_url"] : null;
                this.repos_url = data["repos_url"] !== undefined ? data["repos_url"] : null;
                this.site_admin = data["site_admin"] !== undefined ? data["site_admin"] : null;
                this.starred_url = data["starred_url"] !== undefined ? data["starred_url"] : null;
                this.subscriptions_url = data["subscriptions_url"] !== undefined ? data["subscriptions_url"] : null;
                this.type = data["type"] !== undefined ? data["type"] : null;
                this.url = data["url"] !== undefined ? data["url"] : null;
            }
        };
        Creator.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Creator();
            result.init(data);
            return result;
        };
        Creator.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["avatar_url"] = this.avatar_url !== undefined ? this.avatar_url : null;
            data["events_url"] = this.events_url !== undefined ? this.events_url : null;
            data["followers_url"] = this.followers_url !== undefined ? this.followers_url : null;
            data["following_url"] = this.following_url !== undefined ? this.following_url : null;
            data["gists_url"] = this.gists_url !== undefined ? this.gists_url : null;
            data["gravatar_id"] = this.gravatar_id !== undefined ? this.gravatar_id : null;
            data["html_url"] = this.html_url !== undefined ? this.html_url : null;
            data["id"] = this.id !== undefined ? this.id : null;
            data["login"] = this.login !== undefined ? this.login : null;
            data["organizations_url"] = this.organizations_url !== undefined ? this.organizations_url : null;
            data["received_events_url"] = this.received_events_url !== undefined ? this.received_events_url : null;
            data["repos_url"] = this.repos_url !== undefined ? this.repos_url : null;
            data["site_admin"] = this.site_admin !== undefined ? this.site_admin : null;
            data["starred_url"] = this.starred_url !== undefined ? this.starred_url : null;
            data["subscriptions_url"] = this.subscriptions_url !== undefined ? this.subscriptions_url : null;
            data["type"] = this.type !== undefined ? this.type : null;
            data["url"] = this.url !== undefined ? this.url : null;
            return data;
        };
        return Creator;
    }());
    GithubApiClient.Creator = Creator;
    var EditTeamPermission;
    (function (EditTeamPermission) {
        EditTeamPermission[EditTeamPermission["Pull"] = "pull"] = "Pull";
        EditTeamPermission[EditTeamPermission["Push"] = "push"] = "Push";
        EditTeamPermission[EditTeamPermission["Admin"] = "admin"] = "Admin";
    })(EditTeamPermission = GithubApiClient.EditTeamPermission || (GithubApiClient.EditTeamPermission = {}));
    var Actor = /** @class */ (function () {
        function Actor(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Actor.prototype.init = function (data) {
            if (data) {
                this.avatar_url = data["avatar_url"] !== undefined ? data["avatar_url"] : null;
                this.gravatar_id = data["gravatar_id"] !== undefined ? data["gravatar_id"] : null;
                this.id = data["id"] !== undefined ? data["id"] : null;
                this.login = data["login"] !== undefined ? data["login"] : null;
                this.url = data["url"] !== undefined ? data["url"] : null;
            }
        };
        Actor.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Actor();
            result.init(data);
            return result;
        };
        Actor.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["avatar_url"] = this.avatar_url !== undefined ? this.avatar_url : null;
            data["gravatar_id"] = this.gravatar_id !== undefined ? this.gravatar_id : null;
            data["id"] = this.id !== undefined ? this.id : null;
            data["login"] = this.login !== undefined ? this.login : null;
            data["url"] = this.url !== undefined ? this.url : null;
            return data;
        };
        return Actor;
    }());
    GithubApiClient.Actor = Actor;
    var Issue2 = /** @class */ (function () {
        function Issue2(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Issue2.prototype.init = function (data) {
            if (data) {
                this.assignee = data["assignee"] ? Assignee2.fromJS(data["assignee"]) : null;
                this.body = data["body"] !== undefined ? data["body"] : null;
                this.closed_at = data["closed_at"] !== undefined ? data["closed_at"] : null;
                this.comments = data["comments"] !== undefined ? data["comments"] : null;
                this.created_at = data["created_at"] !== undefined ? data["created_at"] : null;
                this.html_url = data["html_url"] !== undefined ? data["html_url"] : null;
                if (data["labels"] && data["labels"].constructor === Array) {
                    this.labels = [];
                    for (var _i = 0, _a = data["labels"]; _i < _a.length; _i++) {
                        var item = _a[_i];
                        this.labels.push(Labels2.fromJS(item));
                    }
                }
                this.milestone = data["milestone"] ? Milestone3.fromJS(data["milestone"]) : null;
                this.number = data["number"] !== undefined ? data["number"] : null;
                this.pull_request = data["pull_request"] ? Pull_request2.fromJS(data["pull_request"]) : null;
                this.state = data["state"] !== undefined ? data["state"] : null;
                this.title = data["title"] !== undefined ? data["title"] : null;
                this.updated_at = data["updated_at"] !== undefined ? data["updated_at"] : null;
                this.url = data["url"] !== undefined ? data["url"] : null;
                this.user = data["user"] ? User14.fromJS(data["user"]) : null;
            }
        };
        Issue2.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Issue2();
            result.init(data);
            return result;
        };
        Issue2.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["assignee"] = this.assignee ? this.assignee.toJSON() : null;
            data["body"] = this.body !== undefined ? this.body : null;
            data["closed_at"] = this.closed_at !== undefined ? this.closed_at : null;
            data["comments"] = this.comments !== undefined ? this.comments : null;
            data["created_at"] = this.created_at !== undefined ? this.created_at : null;
            data["html_url"] = this.html_url !== undefined ? this.html_url : null;
            if (this.labels && this.labels.constructor === Array) {
                data["labels"] = [];
                for (var _i = 0, _a = this.labels; _i < _a.length; _i++) {
                    var item = _a[_i];
                    data["labels"].push(item.toJSON());
                }
            }
            data["milestone"] = this.milestone ? this.milestone.toJSON() : null;
            data["number"] = this.number !== undefined ? this.number : null;
            data["pull_request"] = this.pull_request ? this.pull_request.toJSON() : null;
            data["state"] = this.state !== undefined ? this.state : null;
            data["title"] = this.title !== undefined ? this.title : null;
            data["updated_at"] = this.updated_at !== undefined ? this.updated_at : null;
            data["url"] = this.url !== undefined ? this.url : null;
            data["user"] = this.user ? this.user.toJSON() : null;
            return data;
        };
        return Issue2;
    }());
    GithubApiClient.Issue2 = Issue2;
    var Actor2 = /** @class */ (function () {
        function Actor2(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Actor2.prototype.init = function (data) {
            if (data) {
                this.avatar_url = data["avatar_url"] !== undefined ? data["avatar_url"] : null;
                this.gravatar_id = data["gravatar_id"] !== undefined ? data["gravatar_id"] : null;
                this.id = data["id"] !== undefined ? data["id"] : null;
                this.login = data["login"] !== undefined ? data["login"] : null;
                this.url = data["url"] !== undefined ? data["url"] : null;
            }
        };
        Actor2.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Actor2();
            result.init(data);
            return result;
        };
        Actor2.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["avatar_url"] = this.avatar_url !== undefined ? this.avatar_url : null;
            data["gravatar_id"] = this.gravatar_id !== undefined ? this.gravatar_id : null;
            data["id"] = this.id !== undefined ? this.id : null;
            data["login"] = this.login !== undefined ? this.login : null;
            data["url"] = this.url !== undefined ? this.url : null;
            return data;
        };
        return Actor2;
    }());
    GithubApiClient.Actor2 = Actor2;
    var Org = /** @class */ (function () {
        function Org(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Org.prototype.init = function (data) {
            if (data) {
                this.avatar_url = data["avatar_url"] !== undefined ? data["avatar_url"] : null;
                this.gravatar_id = data["gravatar_id"] !== undefined ? data["gravatar_id"] : null;
                this.id = data["id"] !== undefined ? data["id"] : null;
                this.login = data["login"] !== undefined ? data["login"] : null;
                this.url = data["url"] !== undefined ? data["url"] : null;
            }
        };
        Org.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Org();
            result.init(data);
            return result;
        };
        Org.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["avatar_url"] = this.avatar_url !== undefined ? this.avatar_url : null;
            data["gravatar_id"] = this.gravatar_id !== undefined ? this.gravatar_id : null;
            data["id"] = this.id !== undefined ? this.id : null;
            data["login"] = this.login !== undefined ? this.login : null;
            data["url"] = this.url !== undefined ? this.url : null;
            return data;
        };
        return Org;
    }());
    GithubApiClient.Org = Org;
    var Repo2 = /** @class */ (function () {
        function Repo2(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Repo2.prototype.init = function (data) {
            if (data) {
                this.id = data["id"] !== undefined ? data["id"] : null;
                this.name = data["name"] !== undefined ? data["name"] : null;
                this.url = data["url"] !== undefined ? data["url"] : null;
            }
        };
        Repo2.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Repo2();
            result.init(data);
            return result;
        };
        Repo2.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["id"] = this.id !== undefined ? this.id : null;
            data["name"] = this.name !== undefined ? this.name : null;
            data["url"] = this.url !== undefined ? this.url : null;
            return data;
        };
        return Repo2;
    }());
    GithubApiClient.Repo2 = Repo2;
    var _links3 = /** @class */ (function () {
        function _links3(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        _links3.prototype.init = function (data) {
            if (data) {
                this.current_user = data["current_user"] ? Current_user.fromJS(data["current_user"]) : null;
                this.current_user_actor = data["current_user_actor"] ? Current_user_actor.fromJS(data["current_user_actor"]) : null;
                this.current_user_organization = data["current_user_organization"] ? Current_user_organization.fromJS(data["current_user_organization"]) : null;
                this.current_user_public = data["current_user_public"] ? Current_user_public.fromJS(data["current_user_public"]) : null;
                this.timeline = data["timeline"] ? Timeline.fromJS(data["timeline"]) : null;
                this.user = data["user"] ? User15.fromJS(data["user"]) : null;
            }
        };
        _links3.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new _links3();
            result.init(data);
            return result;
        };
        _links3.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["current_user"] = this.current_user ? this.current_user.toJSON() : null;
            data["current_user_actor"] = this.current_user_actor ? this.current_user_actor.toJSON() : null;
            data["current_user_organization"] = this.current_user_organization ? this.current_user_organization.toJSON() : null;
            data["current_user_public"] = this.current_user_public ? this.current_user_public.toJSON() : null;
            data["timeline"] = this.timeline ? this.timeline.toJSON() : null;
            data["user"] = this.user ? this.user.toJSON() : null;
            return data;
        };
        return _links3;
    }());
    GithubApiClient._links3 = _links3;
    var Owner = /** @class */ (function () {
        function Owner(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Owner.prototype.init = function (data) {
            if (data) {
                this.avatar_url = data["avatar_url"] !== undefined ? data["avatar_url"] : null;
                this.gravatar_id = data["gravatar_id"] !== undefined ? data["gravatar_id"] : null;
                this.id = data["id"] !== undefined ? data["id"] : null;
                this.login = data["login"] !== undefined ? data["login"] : null;
                this.url = data["url"] !== undefined ? data["url"] : null;
            }
        };
        Owner.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Owner();
            result.init(data);
            return result;
        };
        Owner.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["avatar_url"] = this.avatar_url !== undefined ? this.avatar_url : null;
            data["gravatar_id"] = this.gravatar_id !== undefined ? this.gravatar_id : null;
            data["id"] = this.id !== undefined ? this.id : null;
            data["login"] = this.login !== undefined ? this.login : null;
            data["url"] = this.url !== undefined ? this.url : null;
            return data;
        };
        return Owner;
    }());
    GithubApiClient.Owner = Owner;
    var Files3 = /** @class */ (function () {
        function Files3(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Files3.prototype.init = function (data) {
            if (data) {
                this.ring_erl = data["ring.erl"] ? Ring_erl.fromJS(data["ring.erl"]) : null;
            }
        };
        Files3.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Files3();
            result.init(data);
            return result;
        };
        Files3.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["ring.erl"] = this.ring_erl ? this.ring_erl.toJSON() : null;
            return data;
        };
        return Files3;
    }());
    GithubApiClient.Files3 = Files3;
    var Forks = /** @class */ (function () {
        function Forks(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Forks.prototype.init = function (data) {
            if (data) {
                this.created_at = data["created_at"] !== undefined ? data["created_at"] : null;
                this.url = data["url"] !== undefined ? data["url"] : null;
                this.user = data["user"] ? User16.fromJS(data["user"]) : null;
            }
        };
        Forks.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Forks();
            result.init(data);
            return result;
        };
        Forks.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["created_at"] = this.created_at !== undefined ? this.created_at : null;
            data["url"] = this.url !== undefined ? this.url : null;
            data["user"] = this.user ? this.user.toJSON() : null;
            return data;
        };
        return Forks;
    }());
    GithubApiClient.Forks = Forks;
    var History = /** @class */ (function () {
        function History(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        History.prototype.init = function (data) {
            if (data) {
                this.change_status = data["change_status"] ? Change_status.fromJS(data["change_status"]) : null;
                this.committed_at = data["committed_at"] !== undefined ? data["committed_at"] : null;
                this.url = data["url"] !== undefined ? data["url"] : null;
                this.user = data["user"] ? User17.fromJS(data["user"]) : null;
                this.version = data["version"] !== undefined ? data["version"] : null;
            }
        };
        History.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new History();
            result.init(data);
            return result;
        };
        History.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["change_status"] = this.change_status ? this.change_status.toJSON() : null;
            data["committed_at"] = this.committed_at !== undefined ? this.committed_at : null;
            data["url"] = this.url !== undefined ? this.url : null;
            data["user"] = this.user ? this.user.toJSON() : null;
            data["version"] = this.version !== undefined ? this.version : null;
            return data;
        };
        return History;
    }());
    GithubApiClient.History = History;
    var User3 = /** @class */ (function () {
        function User3(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        User3.prototype.init = function (data) {
            if (data) {
                this.avatar_url = data["avatar_url"] !== undefined ? data["avatar_url"] : null;
                this.gravatar_id = data["gravatar_id"] !== undefined ? data["gravatar_id"] : null;
                this.id = data["id"] !== undefined ? data["id"] : null;
                this.login = data["login"] !== undefined ? data["login"] : null;
                this.url = data["url"] !== undefined ? data["url"] : null;
            }
        };
        User3.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new User3();
            result.init(data);
            return result;
        };
        User3.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["avatar_url"] = this.avatar_url !== undefined ? this.avatar_url : null;
            data["gravatar_id"] = this.gravatar_id !== undefined ? this.gravatar_id : null;
            data["id"] = this.id !== undefined ? this.id : null;
            data["login"] = this.login !== undefined ? this.login : null;
            data["url"] = this.url !== undefined ? this.url : null;
            return data;
        };
        return User3;
    }());
    GithubApiClient.User3 = User3;
    var Author2 = /** @class */ (function () {
        function Author2(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Author2.prototype.init = function (data) {
            if (data) {
                this.date = data["date"] !== undefined ? data["date"] : null;
                this.email = data["email"] !== undefined ? data["email"] : null;
                this.name = data["name"] !== undefined ? data["name"] : null;
            }
        };
        Author2.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Author2();
            result.init(data);
            return result;
        };
        Author2.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["date"] = this.date !== undefined ? this.date : null;
            data["email"] = this.email !== undefined ? this.email : null;
            data["name"] = this.name !== undefined ? this.name : null;
            return data;
        };
        return Author2;
    }());
    GithubApiClient.Author2 = Author2;
    var Object = /** @class */ (function () {
        function Object(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Object.prototype.init = function (data) {
            if (data) {
                this.sha = data["sha"] !== undefined ? data["sha"] : null;
                this.type = data["type"] !== undefined ? data["type"] : null;
                this.url = data["url"] !== undefined ? data["url"] : null;
            }
        };
        Object.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Object();
            result.init(data);
            return result;
        };
        Object.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["sha"] = this.sha !== undefined ? this.sha : null;
            data["type"] = this.type !== undefined ? this.type : null;
            data["url"] = this.url !== undefined ? this.url : null;
            return data;
        };
        return Object;
    }());
    GithubApiClient.Object = Object;
    var User4 = /** @class */ (function () {
        function User4(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        User4.prototype.init = function (data) {
            if (data) {
                this.avatar_url = data["avatar_url"] !== undefined ? data["avatar_url"] : null;
                this.gravatar_id = data["gravatar_id"] !== undefined ? data["gravatar_id"] : null;
                this.id = data["id"] !== undefined ? data["id"] : null;
                this.login = data["login"] !== undefined ? data["login"] : null;
                this.url = data["url"] !== undefined ? data["url"] : null;
            }
        };
        User4.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new User4();
            result.init(data);
            return result;
        };
        User4.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["avatar_url"] = this.avatar_url !== undefined ? this.avatar_url : null;
            data["gravatar_id"] = this.gravatar_id !== undefined ? this.gravatar_id : null;
            data["id"] = this.id !== undefined ? this.id : null;
            data["login"] = this.login !== undefined ? this.login : null;
            data["url"] = this.url !== undefined ? this.url : null;
            return data;
        };
        return User4;
    }());
    GithubApiClient.User4 = User4;
    var Author3 = /** @class */ (function () {
        function Author3(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Author3.prototype.init = function (data) {
            if (data) {
                this.avatar_url = data["avatar_url"] !== undefined ? data["avatar_url"] : null;
                this.events_url = data["events_url"] !== undefined ? data["events_url"] : null;
                this.followers_url = data["followers_url"] !== undefined ? data["followers_url"] : null;
                this.following_url = data["following_url"] !== undefined ? data["following_url"] : null;
                this.gists_url = data["gists_url"] !== undefined ? data["gists_url"] : null;
                this.gravatar_id = data["gravatar_id"] !== undefined ? data["gravatar_id"] : null;
                this.html_url = data["html_url"] !== undefined ? data["html_url"] : null;
                this.id = data["id"] !== undefined ? data["id"] : null;
                this.login = data["login"] !== undefined ? data["login"] : null;
                this.organizations_url = data["organizations_url"] !== undefined ? data["organizations_url"] : null;
                this.received_events_url = data["received_events_url"] !== undefined ? data["received_events_url"] : null;
                this.repos_url = data["repos_url"] !== undefined ? data["repos_url"] : null;
                this.starred_url = data["starred_url"] !== undefined ? data["starred_url"] : null;
                this.subscriptions_url = data["subscriptions_url"] !== undefined ? data["subscriptions_url"] : null;
                this.type = data["type"] !== undefined ? data["type"] : null;
                this.url = data["url"] !== undefined ? data["url"] : null;
            }
        };
        Author3.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Author3();
            result.init(data);
            return result;
        };
        Author3.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["avatar_url"] = this.avatar_url !== undefined ? this.avatar_url : null;
            data["events_url"] = this.events_url !== undefined ? this.events_url : null;
            data["followers_url"] = this.followers_url !== undefined ? this.followers_url : null;
            data["following_url"] = this.following_url !== undefined ? this.following_url : null;
            data["gists_url"] = this.gists_url !== undefined ? this.gists_url : null;
            data["gravatar_id"] = this.gravatar_id !== undefined ? this.gravatar_id : null;
            data["html_url"] = this.html_url !== undefined ? this.html_url : null;
            data["id"] = this.id !== undefined ? this.id : null;
            data["login"] = this.login !== undefined ? this.login : null;
            data["organizations_url"] = this.organizations_url !== undefined ? this.organizations_url : null;
            data["received_events_url"] = this.received_events_url !== undefined ? this.received_events_url : null;
            data["repos_url"] = this.repos_url !== undefined ? this.repos_url : null;
            data["starred_url"] = this.starred_url !== undefined ? this.starred_url : null;
            data["subscriptions_url"] = this.subscriptions_url !== undefined ? this.subscriptions_url : null;
            data["type"] = this.type !== undefined ? this.type : null;
            data["url"] = this.url !== undefined ? this.url : null;
            return data;
        };
        return Author3;
    }());
    GithubApiClient.Author3 = Author3;
    var Commit6 = /** @class */ (function () {
        function Commit6(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Commit6.prototype.init = function (data) {
            if (data) {
                this.author = data["author"] ? Author16.fromJS(data["author"]) : null;
                this.comment_count = data["comment_count"] !== undefined ? data["comment_count"] : null;
                this.committer = data["committer"] ? Committer13.fromJS(data["committer"]) : null;
                this.message = data["message"] !== undefined ? data["message"] : null;
                this.tree = data["tree"] ? Tree8.fromJS(data["tree"]) : null;
                this.url = data["url"] !== undefined ? data["url"] : null;
            }
        };
        Commit6.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Commit6();
            result.init(data);
            return result;
        };
        Commit6.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["author"] = this.author ? this.author.toJSON() : null;
            data["comment_count"] = this.comment_count !== undefined ? this.comment_count : null;
            data["committer"] = this.committer ? this.committer.toJSON() : null;
            data["message"] = this.message !== undefined ? this.message : null;
            data["tree"] = this.tree ? this.tree.toJSON() : null;
            data["url"] = this.url !== undefined ? this.url : null;
            return data;
        };
        return Commit6;
    }());
    GithubApiClient.Commit6 = Commit6;
    var Committer4 = /** @class */ (function () {
        function Committer4(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Committer4.prototype.init = function (data) {
            if (data) {
                this.avatar_url = data["avatar_url"] !== undefined ? data["avatar_url"] : null;
                this.events_url = data["events_url"] !== undefined ? data["events_url"] : null;
                this.followers_url = data["followers_url"] !== undefined ? data["followers_url"] : null;
                this.following_url = data["following_url"] !== undefined ? data["following_url"] : null;
                this.gists_url = data["gists_url"] !== undefined ? data["gists_url"] : null;
                this.gravatar_id = data["gravatar_id"] !== undefined ? data["gravatar_id"] : null;
                this.html_url = data["html_url"] !== undefined ? data["html_url"] : null;
                this.id = data["id"] !== undefined ? data["id"] : null;
                this.login = data["login"] !== undefined ? data["login"] : null;
                this.organizations_url = data["organizations_url"] !== undefined ? data["organizations_url"] : null;
                this.received_events_url = data["received_events_url"] !== undefined ? data["received_events_url"] : null;
                this.repos_url = data["repos_url"] !== undefined ? data["repos_url"] : null;
                this.starred_url = data["starred_url"] !== undefined ? data["starred_url"] : null;
                this.subscriptions_url = data["subscriptions_url"] !== undefined ? data["subscriptions_url"] : null;
                this.type = data["type"] !== undefined ? data["type"] : null;
                this.url = data["url"] !== undefined ? data["url"] : null;
            }
        };
        Committer4.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Committer4();
            result.init(data);
            return result;
        };
        Committer4.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["avatar_url"] = this.avatar_url !== undefined ? this.avatar_url : null;
            data["events_url"] = this.events_url !== undefined ? this.events_url : null;
            data["followers_url"] = this.followers_url !== undefined ? this.followers_url : null;
            data["following_url"] = this.following_url !== undefined ? this.following_url : null;
            data["gists_url"] = this.gists_url !== undefined ? this.gists_url : null;
            data["gravatar_id"] = this.gravatar_id !== undefined ? this.gravatar_id : null;
            data["html_url"] = this.html_url !== undefined ? this.html_url : null;
            data["id"] = this.id !== undefined ? this.id : null;
            data["login"] = this.login !== undefined ? this.login : null;
            data["organizations_url"] = this.organizations_url !== undefined ? this.organizations_url : null;
            data["received_events_url"] = this.received_events_url !== undefined ? this.received_events_url : null;
            data["repos_url"] = this.repos_url !== undefined ? this.repos_url : null;
            data["starred_url"] = this.starred_url !== undefined ? this.starred_url : null;
            data["subscriptions_url"] = this.subscriptions_url !== undefined ? this.subscriptions_url : null;
            data["type"] = this.type !== undefined ? this.type : null;
            data["url"] = this.url !== undefined ? this.url : null;
            return data;
        };
        return Committer4;
    }());
    GithubApiClient.Committer4 = Committer4;
    var Parents2 = /** @class */ (function () {
        function Parents2(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Parents2.prototype.init = function (data) {
            if (data) {
                this.sha = data["sha"] !== undefined ? data["sha"] : null;
                this.url = data["url"] !== undefined ? data["url"] : null;
            }
        };
        Parents2.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Parents2();
            result.init(data);
            return result;
        };
        Parents2.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["sha"] = this.sha !== undefined ? this.sha : null;
            data["url"] = this.url !== undefined ? this.url : null;
            return data;
        };
        return Parents2;
    }());
    GithubApiClient.Parents2 = Parents2;
    var Creator2 = /** @class */ (function () {
        function Creator2(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Creator2.prototype.init = function (data) {
            if (data) {
                this.avatar_url = data["avatar_url"] !== undefined ? data["avatar_url"] : null;
                this.gravatar_id = data["gravatar_id"] !== undefined ? data["gravatar_id"] : null;
                this.id = data["id"] !== undefined ? data["id"] : null;
                this.login = data["login"] !== undefined ? data["login"] : null;
                this.url = data["url"] !== undefined ? data["url"] : null;
            }
        };
        Creator2.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Creator2();
            result.init(data);
            return result;
        };
        Creator2.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["avatar_url"] = this.avatar_url !== undefined ? this.avatar_url : null;
            data["gravatar_id"] = this.gravatar_id !== undefined ? this.gravatar_id : null;
            data["id"] = this.id !== undefined ? this.id : null;
            data["login"] = this.login !== undefined ? this.login : null;
            data["url"] = this.url !== undefined ? this.url : null;
            return data;
        };
        return Creator2;
    }());
    GithubApiClient.Creator2 = Creator2;
    var MilestoneState;
    (function (MilestoneState) {
        MilestoneState[MilestoneState["Open"] = "open"] = "Open";
        MilestoneState[MilestoneState["Closed"] = "closed"] = "Closed";
    })(MilestoneState = GithubApiClient.MilestoneState || (GithubApiClient.MilestoneState = {}));
    var Repository = /** @class */ (function () {
        function Repository(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Repository.prototype.init = function (data) {
            if (data) {
                this.description = data["description"] !== undefined ? data["description"] : null;
                this.fork = data["fork"] !== undefined ? data["fork"] : null;
                this.full_name = data["full_name"] !== undefined ? data["full_name"] : null;
                this.html_url = data["html_url"] !== undefined ? data["html_url"] : null;
                this.id = data["id"] !== undefined ? data["id"] : null;
                this.name = data["name"] !== undefined ? data["name"] : null;
                this.owner = data["owner"] ? Owner8.fromJS(data["owner"]) : null;
                this.private = data["private"] !== undefined ? data["private"] : null;
                this.url = data["url"] !== undefined ? data["url"] : null;
            }
        };
        Repository.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Repository();
            result.init(data);
            return result;
        };
        Repository.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["description"] = this.description !== undefined ? this.description : null;
            data["fork"] = this.fork !== undefined ? this.fork : null;
            data["full_name"] = this.full_name !== undefined ? this.full_name : null;
            data["html_url"] = this.html_url !== undefined ? this.html_url : null;
            data["id"] = this.id !== undefined ? this.id : null;
            data["name"] = this.name !== undefined ? this.name : null;
            data["owner"] = this.owner ? this.owner.toJSON() : null;
            data["private"] = this.private !== undefined ? this.private : null;
            data["url"] = this.url !== undefined ? this.url : null;
            return data;
        };
        return Repository;
    }());
    GithubApiClient.Repository = Repository;
    var Subject = /** @class */ (function () {
        function Subject(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Subject.prototype.init = function (data) {
            if (data) {
                this.latest_comment_url = data["latest_comment_url"] !== undefined ? data["latest_comment_url"] : null;
                this.title = data["title"] !== undefined ? data["title"] : null;
                this.type = data["type"] !== undefined ? data["type"] : null;
                this.url = data["url"] !== undefined ? data["url"] : null;
            }
        };
        Subject.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Subject();
            result.init(data);
            return result;
        };
        Subject.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["latest_comment_url"] = this.latest_comment_url !== undefined ? this.latest_comment_url : null;
            data["title"] = this.title !== undefined ? this.title : null;
            data["type"] = this.type !== undefined ? this.type : null;
            data["url"] = this.url !== undefined ? this.url : null;
            return data;
        };
        return Subject;
    }());
    GithubApiClient.Subject = Subject;
    var OrgTeamsPostPermission;
    (function (OrgTeamsPostPermission) {
        OrgTeamsPostPermission[OrgTeamsPostPermission["Pull"] = "pull"] = "Pull";
        OrgTeamsPostPermission[OrgTeamsPostPermission["Push"] = "push"] = "Push";
        OrgTeamsPostPermission[OrgTeamsPostPermission["Admin"] = "admin"] = "Admin";
    })(OrgTeamsPostPermission = GithubApiClient.OrgTeamsPostPermission || (GithubApiClient.OrgTeamsPostPermission = {}));
    var Errors = /** @class */ (function () {
        function Errors(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Errors.prototype.init = function (data) {
            if (data) {
                this.code = data["code"] !== undefined ? data["code"] : null;
                this.field = data["field"] !== undefined ? data["field"] : null;
                this.resource = data["resource"] !== undefined ? data["resource"] : null;
            }
        };
        Errors.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Errors();
            result.init(data);
            return result;
        };
        Errors.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["code"] = this.code !== undefined ? this.code : null;
            data["field"] = this.field !== undefined ? this.field : null;
            data["resource"] = this.resource !== undefined ? this.resource : null;
            return data;
        };
        return Errors;
    }());
    GithubApiClient.Errors = Errors;
    var Files4 = /** @class */ (function () {
        function Files4(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Files4.prototype.init = function (data) {
            if (data) {
                this.delete_this_file_txt = data["delete_this_file.txt"] !== undefined ? data["delete_this_file.txt"] : null;
                this.file1_txt = data["file1.txt"] ? File1_txt.fromJS(data["file1.txt"]) : null;
                this.new_file_txt = data["new_file.txt"] ? New_file_txt.fromJS(data["new_file.txt"]) : null;
                this.old_name_txt = data["old_name.txt"] ? Old_name_txt.fromJS(data["old_name.txt"]) : null;
            }
        };
        Files4.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Files4();
            result.init(data);
            return result;
        };
        Files4.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["delete_this_file.txt"] = this.delete_this_file_txt !== undefined ? this.delete_this_file_txt : null;
            data["file1.txt"] = this.file1_txt ? this.file1_txt.toJSON() : null;
            data["new_file.txt"] = this.new_file_txt ? this.new_file_txt.toJSON() : null;
            data["old_name.txt"] = this.old_name_txt ? this.old_name_txt.toJSON() : null;
            return data;
        };
        return Files4;
    }());
    GithubApiClient.Files4 = Files4;
    var Files5 = /** @class */ (function () {
        function Files5(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Files5.prototype.init = function (data) {
            if (data) {
                this.file1_txt = data["file1.txt"] ? File1_txt2.fromJS(data["file1.txt"]) : null;
            }
        };
        Files5.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Files5();
            result.init(data);
            return result;
        };
        Files5.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["file1.txt"] = this.file1_txt ? this.file1_txt.toJSON() : null;
            return data;
        };
        return Files5;
    }());
    GithubApiClient.Files5 = Files5;
    var _links4 = /** @class */ (function () {
        function _links4(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        _links4.prototype.init = function (data) {
            if (data) {
                this.comments = data["comments"] ? Comments.fromJS(data["comments"]) : null;
                this.html = data["html"] ? Html.fromJS(data["html"]) : null;
                this.review_comments = data["review_comments"] ? Review_comments.fromJS(data["review_comments"]) : null;
                this.self = data["self"] ? Self.fromJS(data["self"]) : null;
            }
        };
        _links4.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new _links4();
            result.init(data);
            return result;
        };
        _links4.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["comments"] = this.comments ? this.comments.toJSON() : null;
            data["html"] = this.html ? this.html.toJSON() : null;
            data["review_comments"] = this.review_comments ? this.review_comments.toJSON() : null;
            data["self"] = this.self ? this.self.toJSON() : null;
            return data;
        };
        return _links4;
    }());
    GithubApiClient._links4 = _links4;
    var Base = /** @class */ (function () {
        function Base(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Base.prototype.init = function (data) {
            if (data) {
                this.label = data["label"] !== undefined ? data["label"] : null;
                this.ref = data["ref"] !== undefined ? data["ref"] : null;
                this.repo = data["repo"] ? Repo3.fromJS(data["repo"]) : null;
                this.sha = data["sha"] !== undefined ? data["sha"] : null;
                this.user = data["user"] ? User18.fromJS(data["user"]) : null;
            }
        };
        Base.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Base();
            result.init(data);
            return result;
        };
        Base.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["label"] = this.label !== undefined ? this.label : null;
            data["ref"] = this.ref !== undefined ? this.ref : null;
            data["repo"] = this.repo ? this.repo.toJSON() : null;
            data["sha"] = this.sha !== undefined ? this.sha : null;
            data["user"] = this.user ? this.user.toJSON() : null;
            return data;
        };
        return Base;
    }());
    GithubApiClient.Base = Base;
    var Head = /** @class */ (function () {
        function Head(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Head.prototype.init = function (data) {
            if (data) {
                this.label = data["label"] !== undefined ? data["label"] : null;
                this.ref = data["ref"] !== undefined ? data["ref"] : null;
                this.repo = data["repo"] ? Repo4.fromJS(data["repo"]) : null;
                this.sha = data["sha"] !== undefined ? data["sha"] : null;
                this.user = data["user"] ? User19.fromJS(data["user"]) : null;
            }
        };
        Head.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Head();
            result.init(data);
            return result;
        };
        Head.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["label"] = this.label !== undefined ? this.label : null;
            data["ref"] = this.ref !== undefined ? this.ref : null;
            data["repo"] = this.repo ? this.repo.toJSON() : null;
            data["sha"] = this.sha !== undefined ? this.sha : null;
            data["user"] = this.user ? this.user.toJSON() : null;
            return data;
        };
        return Head;
    }());
    GithubApiClient.Head = Head;
    var Merged_by = /** @class */ (function () {
        function Merged_by(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Merged_by.prototype.init = function (data) {
            if (data) {
                this.avatar_url = data["avatar_url"] !== undefined ? data["avatar_url"] : null;
                this.gravatar_id = data["gravatar_id"] !== undefined ? data["gravatar_id"] : null;
                this.id = data["id"] !== undefined ? data["id"] : null;
                this.login = data["login"] !== undefined ? data["login"] : null;
                this.url = data["url"] !== undefined ? data["url"] : null;
            }
        };
        Merged_by.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Merged_by();
            result.init(data);
            return result;
        };
        Merged_by.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["avatar_url"] = this.avatar_url !== undefined ? this.avatar_url : null;
            data["gravatar_id"] = this.gravatar_id !== undefined ? this.gravatar_id : null;
            data["id"] = this.id !== undefined ? this.id : null;
            data["login"] = this.login !== undefined ? this.login : null;
            data["url"] = this.url !== undefined ? this.url : null;
            return data;
        };
        return Merged_by;
    }());
    GithubApiClient.Merged_by = Merged_by;
    var User5 = /** @class */ (function () {
        function User5(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        User5.prototype.init = function (data) {
            if (data) {
                this.avatar_url = data["avatar_url"] !== undefined ? data["avatar_url"] : null;
                this.gravatar_id = data["gravatar_id"] !== undefined ? data["gravatar_id"] : null;
                this.id = data["id"] !== undefined ? data["id"] : null;
                this.login = data["login"] !== undefined ? data["login"] : null;
                this.url = data["url"] !== undefined ? data["url"] : null;
            }
        };
        User5.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new User5();
            result.init(data);
            return result;
        };
        User5.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["avatar_url"] = this.avatar_url !== undefined ? this.avatar_url : null;
            data["gravatar_id"] = this.gravatar_id !== undefined ? this.gravatar_id : null;
            data["id"] = this.id !== undefined ? this.id : null;
            data["login"] = this.login !== undefined ? this.login : null;
            data["url"] = this.url !== undefined ? this.url : null;
            return data;
        };
        return User5;
    }());
    GithubApiClient.User5 = User5;
    var _links5 = /** @class */ (function () {
        function _links5(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        _links5.prototype.init = function (data) {
            if (data) {
                this.html = data["html"] ? Html2.fromJS(data["html"]) : null;
                this.pull_request = data["pull_request"] ? Pull_request3.fromJS(data["pull_request"]) : null;
                this.self = data["self"] ? Self2.fromJS(data["self"]) : null;
            }
        };
        _links5.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new _links5();
            result.init(data);
            return result;
        };
        _links5.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["html"] = this.html ? this.html.toJSON() : null;
            data["pull_request"] = this.pull_request ? this.pull_request.toJSON() : null;
            data["self"] = this.self ? this.self.toJSON() : null;
            return data;
        };
        return _links5;
    }());
    GithubApiClient._links5 = _links5;
    var User6 = /** @class */ (function () {
        function User6(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        User6.prototype.init = function (data) {
            if (data) {
                this.avatar_url = data["avatar_url"] !== undefined ? data["avatar_url"] : null;
                this.gravatar_id = data["gravatar_id"] !== undefined ? data["gravatar_id"] : null;
                this.id = data["id"] !== undefined ? data["id"] : null;
                this.login = data["login"] !== undefined ? data["login"] : null;
                this.url = data["url"] !== undefined ? data["url"] : null;
            }
        };
        User6.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new User6();
            result.init(data);
            return result;
        };
        User6.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["avatar_url"] = this.avatar_url !== undefined ? this.avatar_url : null;
            data["gravatar_id"] = this.gravatar_id !== undefined ? this.gravatar_id : null;
            data["id"] = this.id !== undefined ? this.id : null;
            data["login"] = this.login !== undefined ? this.login : null;
            data["url"] = this.url !== undefined ? this.url : null;
            return data;
        };
        return User6;
    }());
    GithubApiClient.User6 = User6;
    var Rate = /** @class */ (function () {
        function Rate(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Rate.prototype.init = function (data) {
            if (data) {
                this.limit = data["limit"] !== undefined ? data["limit"] : null;
                this.remaining = data["remaining"] !== undefined ? data["remaining"] : null;
                this.reset = data["reset"] !== undefined ? data["reset"] : null;
            }
        };
        Rate.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Rate();
            result.init(data);
            return result;
        };
        Rate.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["limit"] = this.limit !== undefined ? this.limit : null;
            data["remaining"] = this.remaining !== undefined ? this.remaining : null;
            data["reset"] = this.reset !== undefined ? this.reset : null;
            return data;
        };
        return Rate;
    }());
    GithubApiClient.Rate = Rate;
    var _links6 = /** @class */ (function () {
        function _links6(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        _links6.prototype.init = function (data) {
            if (data) {
                this.git = data["git"] !== undefined ? data["git"] : null;
                this.html = data["html"] !== undefined ? data["html"] : null;
                this.self = data["self"] !== undefined ? data["self"] : null;
            }
        };
        _links6.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new _links6();
            result.init(data);
            return result;
        };
        _links6.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["git"] = this.git !== undefined ? this.git : null;
            data["html"] = this.html !== undefined ? this.html : null;
            data["self"] = this.self !== undefined ? this.self : null;
            return data;
        };
        return _links6;
    }());
    GithubApiClient._links6 = _links6;
    var Object2 = /** @class */ (function () {
        function Object2(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Object2.prototype.init = function (data) {
            if (data) {
                this.sha = data["sha"] !== undefined ? data["sha"] : null;
                this.type = data["type"] !== undefined ? data["type"] : null;
                this.url = data["url"] !== undefined ? data["url"] : null;
            }
        };
        Object2.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Object2();
            result.init(data);
            return result;
        };
        Object2.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["sha"] = this.sha !== undefined ? this.sha : null;
            data["type"] = this.type !== undefined ? this.type : null;
            data["url"] = this.url !== undefined ? this.url : null;
            return data;
        };
        return Object2;
    }());
    GithubApiClient.Object2 = Object2;
    var Assets = /** @class */ (function () {
        function Assets(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Assets.prototype.init = function (data) {
            if (data) {
                this.content_type = data["content_type"] !== undefined ? data["content_type"] : null;
                this.created_at = data["created_at"] !== undefined ? data["created_at"] : null;
                this.download_count = data["download_count"] !== undefined ? data["download_count"] : null;
                this.id = data["id"] !== undefined ? data["id"] : null;
                this.label = data["label"] !== undefined ? data["label"] : null;
                this.name = data["name"] !== undefined ? data["name"] : null;
                this.size = data["size"] !== undefined ? data["size"] : null;
                this.state = data["state"] !== undefined ? data["state"] : null;
                this.updated_at = data["updated_at"] !== undefined ? data["updated_at"] : null;
                this.uploader = data["uploader"] ? Uploader3.fromJS(data["uploader"]) : null;
                this.url = data["url"] !== undefined ? data["url"] : null;
            }
        };
        Assets.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Assets();
            result.init(data);
            return result;
        };
        Assets.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["content_type"] = this.content_type !== undefined ? this.content_type : null;
            data["created_at"] = this.created_at !== undefined ? this.created_at : null;
            data["download_count"] = this.download_count !== undefined ? this.download_count : null;
            data["id"] = this.id !== undefined ? this.id : null;
            data["label"] = this.label !== undefined ? this.label : null;
            data["name"] = this.name !== undefined ? this.name : null;
            data["size"] = this.size !== undefined ? this.size : null;
            data["state"] = this.state !== undefined ? this.state : null;
            data["updated_at"] = this.updated_at !== undefined ? this.updated_at : null;
            data["uploader"] = this.uploader ? this.uploader.toJSON() : null;
            data["url"] = this.url !== undefined ? this.url : null;
            return data;
        };
        return Assets;
    }());
    GithubApiClient.Assets = Assets;
    var Author4 = /** @class */ (function () {
        function Author4(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Author4.prototype.init = function (data) {
            if (data) {
                this.avatar_url = data["avatar_url"] !== undefined ? data["avatar_url"] : null;
                this.events_url = data["events_url"] !== undefined ? data["events_url"] : null;
                this.followers_url = data["followers_url"] !== undefined ? data["followers_url"] : null;
                this.following_url = data["following_url"] !== undefined ? data["following_url"] : null;
                this.gists_url = data["gists_url"] !== undefined ? data["gists_url"] : null;
                this.gravatar_id = data["gravatar_id"] !== undefined ? data["gravatar_id"] : null;
                this.html_url = data["html_url"] !== undefined ? data["html_url"] : null;
                this.id = data["id"] !== undefined ? data["id"] : null;
                this.login = data["login"] !== undefined ? data["login"] : null;
                this.organizations_url = data["organizations_url"] !== undefined ? data["organizations_url"] : null;
                this.received_events_url = data["received_events_url"] !== undefined ? data["received_events_url"] : null;
                this.repos_url = data["repos_url"] !== undefined ? data["repos_url"] : null;
                this.site_admin = data["site_admin"] !== undefined ? data["site_admin"] : null;
                this.starred_url = data["starred_url"] !== undefined ? data["starred_url"] : null;
                this.subscriptions_url = data["subscriptions_url"] !== undefined ? data["subscriptions_url"] : null;
                this.type = data["type"] !== undefined ? data["type"] : null;
                this.url = data["url"] !== undefined ? data["url"] : null;
            }
        };
        Author4.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Author4();
            result.init(data);
            return result;
        };
        Author4.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["avatar_url"] = this.avatar_url !== undefined ? this.avatar_url : null;
            data["events_url"] = this.events_url !== undefined ? this.events_url : null;
            data["followers_url"] = this.followers_url !== undefined ? this.followers_url : null;
            data["following_url"] = this.following_url !== undefined ? this.following_url : null;
            data["gists_url"] = this.gists_url !== undefined ? this.gists_url : null;
            data["gravatar_id"] = this.gravatar_id !== undefined ? this.gravatar_id : null;
            data["html_url"] = this.html_url !== undefined ? this.html_url : null;
            data["id"] = this.id !== undefined ? this.id : null;
            data["login"] = this.login !== undefined ? this.login : null;
            data["organizations_url"] = this.organizations_url !== undefined ? this.organizations_url : null;
            data["received_events_url"] = this.received_events_url !== undefined ? this.received_events_url : null;
            data["repos_url"] = this.repos_url !== undefined ? this.repos_url : null;
            data["site_admin"] = this.site_admin !== undefined ? this.site_admin : null;
            data["starred_url"] = this.starred_url !== undefined ? this.starred_url : null;
            data["subscriptions_url"] = this.subscriptions_url !== undefined ? this.subscriptions_url : null;
            data["type"] = this.type !== undefined ? this.type : null;
            data["url"] = this.url !== undefined ? this.url : null;
            return data;
        };
        return Author4;
    }());
    GithubApiClient.Author4 = Author4;
    var Organization2 = /** @class */ (function () {
        function Organization2(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Organization2.prototype.init = function (data) {
            if (data) {
                this.avatar_url = data["avatar_url"] !== undefined ? data["avatar_url"] : null;
                this.gravatar_id = data["gravatar_id"] !== undefined ? data["gravatar_id"] : null;
                this.id = data["id"] !== undefined ? data["id"] : null;
                this.login = data["login"] !== undefined ? data["login"] : null;
                this.type = data["type"] !== undefined ? data["type"] : null;
                this.url = data["url"] !== undefined ? data["url"] : null;
            }
        };
        Organization2.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Organization2();
            result.init(data);
            return result;
        };
        Organization2.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["avatar_url"] = this.avatar_url !== undefined ? this.avatar_url : null;
            data["gravatar_id"] = this.gravatar_id !== undefined ? this.gravatar_id : null;
            data["id"] = this.id !== undefined ? this.id : null;
            data["login"] = this.login !== undefined ? this.login : null;
            data["type"] = this.type !== undefined ? this.type : null;
            data["url"] = this.url !== undefined ? this.url : null;
            return data;
        };
        return Organization2;
    }());
    GithubApiClient.Organization2 = Organization2;
    var Owner2 = /** @class */ (function () {
        function Owner2(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Owner2.prototype.init = function (data) {
            if (data) {
                this.avatar_url = data["avatar_url"] !== undefined ? data["avatar_url"] : null;
                this.gravatar_id = data["gravatar_id"] !== undefined ? data["gravatar_id"] : null;
                this.id = data["id"] !== undefined ? data["id"] : null;
                this.login = data["login"] !== undefined ? data["login"] : null;
                this.url = data["url"] !== undefined ? data["url"] : null;
            }
        };
        Owner2.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Owner2();
            result.init(data);
            return result;
        };
        Owner2.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["avatar_url"] = this.avatar_url !== undefined ? this.avatar_url : null;
            data["gravatar_id"] = this.gravatar_id !== undefined ? this.gravatar_id : null;
            data["id"] = this.id !== undefined ? this.id : null;
            data["login"] = this.login !== undefined ? this.login : null;
            data["url"] = this.url !== undefined ? this.url : null;
            return data;
        };
        return Owner2;
    }());
    GithubApiClient.Owner2 = Owner2;
    var Parent = /** @class */ (function () {
        function Parent(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Parent.prototype.init = function (data) {
            if (data) {
                this.clone_url = data["clone_url"] !== undefined ? data["clone_url"] : null;
                this.created_at = data["created_at"] !== undefined ? data["created_at"] : null;
                this.description = data["description"] !== undefined ? data["description"] : null;
                this.fork = data["fork"] !== undefined ? data["fork"] : null;
                this.forks = data["forks"] !== undefined ? data["forks"] : null;
                this.forks_count = data["forks_count"] !== undefined ? data["forks_count"] : null;
                this.full_name = data["full_name"] !== undefined ? data["full_name"] : null;
                this.git_url = data["git_url"] !== undefined ? data["git_url"] : null;
                this.homepage = data["homepage"] !== undefined ? data["homepage"] : null;
                this.html_url = data["html_url"] !== undefined ? data["html_url"] : null;
                this.id = data["id"] !== undefined ? data["id"] : null;
                this.language = data["language"] !== undefined ? data["language"] : null;
                this.master_branch = data["master_branch"] !== undefined ? data["master_branch"] : null;
                this.mirror_url = data["mirror_url"] !== undefined ? data["mirror_url"] : null;
                this.name = data["name"] !== undefined ? data["name"] : null;
                this.open_issues = data["open_issues"] !== undefined ? data["open_issues"] : null;
                this.open_issues_count = data["open_issues_count"] !== undefined ? data["open_issues_count"] : null;
                this.owner = data["owner"] ? Owner9.fromJS(data["owner"]) : null;
                this.private = data["private"] !== undefined ? data["private"] : null;
                this.pushed_at = data["pushed_at"] !== undefined ? data["pushed_at"] : null;
                this.size = data["size"] !== undefined ? data["size"] : null;
                this.ssh_url = data["ssh_url"] !== undefined ? data["ssh_url"] : null;
                this.svn_url = data["svn_url"] !== undefined ? data["svn_url"] : null;
                this.updated_at = data["updated_at"] !== undefined ? data["updated_at"] : null;
                this.url = data["url"] !== undefined ? data["url"] : null;
                this.watchers = data["watchers"] !== undefined ? data["watchers"] : null;
                this.watchers_count = data["watchers_count"] !== undefined ? data["watchers_count"] : null;
            }
        };
        Parent.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Parent();
            result.init(data);
            return result;
        };
        Parent.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["clone_url"] = this.clone_url !== undefined ? this.clone_url : null;
            data["created_at"] = this.created_at !== undefined ? this.created_at : null;
            data["description"] = this.description !== undefined ? this.description : null;
            data["fork"] = this.fork !== undefined ? this.fork : null;
            data["forks"] = this.forks !== undefined ? this.forks : null;
            data["forks_count"] = this.forks_count !== undefined ? this.forks_count : null;
            data["full_name"] = this.full_name !== undefined ? this.full_name : null;
            data["git_url"] = this.git_url !== undefined ? this.git_url : null;
            data["homepage"] = this.homepage !== undefined ? this.homepage : null;
            data["html_url"] = this.html_url !== undefined ? this.html_url : null;
            data["id"] = this.id !== undefined ? this.id : null;
            data["language"] = this.language !== undefined ? this.language : null;
            data["master_branch"] = this.master_branch !== undefined ? this.master_branch : null;
            data["mirror_url"] = this.mirror_url !== undefined ? this.mirror_url : null;
            data["name"] = this.name !== undefined ? this.name : null;
            data["open_issues"] = this.open_issues !== undefined ? this.open_issues : null;
            data["open_issues_count"] = this.open_issues_count !== undefined ? this.open_issues_count : null;
            data["owner"] = this.owner ? this.owner.toJSON() : null;
            data["private"] = this.private !== undefined ? this.private : null;
            data["pushed_at"] = this.pushed_at !== undefined ? this.pushed_at : null;
            data["size"] = this.size !== undefined ? this.size : null;
            data["ssh_url"] = this.ssh_url !== undefined ? this.ssh_url : null;
            data["svn_url"] = this.svn_url !== undefined ? this.svn_url : null;
            data["updated_at"] = this.updated_at !== undefined ? this.updated_at : null;
            data["url"] = this.url !== undefined ? this.url : null;
            data["watchers"] = this.watchers !== undefined ? this.watchers : null;
            data["watchers_count"] = this.watchers_count !== undefined ? this.watchers_count : null;
            return data;
        };
        return Parent;
    }());
    GithubApiClient.Parent = Parent;
    var Source = /** @class */ (function () {
        function Source(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Source.prototype.init = function (data) {
            if (data) {
                this.clone_url = data["clone_url"] !== undefined ? data["clone_url"] : null;
                this.created_at = data["created_at"] !== undefined ? data["created_at"] : null;
                this.description = data["description"] !== undefined ? data["description"] : null;
                this.fork = data["fork"] !== undefined ? data["fork"] : null;
                this.forks = data["forks"] !== undefined ? data["forks"] : null;
                this.forks_count = data["forks_count"] !== undefined ? data["forks_count"] : null;
                this.full_name = data["full_name"] !== undefined ? data["full_name"] : null;
                this.git_url = data["git_url"] !== undefined ? data["git_url"] : null;
                this.homepage = data["homepage"] !== undefined ? data["homepage"] : null;
                this.html_url = data["html_url"] !== undefined ? data["html_url"] : null;
                this.id = data["id"] !== undefined ? data["id"] : null;
                this.language = data["language"] !== undefined ? data["language"] : null;
                this.master_branch = data["master_branch"] !== undefined ? data["master_branch"] : null;
                this.mirror_url = data["mirror_url"] !== undefined ? data["mirror_url"] : null;
                this.name = data["name"] !== undefined ? data["name"] : null;
                this.open_issues = data["open_issues"] !== undefined ? data["open_issues"] : null;
                this.open_issues_count = data["open_issues_count"] !== undefined ? data["open_issues_count"] : null;
                this.owner = data["owner"] ? Owner10.fromJS(data["owner"]) : null;
                this.private = data["private"] !== undefined ? data["private"] : null;
                this.pushed_at = data["pushed_at"] !== undefined ? data["pushed_at"] : null;
                this.size = data["size"] !== undefined ? data["size"] : null;
                this.ssh_url = data["ssh_url"] !== undefined ? data["ssh_url"] : null;
                this.svn_url = data["svn_url"] !== undefined ? data["svn_url"] : null;
                this.updated_at = data["updated_at"] !== undefined ? data["updated_at"] : null;
                this.url = data["url"] !== undefined ? data["url"] : null;
                this.watchers = data["watchers"] !== undefined ? data["watchers"] : null;
                this.watchers_count = data["watchers_count"] !== undefined ? data["watchers_count"] : null;
            }
        };
        Source.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Source();
            result.init(data);
            return result;
        };
        Source.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["clone_url"] = this.clone_url !== undefined ? this.clone_url : null;
            data["created_at"] = this.created_at !== undefined ? this.created_at : null;
            data["description"] = this.description !== undefined ? this.description : null;
            data["fork"] = this.fork !== undefined ? this.fork : null;
            data["forks"] = this.forks !== undefined ? this.forks : null;
            data["forks_count"] = this.forks_count !== undefined ? this.forks_count : null;
            data["full_name"] = this.full_name !== undefined ? this.full_name : null;
            data["git_url"] = this.git_url !== undefined ? this.git_url : null;
            data["homepage"] = this.homepage !== undefined ? this.homepage : null;
            data["html_url"] = this.html_url !== undefined ? this.html_url : null;
            data["id"] = this.id !== undefined ? this.id : null;
            data["language"] = this.language !== undefined ? this.language : null;
            data["master_branch"] = this.master_branch !== undefined ? this.master_branch : null;
            data["mirror_url"] = this.mirror_url !== undefined ? this.mirror_url : null;
            data["name"] = this.name !== undefined ? this.name : null;
            data["open_issues"] = this.open_issues !== undefined ? this.open_issues : null;
            data["open_issues_count"] = this.open_issues_count !== undefined ? this.open_issues_count : null;
            data["owner"] = this.owner ? this.owner.toJSON() : null;
            data["private"] = this.private !== undefined ? this.private : null;
            data["pushed_at"] = this.pushed_at !== undefined ? this.pushed_at : null;
            data["size"] = this.size !== undefined ? this.size : null;
            data["ssh_url"] = this.ssh_url !== undefined ? this.ssh_url : null;
            data["svn_url"] = this.svn_url !== undefined ? this.svn_url : null;
            data["updated_at"] = this.updated_at !== undefined ? this.updated_at : null;
            data["url"] = this.url !== undefined ? this.url : null;
            data["watchers"] = this.watchers !== undefined ? this.watchers : null;
            data["watchers_count"] = this.watchers_count !== undefined ? this.watchers_count : null;
            return data;
        };
        return Source;
    }());
    GithubApiClient.Source = Source;
    var Author5 = /** @class */ (function () {
        function Author5(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Author5.prototype.init = function (data) {
            if (data) {
                this.date = data["date"] !== undefined ? data["date"] : null;
                this.email = data["email"] !== undefined ? data["email"] : null;
                this.name = data["name"] !== undefined ? data["name"] : null;
            }
        };
        Author5.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Author5();
            result.init(data);
            return result;
        };
        Author5.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["date"] = this.date !== undefined ? this.date : null;
            data["email"] = this.email !== undefined ? this.email : null;
            data["name"] = this.name !== undefined ? this.name : null;
            return data;
        };
        return Author5;
    }());
    GithubApiClient.Author5 = Author5;
    var Committer5 = /** @class */ (function () {
        function Committer5(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Committer5.prototype.init = function (data) {
            if (data) {
                this.date = data["date"] !== undefined ? data["date"] : null;
                this.email = data["email"] !== undefined ? data["email"] : null;
                this.name = data["name"] !== undefined ? data["name"] : null;
            }
        };
        Committer5.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Committer5();
            result.init(data);
            return result;
        };
        Committer5.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["date"] = this.date !== undefined ? this.date : null;
            data["email"] = this.email !== undefined ? this.email : null;
            data["name"] = this.name !== undefined ? this.name : null;
            return data;
        };
        return Committer5;
    }());
    GithubApiClient.Committer5 = Committer5;
    var Parents3 = /** @class */ (function () {
        function Parents3(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Parents3.prototype.init = function (data) {
            if (data) {
                this.sha = data["sha"] !== undefined ? data["sha"] : null;
                this.url = data["url"] !== undefined ? data["url"] : null;
            }
        };
        Parents3.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Parents3();
            result.init(data);
            return result;
        };
        Parents3.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["sha"] = this.sha !== undefined ? this.sha : null;
            data["url"] = this.url !== undefined ? this.url : null;
            return data;
        };
        return Parents3;
    }());
    GithubApiClient.Parents3 = Parents3;
    var Tree2 = /** @class */ (function () {
        function Tree2(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Tree2.prototype.init = function (data) {
            if (data) {
                this.sha = data["sha"] !== undefined ? data["sha"] : null;
                this.url = data["url"] !== undefined ? data["url"] : null;
            }
        };
        Tree2.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Tree2();
            result.init(data);
            return result;
        };
        Tree2.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["sha"] = this.sha !== undefined ? this.sha : null;
            data["url"] = this.url !== undefined ? this.url : null;
            return data;
        };
        return Tree2;
    }());
    GithubApiClient.Tree2 = Tree2;
    var Author6 = /** @class */ (function () {
        function Author6(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Author6.prototype.init = function (data) {
            if (data) {
                this.date = data["date"] !== undefined ? data["date"] : null;
                this.email = data["email"] !== undefined ? data["email"] : null;
                this.name = data["name"] !== undefined ? data["name"] : null;
            }
        };
        Author6.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Author6();
            result.init(data);
            return result;
        };
        Author6.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["date"] = this.date !== undefined ? this.date : null;
            data["email"] = this.email !== undefined ? this.email : null;
            data["name"] = this.name !== undefined ? this.name : null;
            return data;
        };
        return Author6;
    }());
    GithubApiClient.Author6 = Author6;
    var Items = /** @class */ (function () {
        function Items(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Items.prototype.init = function (data) {
            if (data) {
                this.git_url = data["git_url"] !== undefined ? data["git_url"] : null;
                this.html_url = data["html_url"] !== undefined ? data["html_url"] : null;
                this.name = data["name"] !== undefined ? data["name"] : null;
                this.path = data["path"] !== undefined ? data["path"] : null;
                this.repository = data["repository"] ? Repository2.fromJS(data["repository"]) : null;
                this.score = data["score"] !== undefined ? data["score"] : null;
                this.sha = data["sha"] !== undefined ? data["sha"] : null;
                this.url = data["url"] !== undefined ? data["url"] : null;
            }
        };
        Items.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Items();
            result.init(data);
            return result;
        };
        Items.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["git_url"] = this.git_url !== undefined ? this.git_url : null;
            data["html_url"] = this.html_url !== undefined ? this.html_url : null;
            data["name"] = this.name !== undefined ? this.name : null;
            data["path"] = this.path !== undefined ? this.path : null;
            data["repository"] = this.repository ? this.repository.toJSON() : null;
            data["score"] = this.score !== undefined ? this.score : null;
            data["sha"] = this.sha !== undefined ? this.sha : null;
            data["url"] = this.url !== undefined ? this.url : null;
            return data;
        };
        return Items;
    }());
    GithubApiClient.Items = Items;
    var Items2 = /** @class */ (function () {
        function Items2(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Items2.prototype.init = function (data) {
            if (data) {
                this.assignee = data["assignee"] !== undefined ? data["assignee"] : null;
                this.body = data["body"] !== undefined ? data["body"] : null;
                this.closed_at = data["closed_at"] !== undefined ? data["closed_at"] : null;
                this.comments = data["comments"] !== undefined ? data["comments"] : null;
                this.comments_url = data["comments_url"] !== undefined ? data["comments_url"] : null;
                this.created_at = data["created_at"] !== undefined ? data["created_at"] : null;
                this.events_url = data["events_url"] !== undefined ? data["events_url"] : null;
                this.html_url = data["html_url"] !== undefined ? data["html_url"] : null;
                this.id = data["id"] !== undefined ? data["id"] : null;
                if (data["labels"] && data["labels"].constructor === Array) {
                    this.labels = [];
                    for (var _i = 0, _a = data["labels"]; _i < _a.length; _i++) {
                        var item = _a[_i];
                        this.labels.push(Labels3.fromJS(item));
                    }
                }
                this.labels_url = data["labels_url"] !== undefined ? data["labels_url"] : null;
                this.milestone = data["milestone"] !== undefined ? data["milestone"] : null;
                this.number = data["number"] !== undefined ? data["number"] : null;
                this.pull_request = data["pull_request"] ? Pull_request4.fromJS(data["pull_request"]) : null;
                this.score = data["score"] !== undefined ? data["score"] : null;
                this.state = data["state"] !== undefined ? data["state"] : null;
                this.title = data["title"] !== undefined ? data["title"] : null;
                this.updated_at = data["updated_at"] !== undefined ? data["updated_at"] : null;
                this.url = data["url"] !== undefined ? data["url"] : null;
                this.user = data["user"] ? User20.fromJS(data["user"]) : null;
            }
        };
        Items2.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Items2();
            result.init(data);
            return result;
        };
        Items2.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["assignee"] = this.assignee !== undefined ? this.assignee : null;
            data["body"] = this.body !== undefined ? this.body : null;
            data["closed_at"] = this.closed_at !== undefined ? this.closed_at : null;
            data["comments"] = this.comments !== undefined ? this.comments : null;
            data["comments_url"] = this.comments_url !== undefined ? this.comments_url : null;
            data["created_at"] = this.created_at !== undefined ? this.created_at : null;
            data["events_url"] = this.events_url !== undefined ? this.events_url : null;
            data["html_url"] = this.html_url !== undefined ? this.html_url : null;
            data["id"] = this.id !== undefined ? this.id : null;
            if (this.labels && this.labels.constructor === Array) {
                data["labels"] = [];
                for (var _i = 0, _a = this.labels; _i < _a.length; _i++) {
                    var item = _a[_i];
                    data["labels"].push(item.toJSON());
                }
            }
            data["labels_url"] = this.labels_url !== undefined ? this.labels_url : null;
            data["milestone"] = this.milestone !== undefined ? this.milestone : null;
            data["number"] = this.number !== undefined ? this.number : null;
            data["pull_request"] = this.pull_request ? this.pull_request.toJSON() : null;
            data["score"] = this.score !== undefined ? this.score : null;
            data["state"] = this.state !== undefined ? this.state : null;
            data["title"] = this.title !== undefined ? this.title : null;
            data["updated_at"] = this.updated_at !== undefined ? this.updated_at : null;
            data["url"] = this.url !== undefined ? this.url : null;
            data["user"] = this.user ? this.user.toJSON() : null;
            return data;
        };
        return Items2;
    }());
    GithubApiClient.Items2 = Items2;
    var Issues = /** @class */ (function () {
        function Issues(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Issues.prototype.init = function (data) {
            if (data) {
                this.body = data["body"] !== undefined ? data["body"] : null;
                this.comments = data["comments"] !== undefined ? data["comments"] : null;
                this.created_at = data["created_at"] !== undefined ? data["created_at"] : null;
                this.gravatar_id = data["gravatar_id"] !== undefined ? data["gravatar_id"] : null;
                this.html_url = data["html_url"] !== undefined ? data["html_url"] : null;
                if (data["labels"] && data["labels"].constructor === Array) {
                    this.labels = [];
                    for (var _i = 0, _a = data["labels"]; _i < _a.length; _i++) {
                        var item = _a[_i];
                        this.labels.push(item);
                    }
                }
                this.number = data["number"] !== undefined ? data["number"] : null;
                this.position = data["position"] !== undefined ? data["position"] : null;
                this.state = data["state"] !== undefined ? data["state"] : null;
                this.title = data["title"] !== undefined ? data["title"] : null;
                this.updated_at = data["updated_at"] !== undefined ? data["updated_at"] : null;
                this.user = data["user"] !== undefined ? data["user"] : null;
                this.votes = data["votes"] !== undefined ? data["votes"] : null;
            }
        };
        Issues.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Issues();
            result.init(data);
            return result;
        };
        Issues.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["body"] = this.body !== undefined ? this.body : null;
            data["comments"] = this.comments !== undefined ? this.comments : null;
            data["created_at"] = this.created_at !== undefined ? this.created_at : null;
            data["gravatar_id"] = this.gravatar_id !== undefined ? this.gravatar_id : null;
            data["html_url"] = this.html_url !== undefined ? this.html_url : null;
            if (this.labels && this.labels.constructor === Array) {
                data["labels"] = [];
                for (var _i = 0, _a = this.labels; _i < _a.length; _i++) {
                    var item = _a[_i];
                    data["labels"].push(item);
                }
            }
            data["number"] = this.number !== undefined ? this.number : null;
            data["position"] = this.position !== undefined ? this.position : null;
            data["state"] = this.state !== undefined ? this.state : null;
            data["title"] = this.title !== undefined ? this.title : null;
            data["updated_at"] = this.updated_at !== undefined ? this.updated_at : null;
            data["user"] = this.user !== undefined ? this.user : null;
            data["votes"] = this.votes !== undefined ? this.votes : null;
            return data;
        };
        return Issues;
    }());
    GithubApiClient.Issues = Issues;
    var Items3 = /** @class */ (function () {
        function Items3(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Items3.prototype.init = function (data) {
            if (data) {
                this.created_at = data["created_at"] !== undefined ? data["created_at"] : null;
                this.default_branch = data["default_branch"] !== undefined ? data["default_branch"] : null;
                this.description = data["description"] !== undefined ? data["description"] : null;
                this.fork = data["fork"] !== undefined ? data["fork"] : null;
                this.forks = data["forks"] !== undefined ? data["forks"] : null;
                this.forks_count = data["forks_count"] !== undefined ? data["forks_count"] : null;
                this.full_name = data["full_name"] !== undefined ? data["full_name"] : null;
                this.homepage = data["homepage"] !== undefined ? data["homepage"] : null;
                this.html_url = data["html_url"] !== undefined ? data["html_url"] : null;
                this.id = data["id"] !== undefined ? data["id"] : null;
                this.language = data["language"] !== undefined ? data["language"] : null;
                this.master_branch = data["master_branch"] !== undefined ? data["master_branch"] : null;
                this.name = data["name"] !== undefined ? data["name"] : null;
                this.open_issues = data["open_issues"] !== undefined ? data["open_issues"] : null;
                this.open_issues_count = data["open_issues_count"] !== undefined ? data["open_issues_count"] : null;
                this.owner = data["owner"] ? Owner11.fromJS(data["owner"]) : null;
                this.private = data["private"] !== undefined ? data["private"] : null;
                this.pushed_at = data["pushed_at"] !== undefined ? data["pushed_at"] : null;
                this.score = data["score"] !== undefined ? data["score"] : null;
                this.size = data["size"] !== undefined ? data["size"] : null;
                this.updated_at = data["updated_at"] !== undefined ? data["updated_at"] : null;
                this.url = data["url"] !== undefined ? data["url"] : null;
                this.watchers = data["watchers"] !== undefined ? data["watchers"] : null;
                this.watchers_count = data["watchers_count"] !== undefined ? data["watchers_count"] : null;
            }
        };
        Items3.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Items3();
            result.init(data);
            return result;
        };
        Items3.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["created_at"] = this.created_at !== undefined ? this.created_at : null;
            data["default_branch"] = this.default_branch !== undefined ? this.default_branch : null;
            data["description"] = this.description !== undefined ? this.description : null;
            data["fork"] = this.fork !== undefined ? this.fork : null;
            data["forks"] = this.forks !== undefined ? this.forks : null;
            data["forks_count"] = this.forks_count !== undefined ? this.forks_count : null;
            data["full_name"] = this.full_name !== undefined ? this.full_name : null;
            data["homepage"] = this.homepage !== undefined ? this.homepage : null;
            data["html_url"] = this.html_url !== undefined ? this.html_url : null;
            data["id"] = this.id !== undefined ? this.id : null;
            data["language"] = this.language !== undefined ? this.language : null;
            data["master_branch"] = this.master_branch !== undefined ? this.master_branch : null;
            data["name"] = this.name !== undefined ? this.name : null;
            data["open_issues"] = this.open_issues !== undefined ? this.open_issues : null;
            data["open_issues_count"] = this.open_issues_count !== undefined ? this.open_issues_count : null;
            data["owner"] = this.owner ? this.owner.toJSON() : null;
            data["private"] = this.private !== undefined ? this.private : null;
            data["pushed_at"] = this.pushed_at !== undefined ? this.pushed_at : null;
            data["score"] = this.score !== undefined ? this.score : null;
            data["size"] = this.size !== undefined ? this.size : null;
            data["updated_at"] = this.updated_at !== undefined ? this.updated_at : null;
            data["url"] = this.url !== undefined ? this.url : null;
            data["watchers"] = this.watchers !== undefined ? this.watchers : null;
            data["watchers_count"] = this.watchers_count !== undefined ? this.watchers_count : null;
            return data;
        };
        return Items3;
    }());
    GithubApiClient.Items3 = Items3;
    var Repositories = /** @class */ (function () {
        function Repositories(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Repositories.prototype.init = function (data) {
            if (data) {
                this.created = data["created"] !== undefined ? data["created"] : null;
                this.created_at = data["created_at"] !== undefined ? data["created_at"] : null;
                this.description = data["description"] !== undefined ? data["description"] : null;
                this.followers = data["followers"] !== undefined ? data["followers"] : null;
                this.fork = data["fork"] !== undefined ? data["fork"] : null;
                this.forks = data["forks"] !== undefined ? data["forks"] : null;
                this.has_downloads = data["has_downloads"] !== undefined ? data["has_downloads"] : null;
                this.has_issues = data["has_issues"] !== undefined ? data["has_issues"] : null;
                this.has_wiki = data["has_wiki"] !== undefined ? data["has_wiki"] : null;
                this.homepage = data["homepage"] !== undefined ? data["homepage"] : null;
                this.language = data["language"] !== undefined ? data["language"] : null;
                this.name = data["name"] !== undefined ? data["name"] : null;
                this.open_issues = data["open_issues"] !== undefined ? data["open_issues"] : null;
                this.owner = data["owner"] !== undefined ? data["owner"] : null;
                this.private = data["private"] !== undefined ? data["private"] : null;
                this.pushed = data["pushed"] !== undefined ? data["pushed"] : null;
                this.pushed_at = data["pushed_at"] !== undefined ? data["pushed_at"] : null;
                this.score = data["score"] !== undefined ? data["score"] : null;
                this.size = data["size"] !== undefined ? data["size"] : null;
                this.type = data["type"] !== undefined ? data["type"] : null;
                this.url = data["url"] !== undefined ? data["url"] : null;
                this.username = data["username"] !== undefined ? data["username"] : null;
                this.watchers = data["watchers"] !== undefined ? data["watchers"] : null;
            }
        };
        Repositories.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Repositories();
            result.init(data);
            return result;
        };
        Repositories.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["created"] = this.created !== undefined ? this.created : null;
            data["created_at"] = this.created_at !== undefined ? this.created_at : null;
            data["description"] = this.description !== undefined ? this.description : null;
            data["followers"] = this.followers !== undefined ? this.followers : null;
            data["fork"] = this.fork !== undefined ? this.fork : null;
            data["forks"] = this.forks !== undefined ? this.forks : null;
            data["has_downloads"] = this.has_downloads !== undefined ? this.has_downloads : null;
            data["has_issues"] = this.has_issues !== undefined ? this.has_issues : null;
            data["has_wiki"] = this.has_wiki !== undefined ? this.has_wiki : null;
            data["homepage"] = this.homepage !== undefined ? this.homepage : null;
            data["language"] = this.language !== undefined ? this.language : null;
            data["name"] = this.name !== undefined ? this.name : null;
            data["open_issues"] = this.open_issues !== undefined ? this.open_issues : null;
            data["owner"] = this.owner !== undefined ? this.owner : null;
            data["private"] = this.private !== undefined ? this.private : null;
            data["pushed"] = this.pushed !== undefined ? this.pushed : null;
            data["pushed_at"] = this.pushed_at !== undefined ? this.pushed_at : null;
            data["score"] = this.score !== undefined ? this.score : null;
            data["size"] = this.size !== undefined ? this.size : null;
            data["type"] = this.type !== undefined ? this.type : null;
            data["url"] = this.url !== undefined ? this.url : null;
            data["username"] = this.username !== undefined ? this.username : null;
            data["watchers"] = this.watchers !== undefined ? this.watchers : null;
            return data;
        };
        return Repositories;
    }());
    GithubApiClient.Repositories = Repositories;
    var User7 = /** @class */ (function () {
        function User7(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        User7.prototype.init = function (data) {
            if (data) {
                this.blog = data["blog"] !== undefined ? data["blog"] : null;
                this.company = data["company"] !== undefined ? data["company"] : null;
                this.created = data["created"] !== undefined ? data["created"] : null;
                this.created_at = data["created_at"] !== undefined ? data["created_at"] : null;
                this.email = data["email"] !== undefined ? data["email"] : null;
                this.followers_count = data["followers_count"] !== undefined ? data["followers_count"] : null;
                this.following_count = data["following_count"] !== undefined ? data["following_count"] : null;
                this.gravatar_id = data["gravatar_id"] !== undefined ? data["gravatar_id"] : null;
                this.id = data["id"] !== undefined ? data["id"] : null;
                this.location = data["location"] !== undefined ? data["location"] : null;
                this.login = data["login"] !== undefined ? data["login"] : null;
                this.name = data["name"] !== undefined ? data["name"] : null;
                this.public_gist_count = data["public_gist_count"] !== undefined ? data["public_gist_count"] : null;
                this.public_repo_count = data["public_repo_count"] !== undefined ? data["public_repo_count"] : null;
                this.type = data["type"] !== undefined ? data["type"] : null;
            }
        };
        User7.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new User7();
            result.init(data);
            return result;
        };
        User7.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["blog"] = this.blog !== undefined ? this.blog : null;
            data["company"] = this.company !== undefined ? this.company : null;
            data["created"] = this.created !== undefined ? this.created : null;
            data["created_at"] = this.created_at !== undefined ? this.created_at : null;
            data["email"] = this.email !== undefined ? this.email : null;
            data["followers_count"] = this.followers_count !== undefined ? this.followers_count : null;
            data["following_count"] = this.following_count !== undefined ? this.following_count : null;
            data["gravatar_id"] = this.gravatar_id !== undefined ? this.gravatar_id : null;
            data["id"] = this.id !== undefined ? this.id : null;
            data["location"] = this.location !== undefined ? this.location : null;
            data["login"] = this.login !== undefined ? this.login : null;
            data["name"] = this.name !== undefined ? this.name : null;
            data["public_gist_count"] = this.public_gist_count !== undefined ? this.public_gist_count : null;
            data["public_repo_count"] = this.public_repo_count !== undefined ? this.public_repo_count : null;
            data["type"] = this.type !== undefined ? this.type : null;
            return data;
        };
        return User7;
    }());
    GithubApiClient.User7 = User7;
    var Items4 = /** @class */ (function () {
        function Items4(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Items4.prototype.init = function (data) {
            if (data) {
                this.avatar_url = data["avatar_url"] !== undefined ? data["avatar_url"] : null;
                this.followers_url = data["followers_url"] !== undefined ? data["followers_url"] : null;
                this.gravatar_id = data["gravatar_id"] !== undefined ? data["gravatar_id"] : null;
                this.html_url = data["html_url"] !== undefined ? data["html_url"] : null;
                this.id = data["id"] !== undefined ? data["id"] : null;
                this.login = data["login"] !== undefined ? data["login"] : null;
                this.organizations_url = data["organizations_url"] !== undefined ? data["organizations_url"] : null;
                this.received_events_url = data["received_events_url"] !== undefined ? data["received_events_url"] : null;
                this.repos_url = data["repos_url"] !== undefined ? data["repos_url"] : null;
                this.score = data["score"] !== undefined ? data["score"] : null;
                this.subscriptions_url = data["subscriptions_url"] !== undefined ? data["subscriptions_url"] : null;
                this.type = data["type"] !== undefined ? data["type"] : null;
                this.url = data["url"] !== undefined ? data["url"] : null;
            }
        };
        Items4.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Items4();
            result.init(data);
            return result;
        };
        Items4.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["avatar_url"] = this.avatar_url !== undefined ? this.avatar_url : null;
            data["followers_url"] = this.followers_url !== undefined ? this.followers_url : null;
            data["gravatar_id"] = this.gravatar_id !== undefined ? this.gravatar_id : null;
            data["html_url"] = this.html_url !== undefined ? this.html_url : null;
            data["id"] = this.id !== undefined ? this.id : null;
            data["login"] = this.login !== undefined ? this.login : null;
            data["organizations_url"] = this.organizations_url !== undefined ? this.organizations_url : null;
            data["received_events_url"] = this.received_events_url !== undefined ? this.received_events_url : null;
            data["repos_url"] = this.repos_url !== undefined ? this.repos_url : null;
            data["score"] = this.score !== undefined ? this.score : null;
            data["subscriptions_url"] = this.subscriptions_url !== undefined ? this.subscriptions_url : null;
            data["type"] = this.type !== undefined ? this.type : null;
            data["url"] = this.url !== undefined ? this.url : null;
            return data;
        };
        return Items4;
    }());
    GithubApiClient.Items4 = Items4;
    var Users = /** @class */ (function () {
        function Users(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Users.prototype.init = function (data) {
            if (data) {
                this.created = data["created"] !== undefined ? data["created"] : null;
                this.created_at = data["created_at"] !== undefined ? data["created_at"] : null;
                this.followers = data["followers"] !== undefined ? data["followers"] : null;
                this.followers_count = data["followers_count"] !== undefined ? data["followers_count"] : null;
                this.fullname = data["fullname"] !== undefined ? data["fullname"] : null;
                this.gravatar_id = data["gravatar_id"] !== undefined ? data["gravatar_id"] : null;
                this.id = data["id"] !== undefined ? data["id"] : null;
                this.language = data["language"] !== undefined ? data["language"] : null;
                this.location = data["location"] !== undefined ? data["location"] : null;
                this.login = data["login"] !== undefined ? data["login"] : null;
                this.name = data["name"] !== undefined ? data["name"] : null;
                this.public_repo_count = data["public_repo_count"] !== undefined ? data["public_repo_count"] : null;
                this.repos = data["repos"] !== undefined ? data["repos"] : null;
                this.score = data["score"] !== undefined ? data["score"] : null;
                this.type = data["type"] !== undefined ? data["type"] : null;
                this.username = data["username"] !== undefined ? data["username"] : null;
            }
        };
        Users.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Users();
            result.init(data);
            return result;
        };
        Users.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["created"] = this.created !== undefined ? this.created : null;
            data["created_at"] = this.created_at !== undefined ? this.created_at : null;
            data["followers"] = this.followers !== undefined ? this.followers : null;
            data["followers_count"] = this.followers_count !== undefined ? this.followers_count : null;
            data["fullname"] = this.fullname !== undefined ? this.fullname : null;
            data["gravatar_id"] = this.gravatar_id !== undefined ? this.gravatar_id : null;
            data["id"] = this.id !== undefined ? this.id : null;
            data["language"] = this.language !== undefined ? this.language : null;
            data["location"] = this.location !== undefined ? this.location : null;
            data["login"] = this.login !== undefined ? this.login : null;
            data["name"] = this.name !== undefined ? this.name : null;
            data["public_repo_count"] = this.public_repo_count !== undefined ? this.public_repo_count : null;
            data["repos"] = this.repos !== undefined ? this.repos : null;
            data["score"] = this.score !== undefined ? this.score : null;
            data["type"] = this.type !== undefined ? this.type : null;
            data["username"] = this.username !== undefined ? this.username : null;
            return data;
        };
        return Users;
    }());
    GithubApiClient.Users = Users;
    var Object3 = /** @class */ (function () {
        function Object3(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Object3.prototype.init = function (data) {
            if (data) {
                this.sha = data["sha"] !== undefined ? data["sha"] : null;
                this.type = data["type"] !== undefined ? data["type"] : null;
                this.url = data["url"] !== undefined ? data["url"] : null;
            }
        };
        Object3.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Object3();
            result.init(data);
            return result;
        };
        Object3.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["sha"] = this.sha !== undefined ? this.sha : null;
            data["type"] = this.type !== undefined ? this.type : null;
            data["url"] = this.url !== undefined ? this.url : null;
            return data;
        };
        return Object3;
    }());
    GithubApiClient.Object3 = Object3;
    var Tagger = /** @class */ (function () {
        function Tagger(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Tagger.prototype.init = function (data) {
            if (data) {
                this.date = data["date"] !== undefined ? data["date"] : null;
                this.email = data["email"] !== undefined ? data["email"] : null;
                this.name = data["name"] !== undefined ? data["name"] : null;
            }
        };
        Tagger.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Tagger();
            result.init(data);
            return result;
        };
        Tagger.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["date"] = this.date !== undefined ? this.date : null;
            data["email"] = this.email !== undefined ? this.email : null;
            data["name"] = this.name !== undefined ? this.name : null;
            return data;
        };
        return Tagger;
    }());
    GithubApiClient.Tagger = Tagger;
    var Tagger2 = /** @class */ (function () {
        function Tagger2(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Tagger2.prototype.init = function (data) {
            if (data) {
                this.date = data["date"] !== undefined ? data["date"] : null;
                this.email = data["email"] !== undefined ? data["email"] : null;
                this.name = data["name"] !== undefined ? data["name"] : null;
            }
        };
        Tagger2.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Tagger2();
            result.init(data);
            return result;
        };
        Tagger2.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["date"] = this.date !== undefined ? this.date : null;
            data["email"] = this.email !== undefined ? this.email : null;
            data["name"] = this.name !== undefined ? this.name : null;
            return data;
        };
        return Tagger2;
    }());
    GithubApiClient.Tagger2 = Tagger2;
    var Tree3 = /** @class */ (function () {
        function Tree3(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Tree3.prototype.init = function (data) {
            if (data) {
                this.mode = data["mode"] !== undefined ? data["mode"] : null;
                this.path = data["path"] !== undefined ? data["path"] : null;
                this.sha = data["sha"] !== undefined ? data["sha"] : null;
                this.size = data["size"] !== undefined ? data["size"] : null;
                this.type = data["type"] !== undefined ? data["type"] : null;
                this.url = data["url"] !== undefined ? data["url"] : null;
            }
        };
        Tree3.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Tree3();
            result.init(data);
            return result;
        };
        Tree3.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["mode"] = this.mode !== undefined ? this.mode : null;
            data["path"] = this.path !== undefined ? this.path : null;
            data["sha"] = this.sha !== undefined ? this.sha : null;
            data["size"] = this.size !== undefined ? this.size : null;
            data["type"] = this.type !== undefined ? this.type : null;
            data["url"] = this.url !== undefined ? this.url : null;
            return data;
        };
        return Tree3;
    }());
    GithubApiClient.Tree3 = Tree3;
    var Tree4 = /** @class */ (function () {
        function Tree4(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Tree4.prototype.init = function (data) {
            if (data) {
                this.mode = data["mode"] !== undefined ? data["mode"] : null;
                this.path = data["path"] !== undefined ? data["path"] : null;
                this.sha = data["sha"] !== undefined ? data["sha"] : null;
                this.type = data["type"] !== undefined ? data["type"] : null;
                this.url = data["url"] !== undefined ? data["url"] : null;
            }
        };
        Tree4.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Tree4();
            result.init(data);
            return result;
        };
        Tree4.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["mode"] = this.mode !== undefined ? this.mode : null;
            data["path"] = this.path !== undefined ? this.path : null;
            data["sha"] = this.sha !== undefined ? this.sha : null;
            data["type"] = this.type !== undefined ? this.type : null;
            data["url"] = this.url !== undefined ? this.url : null;
            return data;
        };
        return Tree4;
    }());
    GithubApiClient.Tree4 = Tree4;
    var Plan = /** @class */ (function () {
        function Plan(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Plan.prototype.init = function (data) {
            if (data) {
                this.collaborators = data["collaborators"] !== undefined ? data["collaborators"] : null;
                this.name = data["name"] !== undefined ? data["name"] : null;
                this.private_repos = data["private_repos"] !== undefined ? data["private_repos"] : null;
                this.space = data["space"] !== undefined ? data["space"] : null;
            }
        };
        Plan.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Plan();
            result.init(data);
            return result;
        };
        Plan.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["collaborators"] = this.collaborators !== undefined ? this.collaborators : null;
            data["name"] = this.name !== undefined ? this.name : null;
            data["private_repos"] = this.private_repos !== undefined ? this.private_repos : null;
            data["space"] = this.space !== undefined ? this.space : null;
            return data;
        };
        return Plan;
    }());
    GithubApiClient.Plan = Plan;
    var Files6 = /** @class */ (function () {
        function Files6(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Files6.prototype.init = function (data) {
            if (data) {
                this.ring_erl = data["ring.erl"] ? Ring_erl2.fromJS(data["ring.erl"]) : null;
            }
        };
        Files6.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Files6();
            result.init(data);
            return result;
        };
        Files6.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["ring.erl"] = this.ring_erl ? this.ring_erl.toJSON() : null;
            return data;
        };
        return Files6;
    }());
    GithubApiClient.Files6 = Files6;
    var User8 = /** @class */ (function () {
        function User8(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        User8.prototype.init = function (data) {
            if (data) {
                this.avatar_url = data["avatar_url"] !== undefined ? data["avatar_url"] : null;
                this.gravatar_id = data["gravatar_id"] !== undefined ? data["gravatar_id"] : null;
                this.id = data["id"] !== undefined ? data["id"] : null;
                this.login = data["login"] !== undefined ? data["login"] : null;
                this.url = data["url"] !== undefined ? data["url"] : null;
            }
        };
        User8.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new User8();
            result.init(data);
            return result;
        };
        User8.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["avatar_url"] = this.avatar_url !== undefined ? this.avatar_url : null;
            data["gravatar_id"] = this.gravatar_id !== undefined ? this.gravatar_id : null;
            data["id"] = this.id !== undefined ? this.id : null;
            data["login"] = this.login !== undefined ? this.login : null;
            data["url"] = this.url !== undefined ? this.url : null;
            return data;
        };
        return User8;
    }());
    GithubApiClient.User8 = User8;
    var Assignee = /** @class */ (function () {
        function Assignee(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Assignee.prototype.init = function (data) {
            if (data) {
                this.avatar_url = data["avatar_url"] !== undefined ? data["avatar_url"] : null;
                this.gravatar_id = data["gravatar_id"] !== undefined ? data["gravatar_id"] : null;
                this.id = data["id"] !== undefined ? data["id"] : null;
                this.login = data["login"] !== undefined ? data["login"] : null;
                this.url = data["url"] !== undefined ? data["url"] : null;
            }
        };
        Assignee.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Assignee();
            result.init(data);
            return result;
        };
        Assignee.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["avatar_url"] = this.avatar_url !== undefined ? this.avatar_url : null;
            data["gravatar_id"] = this.gravatar_id !== undefined ? this.gravatar_id : null;
            data["id"] = this.id !== undefined ? this.id : null;
            data["login"] = this.login !== undefined ? this.login : null;
            data["url"] = this.url !== undefined ? this.url : null;
            return data;
        };
        return Assignee;
    }());
    GithubApiClient.Assignee = Assignee;
    var Labels = /** @class */ (function () {
        function Labels(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Labels.prototype.init = function (data) {
            if (data) {
                this.color = data["color"] !== undefined ? data["color"] : null;
                this.name = data["name"] !== undefined ? data["name"] : null;
                this.url = data["url"] !== undefined ? data["url"] : null;
            }
        };
        Labels.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Labels();
            result.init(data);
            return result;
        };
        Labels.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["color"] = this.color !== undefined ? this.color : null;
            data["name"] = this.name !== undefined ? this.name : null;
            data["url"] = this.url !== undefined ? this.url : null;
            return data;
        };
        return Labels;
    }());
    GithubApiClient.Labels = Labels;
    var Milestone2 = /** @class */ (function () {
        function Milestone2(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Milestone2.prototype.init = function (data) {
            if (data) {
                this.closed_issues = data["closed_issues"] !== undefined ? data["closed_issues"] : null;
                this.created_at = data["created_at"] !== undefined ? data["created_at"] : null;
                this.creator = data["creator"] ? Creator6.fromJS(data["creator"]) : null;
                this.description = data["description"] !== undefined ? data["description"] : null;
                this.due_on = data["due_on"] !== undefined ? data["due_on"] : null;
                this.number = data["number"] !== undefined ? data["number"] : null;
                this.open_issues = data["open_issues"] !== undefined ? data["open_issues"] : null;
                this.state = data["state"] !== undefined ? data["state"] : null;
                this.title = data["title"] !== undefined ? data["title"] : null;
                this.url = data["url"] !== undefined ? data["url"] : null;
            }
        };
        Milestone2.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Milestone2();
            result.init(data);
            return result;
        };
        Milestone2.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["closed_issues"] = this.closed_issues !== undefined ? this.closed_issues : null;
            data["created_at"] = this.created_at !== undefined ? this.created_at : null;
            data["creator"] = this.creator ? this.creator.toJSON() : null;
            data["description"] = this.description !== undefined ? this.description : null;
            data["due_on"] = this.due_on !== undefined ? this.due_on : null;
            data["number"] = this.number !== undefined ? this.number : null;
            data["open_issues"] = this.open_issues !== undefined ? this.open_issues : null;
            data["state"] = this.state !== undefined ? this.state : null;
            data["title"] = this.title !== undefined ? this.title : null;
            data["url"] = this.url !== undefined ? this.url : null;
            return data;
        };
        return Milestone2;
    }());
    GithubApiClient.Milestone2 = Milestone2;
    var Pull_request = /** @class */ (function () {
        function Pull_request(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Pull_request.prototype.init = function (data) {
            if (data) {
                this.diff_url = data["diff_url"] !== undefined ? data["diff_url"] : null;
                this.html_url = data["html_url"] !== undefined ? data["html_url"] : null;
                this.patch_url = data["patch_url"] !== undefined ? data["patch_url"] : null;
            }
        };
        Pull_request.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Pull_request();
            result.init(data);
            return result;
        };
        Pull_request.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["diff_url"] = this.diff_url !== undefined ? this.diff_url : null;
            data["html_url"] = this.html_url !== undefined ? this.html_url : null;
            data["patch_url"] = this.patch_url !== undefined ? this.patch_url : null;
            return data;
        };
        return Pull_request;
    }());
    GithubApiClient.Pull_request = Pull_request;
    var State8;
    (function (State8) {
        State8[State8["Open"] = "open"] = "Open";
        State8[State8["Closed"] = "closed"] = "Closed";
    })(State8 = GithubApiClient.State8 || (GithubApiClient.State8 = {}));
    var User9 = /** @class */ (function () {
        function User9(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        User9.prototype.init = function (data) {
            if (data) {
                this.avatar_url = data["avatar_url"] !== undefined ? data["avatar_url"] : null;
                this.gravatar_id = data["gravatar_id"] !== undefined ? data["gravatar_id"] : null;
                this.id = data["id"] !== undefined ? data["id"] : null;
                this.login = data["login"] !== undefined ? data["login"] : null;
                this.url = data["url"] !== undefined ? data["url"] : null;
            }
        };
        User9.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new User9();
            result.init(data);
            return result;
        };
        User9.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["avatar_url"] = this.avatar_url !== undefined ? this.avatar_url : null;
            data["gravatar_id"] = this.gravatar_id !== undefined ? this.gravatar_id : null;
            data["id"] = this.id !== undefined ? this.id : null;
            data["login"] = this.login !== undefined ? this.login : null;
            data["url"] = this.url !== undefined ? this.url : null;
            return data;
        };
        return User9;
    }());
    GithubApiClient.User9 = User9;
    var Owner3 = /** @class */ (function () {
        function Owner3(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Owner3.prototype.init = function (data) {
            if (data) {
                this.avatar_url = data["avatar_url"] !== undefined ? data["avatar_url"] : null;
                this.gravatar_id = data["gravatar_id"] !== undefined ? data["gravatar_id"] : null;
                this.id = data["id"] !== undefined ? data["id"] : null;
                this.login = data["login"] !== undefined ? data["login"] : null;
                this.url = data["url"] !== undefined ? data["url"] : null;
            }
        };
        Owner3.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Owner3();
            result.init(data);
            return result;
        };
        Owner3.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["avatar_url"] = this.avatar_url !== undefined ? this.avatar_url : null;
            data["gravatar_id"] = this.gravatar_id !== undefined ? this.gravatar_id : null;
            data["id"] = this.id !== undefined ? this.id : null;
            data["login"] = this.login !== undefined ? this.login : null;
            data["url"] = this.url !== undefined ? this.url : null;
            return data;
        };
        return Owner3;
    }());
    GithubApiClient.Owner3 = Owner3;
    var User10 = /** @class */ (function () {
        function User10(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        User10.prototype.init = function (data) {
            if (data) {
                this.avatar_url = data["avatar_url"] !== undefined ? data["avatar_url"] : null;
                this.gravatar_id = data["gravatar_id"] !== undefined ? data["gravatar_id"] : null;
                this.id = data["id"] !== undefined ? data["id"] : null;
                this.login = data["login"] !== undefined ? data["login"] : null;
                this.url = data["url"] !== undefined ? data["url"] : null;
            }
        };
        User10.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new User10();
            result.init(data);
            return result;
        };
        User10.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["avatar_url"] = this.avatar_url !== undefined ? this.avatar_url : null;
            data["gravatar_id"] = this.gravatar_id !== undefined ? this.gravatar_id : null;
            data["id"] = this.id !== undefined ? this.id : null;
            data["login"] = this.login !== undefined ? this.login : null;
            data["url"] = this.url !== undefined ? this.url : null;
            return data;
        };
        return User10;
    }());
    GithubApiClient.User10 = User10;
    var Owner4 = /** @class */ (function () {
        function Owner4(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Owner4.prototype.init = function (data) {
            if (data) {
                this.avatar_url = data["avatar_url"] !== undefined ? data["avatar_url"] : null;
                this.gravatar_id = data["gravatar_id"] !== undefined ? data["gravatar_id"] : null;
                this.id = data["id"] !== undefined ? data["id"] : null;
                this.login = data["login"] !== undefined ? data["login"] : null;
                this.url = data["url"] !== undefined ? data["url"] : null;
            }
        };
        Owner4.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Owner4();
            result.init(data);
            return result;
        };
        Owner4.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["avatar_url"] = this.avatar_url !== undefined ? this.avatar_url : null;
            data["gravatar_id"] = this.gravatar_id !== undefined ? this.gravatar_id : null;
            data["id"] = this.id !== undefined ? this.id : null;
            data["login"] = this.login !== undefined ? this.login : null;
            data["url"] = this.url !== undefined ? this.url : null;
            return data;
        };
        return Owner4;
    }());
    GithubApiClient.Owner4 = Owner4;
    var Commit7 = /** @class */ (function () {
        function Commit7(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Commit7.prototype.init = function (data) {
            if (data) {
                this.sha = data["sha"] !== undefined ? data["sha"] : null;
                this.url = data["url"] !== undefined ? data["url"] : null;
            }
        };
        Commit7.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Commit7();
            result.init(data);
            return result;
        };
        Commit7.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["sha"] = this.sha !== undefined ? this.sha : null;
            data["url"] = this.url !== undefined ? this.url : null;
            return data;
        };
        return Commit7;
    }());
    GithubApiClient.Commit7 = Commit7;
    var User11 = /** @class */ (function () {
        function User11(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        User11.prototype.init = function (data) {
            if (data) {
                this.avatar_url = data["avatar_url"] !== undefined ? data["avatar_url"] : null;
                this.gravatar_id = data["gravatar_id"] !== undefined ? data["gravatar_id"] : null;
                this.id = data["id"] !== undefined ? data["id"] : null;
                this.login = data["login"] !== undefined ? data["login"] : null;
                this.url = data["url"] !== undefined ? data["url"] : null;
            }
        };
        User11.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new User11();
            result.init(data);
            return result;
        };
        User11.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["avatar_url"] = this.avatar_url !== undefined ? this.avatar_url : null;
            data["gravatar_id"] = this.gravatar_id !== undefined ? this.gravatar_id : null;
            data["id"] = this.id !== undefined ? this.id : null;
            data["login"] = this.login !== undefined ? this.login : null;
            data["url"] = this.url !== undefined ? this.url : null;
            return data;
        };
        return User11;
    }());
    GithubApiClient.User11 = User11;
    var Author7 = /** @class */ (function () {
        function Author7(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Author7.prototype.init = function (data) {
            if (data) {
                this.avatar_url = data["avatar_url"] !== undefined ? data["avatar_url"] : null;
                this.gravatar_id = data["gravatar_id"] !== undefined ? data["gravatar_id"] : null;
                this.id = data["id"] !== undefined ? data["id"] : null;
                this.login = data["login"] !== undefined ? data["login"] : null;
                this.url = data["url"] !== undefined ? data["url"] : null;
            }
        };
        Author7.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Author7();
            result.init(data);
            return result;
        };
        Author7.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["avatar_url"] = this.avatar_url !== undefined ? this.avatar_url : null;
            data["gravatar_id"] = this.gravatar_id !== undefined ? this.gravatar_id : null;
            data["id"] = this.id !== undefined ? this.id : null;
            data["login"] = this.login !== undefined ? this.login : null;
            data["url"] = this.url !== undefined ? this.url : null;
            return data;
        };
        return Author7;
    }());
    GithubApiClient.Author7 = Author7;
    var Commit8 = /** @class */ (function () {
        function Commit8(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Commit8.prototype.init = function (data) {
            if (data) {
                this.author = data["author"] ? Author17.fromJS(data["author"]) : null;
                this.committer = data["committer"] ? Committer14.fromJS(data["committer"]) : null;
                this.message = data["message"] !== undefined ? data["message"] : null;
                this.tree = data["tree"] ? Tree9.fromJS(data["tree"]) : null;
                this.url = data["url"] !== undefined ? data["url"] : null;
            }
        };
        Commit8.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Commit8();
            result.init(data);
            return result;
        };
        Commit8.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["author"] = this.author ? this.author.toJSON() : null;
            data["committer"] = this.committer ? this.committer.toJSON() : null;
            data["message"] = this.message !== undefined ? this.message : null;
            data["tree"] = this.tree ? this.tree.toJSON() : null;
            data["url"] = this.url !== undefined ? this.url : null;
            return data;
        };
        return Commit8;
    }());
    GithubApiClient.Commit8 = Commit8;
    var Committer6 = /** @class */ (function () {
        function Committer6(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Committer6.prototype.init = function (data) {
            if (data) {
                this.avatar_url = data["avatar_url"] !== undefined ? data["avatar_url"] : null;
                this.gravatar_id = data["gravatar_id"] !== undefined ? data["gravatar_id"] : null;
                this.id = data["id"] !== undefined ? data["id"] : null;
                this.login = data["login"] !== undefined ? data["login"] : null;
                this.url = data["url"] !== undefined ? data["url"] : null;
            }
        };
        Committer6.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Committer6();
            result.init(data);
            return result;
        };
        Committer6.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["avatar_url"] = this.avatar_url !== undefined ? this.avatar_url : null;
            data["gravatar_id"] = this.gravatar_id !== undefined ? this.gravatar_id : null;
            data["id"] = this.id !== undefined ? this.id : null;
            data["login"] = this.login !== undefined ? this.login : null;
            data["url"] = this.url !== undefined ? this.url : null;
            return data;
        };
        return Committer6;
    }());
    GithubApiClient.Committer6 = Committer6;
    var Parents4 = /** @class */ (function () {
        function Parents4(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Parents4.prototype.init = function (data) {
            if (data) {
                this.sha = data["sha"] !== undefined ? data["sha"] : null;
                this.url = data["url"] !== undefined ? data["url"] : null;
            }
        };
        Parents4.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Parents4();
            result.init(data);
            return result;
        };
        Parents4.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["sha"] = this.sha !== undefined ? this.sha : null;
            data["url"] = this.url !== undefined ? this.url : null;
            return data;
        };
        return Parents4;
    }());
    GithubApiClient.Parents4 = Parents4;
    var Statuses = /** @class */ (function () {
        function Statuses(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Statuses.prototype.init = function (data) {
            if (data) {
                this.context = data["context"] !== undefined ? data["context"] : null;
                this.created_at = data["created_at"] !== undefined ? data["created_at"] : null;
                this.description = data["description"] !== undefined ? data["description"] : null;
                this.id = data["id"] !== undefined ? data["id"] : null;
                this.state = data["state"] !== undefined ? data["state"] : null;
                this.target_url = data["target_url"] !== undefined ? data["target_url"] : null;
                this.updated_at = data["updated_at"] !== undefined ? data["updated_at"] : null;
                this.url = data["url"] !== undefined ? data["url"] : null;
            }
        };
        Statuses.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Statuses();
            result.init(data);
            return result;
        };
        Statuses.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["context"] = this.context !== undefined ? this.context : null;
            data["created_at"] = this.created_at !== undefined ? this.created_at : null;
            data["description"] = this.description !== undefined ? this.description : null;
            data["id"] = this.id !== undefined ? this.id : null;
            data["state"] = this.state !== undefined ? this.state : null;
            data["target_url"] = this.target_url !== undefined ? this.target_url : null;
            data["updated_at"] = this.updated_at !== undefined ? this.updated_at : null;
            data["url"] = this.url !== undefined ? this.url : null;
            return data;
        };
        return Statuses;
    }());
    GithubApiClient.Statuses = Statuses;
    var Creator3 = /** @class */ (function () {
        function Creator3(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Creator3.prototype.init = function (data) {
            if (data) {
                this.avatar_url = data["avatar_url"] !== undefined ? data["avatar_url"] : null;
                this.events_url = data["events_url"] !== undefined ? data["events_url"] : null;
                this.followers_url = data["followers_url"] !== undefined ? data["followers_url"] : null;
                this.following_url = data["following_url"] !== undefined ? data["following_url"] : null;
                this.gists_url = data["gists_url"] !== undefined ? data["gists_url"] : null;
                this.gravatar_id = data["gravatar_id"] !== undefined ? data["gravatar_id"] : null;
                this.html_url = data["html_url"] !== undefined ? data["html_url"] : null;
                this.id = data["id"] !== undefined ? data["id"] : null;
                this.login = data["login"] !== undefined ? data["login"] : null;
                this.organizations_url = data["organizations_url"] !== undefined ? data["organizations_url"] : null;
                this.received_events_url = data["received_events_url"] !== undefined ? data["received_events_url"] : null;
                this.repos_url = data["repos_url"] !== undefined ? data["repos_url"] : null;
                this.site_admin = data["site_admin"] !== undefined ? data["site_admin"] : null;
                this.starred_url = data["starred_url"] !== undefined ? data["starred_url"] : null;
                this.subscriptions_url = data["subscriptions_url"] !== undefined ? data["subscriptions_url"] : null;
                this.type = data["type"] !== undefined ? data["type"] : null;
                this.url = data["url"] !== undefined ? data["url"] : null;
            }
        };
        Creator3.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Creator3();
            result.init(data);
            return result;
        };
        Creator3.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["avatar_url"] = this.avatar_url !== undefined ? this.avatar_url : null;
            data["events_url"] = this.events_url !== undefined ? this.events_url : null;
            data["followers_url"] = this.followers_url !== undefined ? this.followers_url : null;
            data["following_url"] = this.following_url !== undefined ? this.following_url : null;
            data["gists_url"] = this.gists_url !== undefined ? this.gists_url : null;
            data["gravatar_id"] = this.gravatar_id !== undefined ? this.gravatar_id : null;
            data["html_url"] = this.html_url !== undefined ? this.html_url : null;
            data["id"] = this.id !== undefined ? this.id : null;
            data["login"] = this.login !== undefined ? this.login : null;
            data["organizations_url"] = this.organizations_url !== undefined ? this.organizations_url : null;
            data["received_events_url"] = this.received_events_url !== undefined ? this.received_events_url : null;
            data["repos_url"] = this.repos_url !== undefined ? this.repos_url : null;
            data["site_admin"] = this.site_admin !== undefined ? this.site_admin : null;
            data["starred_url"] = this.starred_url !== undefined ? this.starred_url : null;
            data["subscriptions_url"] = this.subscriptions_url !== undefined ? this.subscriptions_url : null;
            data["type"] = this.type !== undefined ? this.type : null;
            data["url"] = this.url !== undefined ? this.url : null;
            return data;
        };
        return Creator3;
    }());
    GithubApiClient.Creator3 = Creator3;
    var Creator4 = /** @class */ (function () {
        function Creator4(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Creator4.prototype.init = function (data) {
            if (data) {
                this.avatar_url = data["avatar_url"] !== undefined ? data["avatar_url"] : null;
                this.events_url = data["events_url"] !== undefined ? data["events_url"] : null;
                this.followers_url = data["followers_url"] !== undefined ? data["followers_url"] : null;
                this.following_url = data["following_url"] !== undefined ? data["following_url"] : null;
                this.gists_url = data["gists_url"] !== undefined ? data["gists_url"] : null;
                this.gravatar_id = data["gravatar_id"] !== undefined ? data["gravatar_id"] : null;
                this.html_url = data["html_url"] !== undefined ? data["html_url"] : null;
                this.id = data["id"] !== undefined ? data["id"] : null;
                this.login = data["login"] !== undefined ? data["login"] : null;
                this.organizations_url = data["organizations_url"] !== undefined ? data["organizations_url"] : null;
                this.received_events_url = data["received_events_url"] !== undefined ? data["received_events_url"] : null;
                this.repos_url = data["repos_url"] !== undefined ? data["repos_url"] : null;
                this.site_admin = data["site_admin"] !== undefined ? data["site_admin"] : null;
                this.starred_url = data["starred_url"] !== undefined ? data["starred_url"] : null;
                this.subscriptions_url = data["subscriptions_url"] !== undefined ? data["subscriptions_url"] : null;
                this.type = data["type"] !== undefined ? data["type"] : null;
                this.url = data["url"] !== undefined ? data["url"] : null;
            }
        };
        Creator4.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Creator4();
            result.init(data);
            return result;
        };
        Creator4.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["avatar_url"] = this.avatar_url !== undefined ? this.avatar_url : null;
            data["events_url"] = this.events_url !== undefined ? this.events_url : null;
            data["followers_url"] = this.followers_url !== undefined ? this.followers_url : null;
            data["following_url"] = this.following_url !== undefined ? this.following_url : null;
            data["gists_url"] = this.gists_url !== undefined ? this.gists_url : null;
            data["gravatar_id"] = this.gravatar_id !== undefined ? this.gravatar_id : null;
            data["html_url"] = this.html_url !== undefined ? this.html_url : null;
            data["id"] = this.id !== undefined ? this.id : null;
            data["login"] = this.login !== undefined ? this.login : null;
            data["organizations_url"] = this.organizations_url !== undefined ? this.organizations_url : null;
            data["received_events_url"] = this.received_events_url !== undefined ? this.received_events_url : null;
            data["repos_url"] = this.repos_url !== undefined ? this.repos_url : null;
            data["site_admin"] = this.site_admin !== undefined ? this.site_admin : null;
            data["starred_url"] = this.starred_url !== undefined ? this.starred_url : null;
            data["subscriptions_url"] = this.subscriptions_url !== undefined ? this.subscriptions_url : null;
            data["type"] = this.type !== undefined ? this.type : null;
            data["url"] = this.url !== undefined ? this.url : null;
            return data;
        };
        return Creator4;
    }());
    GithubApiClient.Creator4 = Creator4;
    var Owner5 = /** @class */ (function () {
        function Owner5(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Owner5.prototype.init = function (data) {
            if (data) {
                this.avatar_url = data["avatar_url"] !== undefined ? data["avatar_url"] : null;
                this.gravatar_id = data["gravatar_id"] !== undefined ? data["gravatar_id"] : null;
                this.id = data["id"] !== undefined ? data["id"] : null;
                this.login = data["login"] !== undefined ? data["login"] : null;
                this.url = data["url"] !== undefined ? data["url"] : null;
            }
        };
        Owner5.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Owner5();
            result.init(data);
            return result;
        };
        Owner5.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["avatar_url"] = this.avatar_url !== undefined ? this.avatar_url : null;
            data["gravatar_id"] = this.gravatar_id !== undefined ? this.gravatar_id : null;
            data["id"] = this.id !== undefined ? this.id : null;
            data["login"] = this.login !== undefined ? this.login : null;
            data["url"] = this.url !== undefined ? this.url : null;
            return data;
        };
        return Owner5;
    }());
    GithubApiClient.Owner5 = Owner5;
    var Object4 = /** @class */ (function () {
        function Object4(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Object4.prototype.init = function (data) {
            if (data) {
                this.sha = data["sha"] !== undefined ? data["sha"] : null;
                this.type = data["type"] !== undefined ? data["type"] : null;
                this.url = data["url"] !== undefined ? data["url"] : null;
            }
        };
        Object4.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Object4();
            result.init(data);
            return result;
        };
        Object4.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["sha"] = this.sha !== undefined ? this.sha : null;
            data["type"] = this.type !== undefined ? this.type : null;
            data["url"] = this.url !== undefined ? this.url : null;
            return data;
        };
        return Object4;
    }());
    GithubApiClient.Object4 = Object4;
    var Config = /** @class */ (function () {
        function Config(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Config.prototype.init = function (data) {
            if (data) {
                this.content_type = data["content_type"] !== undefined ? data["content_type"] : null;
                this.url = data["url"] !== undefined ? data["url"] : null;
            }
        };
        Config.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Config();
            result.init(data);
            return result;
        };
        Config.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["content_type"] = this.content_type !== undefined ? this.content_type : null;
            data["url"] = this.url !== undefined ? this.url : null;
            return data;
        };
        return Config;
    }());
    GithubApiClient.Config = Config;
    var Events2;
    (function (Events2) {
        Events2[Events2["Push"] = "push"] = "Push";
        Events2[Events2["Issues"] = "issues"] = "Issues";
        Events2[Events2["Issue_comment"] = "issue_comment"] = "Issue_comment";
        Events2[Events2["Commit_comment"] = "commit_comment"] = "Commit_comment";
        Events2[Events2["Pull_request"] = "pull_request"] = "Pull_request";
        Events2[Events2["Pull_request_review_comment"] = "pull_request_review_comment"] = "Pull_request_review_comment";
        Events2[Events2["Gollum"] = "gollum"] = "Gollum";
        Events2[Events2["Watch"] = "watch"] = "Watch";
        Events2[Events2["Download"] = "download"] = "Download";
        Events2[Events2["Fork"] = "fork"] = "Fork";
        Events2[Events2["Fork_apply"] = "fork_apply"] = "Fork_apply";
        Events2[Events2["Member"] = "member"] = "Member";
        Events2[Events2["Public"] = "public"] = "Public";
        Events2[Events2["Team_add"] = "team_add"] = "Team_add";
        Events2[Events2["Status"] = "status"] = "Status";
    })(Events2 = GithubApiClient.Events2 || (GithubApiClient.Events2 = {}));
    var _links7 = /** @class */ (function () {
        function _links7(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        _links7.prototype.init = function (data) {
            if (data) {
                this.html = data["html"] ? Html3.fromJS(data["html"]) : null;
                this.pull_request = data["pull_request"] ? Pull_request5.fromJS(data["pull_request"]) : null;
                this.self = data["self"] ? Self3.fromJS(data["self"]) : null;
            }
        };
        _links7.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new _links7();
            result.init(data);
            return result;
        };
        _links7.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["html"] = this.html ? this.html.toJSON() : null;
            data["pull_request"] = this.pull_request ? this.pull_request.toJSON() : null;
            data["self"] = this.self ? this.self.toJSON() : null;
            return data;
        };
        return _links7;
    }());
    GithubApiClient._links7 = _links7;
    var User12 = /** @class */ (function () {
        function User12(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        User12.prototype.init = function (data) {
            if (data) {
                this.avatar_url = data["avatar_url"] !== undefined ? data["avatar_url"] : null;
                this.gravatar_id = data["gravatar_id"] !== undefined ? data["gravatar_id"] : null;
                this.id = data["id"] !== undefined ? data["id"] : null;
                this.login = data["login"] !== undefined ? data["login"] : null;
                this.url = data["url"] !== undefined ? data["url"] : null;
            }
        };
        User12.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new User12();
            result.init(data);
            return result;
        };
        User12.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["avatar_url"] = this.avatar_url !== undefined ? this.avatar_url : null;
            data["gravatar_id"] = this.gravatar_id !== undefined ? this.gravatar_id : null;
            data["id"] = this.id !== undefined ? this.id : null;
            data["login"] = this.login !== undefined ? this.login : null;
            data["url"] = this.url !== undefined ? this.url : null;
            return data;
        };
        return User12;
    }());
    GithubApiClient.User12 = User12;
    var _links8 = /** @class */ (function () {
        function _links8(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        _links8.prototype.init = function (data) {
            if (data) {
                this.comments = data["comments"] ? Comments2.fromJS(data["comments"]) : null;
                this.html = data["html"] ? Html4.fromJS(data["html"]) : null;
                this.review_comments = data["review_comments"] ? Review_comments2.fromJS(data["review_comments"]) : null;
                this.self = data["self"] ? Self4.fromJS(data["self"]) : null;
            }
        };
        _links8.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new _links8();
            result.init(data);
            return result;
        };
        _links8.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["comments"] = this.comments ? this.comments.toJSON() : null;
            data["html"] = this.html ? this.html.toJSON() : null;
            data["review_comments"] = this.review_comments ? this.review_comments.toJSON() : null;
            data["self"] = this.self ? this.self.toJSON() : null;
            return data;
        };
        return _links8;
    }());
    GithubApiClient._links8 = _links8;
    var Base2 = /** @class */ (function () {
        function Base2(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Base2.prototype.init = function (data) {
            if (data) {
                this.label = data["label"] !== undefined ? data["label"] : null;
                this.ref = data["ref"] !== undefined ? data["ref"] : null;
                this.repo = data["repo"] ? Repo5.fromJS(data["repo"]) : null;
                this.sha = data["sha"] !== undefined ? data["sha"] : null;
                this.user = data["user"] ? User21.fromJS(data["user"]) : null;
            }
        };
        Base2.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Base2();
            result.init(data);
            return result;
        };
        Base2.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["label"] = this.label !== undefined ? this.label : null;
            data["ref"] = this.ref !== undefined ? this.ref : null;
            data["repo"] = this.repo ? this.repo.toJSON() : null;
            data["sha"] = this.sha !== undefined ? this.sha : null;
            data["user"] = this.user ? this.user.toJSON() : null;
            return data;
        };
        return Base2;
    }());
    GithubApiClient.Base2 = Base2;
    var Head2 = /** @class */ (function () {
        function Head2(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Head2.prototype.init = function (data) {
            if (data) {
                this.label = data["label"] !== undefined ? data["label"] : null;
                this.ref = data["ref"] !== undefined ? data["ref"] : null;
                this.repo = data["repo"] ? Repo6.fromJS(data["repo"]) : null;
                this.sha = data["sha"] !== undefined ? data["sha"] : null;
                this.user = data["user"] ? User22.fromJS(data["user"]) : null;
            }
        };
        Head2.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Head2();
            result.init(data);
            return result;
        };
        Head2.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["label"] = this.label !== undefined ? this.label : null;
            data["ref"] = this.ref !== undefined ? this.ref : null;
            data["repo"] = this.repo ? this.repo.toJSON() : null;
            data["sha"] = this.sha !== undefined ? this.sha : null;
            data["user"] = this.user ? this.user.toJSON() : null;
            return data;
        };
        return Head2;
    }());
    GithubApiClient.Head2 = Head2;
    var State9;
    (function (State9) {
        State9[State9["Open"] = "open"] = "Open";
        State9[State9["Closed"] = "closed"] = "Closed";
    })(State9 = GithubApiClient.State9 || (GithubApiClient.State9 = {}));
    var User13 = /** @class */ (function () {
        function User13(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        User13.prototype.init = function (data) {
            if (data) {
                this.avatar_url = data["avatar_url"] !== undefined ? data["avatar_url"] : null;
                this.gravatar_id = data["gravatar_id"] !== undefined ? data["gravatar_id"] : null;
                this.id = data["id"] !== undefined ? data["id"] : null;
                this.login = data["login"] !== undefined ? data["login"] : null;
                this.url = data["url"] !== undefined ? data["url"] : null;
            }
        };
        User13.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new User13();
            result.init(data);
            return result;
        };
        User13.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["avatar_url"] = this.avatar_url !== undefined ? this.avatar_url : null;
            data["gravatar_id"] = this.gravatar_id !== undefined ? this.gravatar_id : null;
            data["id"] = this.id !== undefined ? this.id : null;
            data["login"] = this.login !== undefined ? this.login : null;
            data["url"] = this.url !== undefined ? this.url : null;
            return data;
        };
        return User13;
    }());
    GithubApiClient.User13 = User13;
    var Assets2 = /** @class */ (function () {
        function Assets2(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Assets2.prototype.init = function (data) {
            if (data) {
                this.content_type = data["content_type"] !== undefined ? data["content_type"] : null;
                this.created_at = data["created_at"] !== undefined ? data["created_at"] : null;
                this.download_count = data["download_count"] !== undefined ? data["download_count"] : null;
                this.id = data["id"] !== undefined ? data["id"] : null;
                this.label = data["label"] !== undefined ? data["label"] : null;
                this.name = data["name"] !== undefined ? data["name"] : null;
                this.size = data["size"] !== undefined ? data["size"] : null;
                this.state = data["state"] !== undefined ? data["state"] : null;
                this.updated_at = data["updated_at"] !== undefined ? data["updated_at"] : null;
                this.uploader = data["uploader"] ? Uploader4.fromJS(data["uploader"]) : null;
                this.url = data["url"] !== undefined ? data["url"] : null;
            }
        };
        Assets2.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Assets2();
            result.init(data);
            return result;
        };
        Assets2.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["content_type"] = this.content_type !== undefined ? this.content_type : null;
            data["created_at"] = this.created_at !== undefined ? this.created_at : null;
            data["download_count"] = this.download_count !== undefined ? this.download_count : null;
            data["id"] = this.id !== undefined ? this.id : null;
            data["label"] = this.label !== undefined ? this.label : null;
            data["name"] = this.name !== undefined ? this.name : null;
            data["size"] = this.size !== undefined ? this.size : null;
            data["state"] = this.state !== undefined ? this.state : null;
            data["updated_at"] = this.updated_at !== undefined ? this.updated_at : null;
            data["uploader"] = this.uploader ? this.uploader.toJSON() : null;
            data["url"] = this.url !== undefined ? this.url : null;
            return data;
        };
        return Assets2;
    }());
    GithubApiClient.Assets2 = Assets2;
    var Author8 = /** @class */ (function () {
        function Author8(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Author8.prototype.init = function (data) {
            if (data) {
                this.avatar_url = data["avatar_url"] !== undefined ? data["avatar_url"] : null;
                this.events_url = data["events_url"] !== undefined ? data["events_url"] : null;
                this.followers_url = data["followers_url"] !== undefined ? data["followers_url"] : null;
                this.following_url = data["following_url"] !== undefined ? data["following_url"] : null;
                this.gists_url = data["gists_url"] !== undefined ? data["gists_url"] : null;
                this.gravatar_id = data["gravatar_id"] !== undefined ? data["gravatar_id"] : null;
                this.html_url = data["html_url"] !== undefined ? data["html_url"] : null;
                this.id = data["id"] !== undefined ? data["id"] : null;
                this.login = data["login"] !== undefined ? data["login"] : null;
                this.organizations_url = data["organizations_url"] !== undefined ? data["organizations_url"] : null;
                this.received_events_url = data["received_events_url"] !== undefined ? data["received_events_url"] : null;
                this.repos_url = data["repos_url"] !== undefined ? data["repos_url"] : null;
                this.site_admin = data["site_admin"] !== undefined ? data["site_admin"] : null;
                this.starred_url = data["starred_url"] !== undefined ? data["starred_url"] : null;
                this.subscriptions_url = data["subscriptions_url"] !== undefined ? data["subscriptions_url"] : null;
                this.type = data["type"] !== undefined ? data["type"] : null;
                this.url = data["url"] !== undefined ? data["url"] : null;
            }
        };
        Author8.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Author8();
            result.init(data);
            return result;
        };
        Author8.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["avatar_url"] = this.avatar_url !== undefined ? this.avatar_url : null;
            data["events_url"] = this.events_url !== undefined ? this.events_url : null;
            data["followers_url"] = this.followers_url !== undefined ? this.followers_url : null;
            data["following_url"] = this.following_url !== undefined ? this.following_url : null;
            data["gists_url"] = this.gists_url !== undefined ? this.gists_url : null;
            data["gravatar_id"] = this.gravatar_id !== undefined ? this.gravatar_id : null;
            data["html_url"] = this.html_url !== undefined ? this.html_url : null;
            data["id"] = this.id !== undefined ? this.id : null;
            data["login"] = this.login !== undefined ? this.login : null;
            data["organizations_url"] = this.organizations_url !== undefined ? this.organizations_url : null;
            data["received_events_url"] = this.received_events_url !== undefined ? this.received_events_url : null;
            data["repos_url"] = this.repos_url !== undefined ? this.repos_url : null;
            data["site_admin"] = this.site_admin !== undefined ? this.site_admin : null;
            data["starred_url"] = this.starred_url !== undefined ? this.starred_url : null;
            data["subscriptions_url"] = this.subscriptions_url !== undefined ? this.subscriptions_url : null;
            data["type"] = this.type !== undefined ? this.type : null;
            data["url"] = this.url !== undefined ? this.url : null;
            return data;
        };
        return Author8;
    }());
    GithubApiClient.Author8 = Author8;
    var Uploader2 = /** @class */ (function () {
        function Uploader2(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Uploader2.prototype.init = function (data) {
            if (data) {
                this.avatar_url = data["avatar_url"] !== undefined ? data["avatar_url"] : null;
                this.events_url = data["events_url"] !== undefined ? data["events_url"] : null;
                this.followers_url = data["followers_url"] !== undefined ? data["followers_url"] : null;
                this.following_url = data["following_url"] !== undefined ? data["following_url"] : null;
                this.gists_url = data["gists_url"] !== undefined ? data["gists_url"] : null;
                this.gravatar_id = data["gravatar_id"] !== undefined ? data["gravatar_id"] : null;
                this.html_url = data["html_url"] !== undefined ? data["html_url"] : null;
                this.id = data["id"] !== undefined ? data["id"] : null;
                this.login = data["login"] !== undefined ? data["login"] : null;
                this.organizations_url = data["organizations_url"] !== undefined ? data["organizations_url"] : null;
                this.received_events_url = data["received_events_url"] !== undefined ? data["received_events_url"] : null;
                this.repos_url = data["repos_url"] !== undefined ? data["repos_url"] : null;
                this.site_admin = data["site_admin"] !== undefined ? data["site_admin"] : null;
                this.starred_url = data["starred_url"] !== undefined ? data["starred_url"] : null;
                this.subscriptions_url = data["subscriptions_url"] !== undefined ? data["subscriptions_url"] : null;
                this.type = data["type"] !== undefined ? data["type"] : null;
                this.url = data["url"] !== undefined ? data["url"] : null;
            }
        };
        Uploader2.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Uploader2();
            result.init(data);
            return result;
        };
        Uploader2.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["avatar_url"] = this.avatar_url !== undefined ? this.avatar_url : null;
            data["events_url"] = this.events_url !== undefined ? this.events_url : null;
            data["followers_url"] = this.followers_url !== undefined ? this.followers_url : null;
            data["following_url"] = this.following_url !== undefined ? this.following_url : null;
            data["gists_url"] = this.gists_url !== undefined ? this.gists_url : null;
            data["gravatar_id"] = this.gravatar_id !== undefined ? this.gravatar_id : null;
            data["html_url"] = this.html_url !== undefined ? this.html_url : null;
            data["id"] = this.id !== undefined ? this.id : null;
            data["login"] = this.login !== undefined ? this.login : null;
            data["organizations_url"] = this.organizations_url !== undefined ? this.organizations_url : null;
            data["received_events_url"] = this.received_events_url !== undefined ? this.received_events_url : null;
            data["repos_url"] = this.repos_url !== undefined ? this.repos_url : null;
            data["site_admin"] = this.site_admin !== undefined ? this.site_admin : null;
            data["starred_url"] = this.starred_url !== undefined ? this.starred_url : null;
            data["subscriptions_url"] = this.subscriptions_url !== undefined ? this.subscriptions_url : null;
            data["type"] = this.type !== undefined ? this.type : null;
            data["url"] = this.url !== undefined ? this.url : null;
            return data;
        };
        return Uploader2;
    }());
    GithubApiClient.Uploader2 = Uploader2;
    var Author9 = /** @class */ (function () {
        function Author9(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Author9.prototype.init = function (data) {
            if (data) {
                this.avatar_url = data["avatar_url"] !== undefined ? data["avatar_url"] : null;
                this.gravatar_id = data["gravatar_id"] !== undefined ? data["gravatar_id"] : null;
                this.id = data["id"] !== undefined ? data["id"] : null;
                this.login = data["login"] !== undefined ? data["login"] : null;
                this.url = data["url"] !== undefined ? data["url"] : null;
            }
        };
        Author9.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Author9();
            result.init(data);
            return result;
        };
        Author9.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["avatar_url"] = this.avatar_url !== undefined ? this.avatar_url : null;
            data["gravatar_id"] = this.gravatar_id !== undefined ? this.gravatar_id : null;
            data["id"] = this.id !== undefined ? this.id : null;
            data["login"] = this.login !== undefined ? this.login : null;
            data["url"] = this.url !== undefined ? this.url : null;
            return data;
        };
        return Author9;
    }());
    GithubApiClient.Author9 = Author9;
    var Weeks = /** @class */ (function () {
        function Weeks(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Weeks.prototype.init = function (data) {
            if (data) {
                this.a = data["a"] !== undefined ? data["a"] : null;
                this.c = data["c"] !== undefined ? data["c"] : null;
                this.d = data["d"] !== undefined ? data["d"] : null;
                this.w = data["w"] !== undefined ? data["w"] : null;
            }
        };
        Weeks.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Weeks();
            result.init(data);
            return result;
        };
        Weeks.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["a"] = this.a !== undefined ? this.a : null;
            data["c"] = this.c !== undefined ? this.c : null;
            data["d"] = this.d !== undefined ? this.d : null;
            data["w"] = this.w !== undefined ? this.w : null;
            return data;
        };
        return Weeks;
    }());
    GithubApiClient.Weeks = Weeks;
    var Creator5 = /** @class */ (function () {
        function Creator5(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Creator5.prototype.init = function (data) {
            if (data) {
                this.avatar_url = data["avatar_url"] !== undefined ? data["avatar_url"] : null;
                this.gravatar_id = data["gravatar_id"] !== undefined ? data["gravatar_id"] : null;
                this.id = data["id"] !== undefined ? data["id"] : null;
                this.login = data["login"] !== undefined ? data["login"] : null;
                this.url = data["url"] !== undefined ? data["url"] : null;
            }
        };
        Creator5.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Creator5();
            result.init(data);
            return result;
        };
        Creator5.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["avatar_url"] = this.avatar_url !== undefined ? this.avatar_url : null;
            data["gravatar_id"] = this.gravatar_id !== undefined ? this.gravatar_id : null;
            data["id"] = this.id !== undefined ? this.id : null;
            data["login"] = this.login !== undefined ? this.login : null;
            data["url"] = this.url !== undefined ? this.url : null;
            return data;
        };
        return Creator5;
    }());
    GithubApiClient.Creator5 = Creator5;
    var Language = /** @class */ (function () {
        function Language(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Language.prototype.init = function (data) {
            if (data) {
            }
        };
        Language.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Language();
            result.init(data);
            return result;
        };
        Language.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            return data;
        };
        return Language;
    }());
    GithubApiClient.Language = Language;
    var Owner6 = /** @class */ (function () {
        function Owner6(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Owner6.prototype.init = function (data) {
            if (data) {
                this.avatar_url = data["avatar_url"] !== undefined ? data["avatar_url"] : null;
                this.gravatar_id = data["gravatar_id"] !== undefined ? data["gravatar_id"] : null;
                this.id = data["id"] !== undefined ? data["id"] : null;
                this.login = data["login"] !== undefined ? data["login"] : null;
                this.url = data["url"] !== undefined ? data["url"] : null;
            }
        };
        Owner6.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Owner6();
            result.init(data);
            return result;
        };
        Owner6.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["avatar_url"] = this.avatar_url !== undefined ? this.avatar_url : null;
            data["gravatar_id"] = this.gravatar_id !== undefined ? this.gravatar_id : null;
            data["id"] = this.id !== undefined ? this.id : null;
            data["login"] = this.login !== undefined ? this.login : null;
            data["url"] = this.url !== undefined ? this.url : null;
            return data;
        };
        return Owner6;
    }());
    GithubApiClient.Owner6 = Owner6;
    var Owner7 = /** @class */ (function () {
        function Owner7(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Owner7.prototype.init = function (data) {
            if (data) {
                this.avatar_url = data["avatar_url"] !== undefined ? data["avatar_url"] : null;
                this.gravatar_id = data["gravatar_id"] !== undefined ? data["gravatar_id"] : null;
                this.id = data["id"] !== undefined ? data["id"] : null;
                this.login = data["login"] !== undefined ? data["login"] : null;
                this.url = data["url"] !== undefined ? data["url"] : null;
            }
        };
        Owner7.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Owner7();
            result.init(data);
            return result;
        };
        Owner7.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["avatar_url"] = this.avatar_url !== undefined ? this.avatar_url : null;
            data["gravatar_id"] = this.gravatar_id !== undefined ? this.gravatar_id : null;
            data["id"] = this.id !== undefined ? this.id : null;
            data["login"] = this.login !== undefined ? this.login : null;
            data["url"] = this.url !== undefined ? this.url : null;
            return data;
        };
        return Owner7;
    }());
    GithubApiClient.Owner7 = Owner7;
    var Organization3 = /** @class */ (function () {
        function Organization3(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Organization3.prototype.init = function (data) {
            if (data) {
                this.avatar_url = data["avatar_url"] !== undefined ? data["avatar_url"] : null;
                this.id = data["id"] !== undefined ? data["id"] : null;
                this.login = data["login"] !== undefined ? data["login"] : null;
                this.url = data["url"] !== undefined ? data["url"] : null;
            }
        };
        Organization3.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Organization3();
            result.init(data);
            return result;
        };
        Organization3.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["avatar_url"] = this.avatar_url !== undefined ? this.avatar_url : null;
            data["id"] = this.id !== undefined ? this.id : null;
            data["login"] = this.login !== undefined ? this.login : null;
            data["url"] = this.url !== undefined ? this.url : null;
            return data;
        };
        return Organization3;
    }());
    GithubApiClient.Organization3 = Organization3;
    var Author10 = /** @class */ (function () {
        function Author10(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Author10.prototype.init = function (data) {
            if (data) {
                this.avatar_url = data["avatar_url"] !== undefined ? data["avatar_url"] : null;
                this.gravatar_id = data["gravatar_id"] !== undefined ? data["gravatar_id"] : null;
                this.id = data["id"] !== undefined ? data["id"] : null;
                this.login = data["login"] !== undefined ? data["login"] : null;
                this.url = data["url"] !== undefined ? data["url"] : null;
            }
        };
        Author10.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Author10();
            result.init(data);
            return result;
        };
        Author10.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["avatar_url"] = this.avatar_url !== undefined ? this.avatar_url : null;
            data["gravatar_id"] = this.gravatar_id !== undefined ? this.gravatar_id : null;
            data["id"] = this.id !== undefined ? this.id : null;
            data["login"] = this.login !== undefined ? this.login : null;
            data["url"] = this.url !== undefined ? this.url : null;
            return data;
        };
        return Author10;
    }());
    GithubApiClient.Author10 = Author10;
    var Commit9 = /** @class */ (function () {
        function Commit9(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Commit9.prototype.init = function (data) {
            if (data) {
                this.author = data["author"] ? Author18.fromJS(data["author"]) : null;
                this.committer = data["committer"] ? Committer15.fromJS(data["committer"]) : null;
                this.message = data["message"] !== undefined ? data["message"] : null;
                this.tree = data["tree"] ? Tree10.fromJS(data["tree"]) : null;
                this.url = data["url"] !== undefined ? data["url"] : null;
            }
        };
        Commit9.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Commit9();
            result.init(data);
            return result;
        };
        Commit9.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["author"] = this.author ? this.author.toJSON() : null;
            data["committer"] = this.committer ? this.committer.toJSON() : null;
            data["message"] = this.message !== undefined ? this.message : null;
            data["tree"] = this.tree ? this.tree.toJSON() : null;
            data["url"] = this.url !== undefined ? this.url : null;
            return data;
        };
        return Commit9;
    }());
    GithubApiClient.Commit9 = Commit9;
    var Committer7 = /** @class */ (function () {
        function Committer7(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Committer7.prototype.init = function (data) {
            if (data) {
                this.avatar_url = data["avatar_url"] !== undefined ? data["avatar_url"] : null;
                this.gravatar_id = data["gravatar_id"] !== undefined ? data["gravatar_id"] : null;
                this.id = data["id"] !== undefined ? data["id"] : null;
                this.login = data["login"] !== undefined ? data["login"] : null;
                this.url = data["url"] !== undefined ? data["url"] : null;
            }
        };
        Committer7.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Committer7();
            result.init(data);
            return result;
        };
        Committer7.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["avatar_url"] = this.avatar_url !== undefined ? this.avatar_url : null;
            data["gravatar_id"] = this.gravatar_id !== undefined ? this.gravatar_id : null;
            data["id"] = this.id !== undefined ? this.id : null;
            data["login"] = this.login !== undefined ? this.login : null;
            data["url"] = this.url !== undefined ? this.url : null;
            return data;
        };
        return Committer7;
    }());
    GithubApiClient.Committer7 = Committer7;
    var Parents5 = /** @class */ (function () {
        function Parents5(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Parents5.prototype.init = function (data) {
            if (data) {
                this.sha = data["sha"] !== undefined ? data["sha"] : null;
                this.url = data["url"] !== undefined ? data["url"] : null;
            }
        };
        Parents5.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Parents5();
            result.init(data);
            return result;
        };
        Parents5.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["sha"] = this.sha !== undefined ? this.sha : null;
            data["url"] = this.url !== undefined ? this.url : null;
            return data;
        };
        return Parents5;
    }());
    GithubApiClient.Parents5 = Parents5;
    var Author11 = /** @class */ (function () {
        function Author11(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Author11.prototype.init = function (data) {
            if (data) {
                this.date = data["date"] !== undefined ? data["date"] : null;
                this.email = data["email"] !== undefined ? data["email"] : null;
                this.name = data["name"] !== undefined ? data["name"] : null;
            }
        };
        Author11.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Author11();
            result.init(data);
            return result;
        };
        Author11.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["date"] = this.date !== undefined ? this.date : null;
            data["email"] = this.email !== undefined ? this.email : null;
            data["name"] = this.name !== undefined ? this.name : null;
            return data;
        };
        return Author11;
    }());
    GithubApiClient.Author11 = Author11;
    var Committer8 = /** @class */ (function () {
        function Committer8(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Committer8.prototype.init = function (data) {
            if (data) {
                this.date = data["date"] !== undefined ? data["date"] : null;
                this.email = data["email"] !== undefined ? data["email"] : null;
                this.name = data["name"] !== undefined ? data["name"] : null;
            }
        };
        Committer8.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Committer8();
            result.init(data);
            return result;
        };
        Committer8.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["date"] = this.date !== undefined ? this.date : null;
            data["email"] = this.email !== undefined ? this.email : null;
            data["name"] = this.name !== undefined ? this.name : null;
            return data;
        };
        return Committer8;
    }());
    GithubApiClient.Committer8 = Committer8;
    var Tree5 = /** @class */ (function () {
        function Tree5(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Tree5.prototype.init = function (data) {
            if (data) {
                this.sha = data["sha"] !== undefined ? data["sha"] : null;
                this.url = data["url"] !== undefined ? data["url"] : null;
            }
        };
        Tree5.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Tree5();
            result.init(data);
            return result;
        };
        Tree5.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["sha"] = this.sha !== undefined ? this.sha : null;
            data["url"] = this.url !== undefined ? this.url : null;
            return data;
        };
        return Tree5;
    }());
    GithubApiClient.Tree5 = Tree5;
    var Author12 = /** @class */ (function () {
        function Author12(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Author12.prototype.init = function (data) {
            if (data) {
                this.avatar_url = data["avatar_url"] !== undefined ? data["avatar_url"] : null;
                this.events_url = data["events_url"] !== undefined ? data["events_url"] : null;
                this.followers_url = data["followers_url"] !== undefined ? data["followers_url"] : null;
                this.following_url = data["following_url"] !== undefined ? data["following_url"] : null;
                this.gists_url = data["gists_url"] !== undefined ? data["gists_url"] : null;
                this.gravatar_id = data["gravatar_id"] !== undefined ? data["gravatar_id"] : null;
                this.html_url = data["html_url"] !== undefined ? data["html_url"] : null;
                this.id = data["id"] !== undefined ? data["id"] : null;
                this.login = data["login"] !== undefined ? data["login"] : null;
                this.organizations_url = data["organizations_url"] !== undefined ? data["organizations_url"] : null;
                this.received_events_url = data["received_events_url"] !== undefined ? data["received_events_url"] : null;
                this.repos_url = data["repos_url"] !== undefined ? data["repos_url"] : null;
                this.site_admin = data["site_admin"] !== undefined ? data["site_admin"] : null;
                this.starred_url = data["starred_url"] !== undefined ? data["starred_url"] : null;
                this.subscriptions_url = data["subscriptions_url"] !== undefined ? data["subscriptions_url"] : null;
                this.type = data["type"] !== undefined ? data["type"] : null;
                this.url = data["url"] !== undefined ? data["url"] : null;
            }
        };
        Author12.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Author12();
            result.init(data);
            return result;
        };
        Author12.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["avatar_url"] = this.avatar_url !== undefined ? this.avatar_url : null;
            data["events_url"] = this.events_url !== undefined ? this.events_url : null;
            data["followers_url"] = this.followers_url !== undefined ? this.followers_url : null;
            data["following_url"] = this.following_url !== undefined ? this.following_url : null;
            data["gists_url"] = this.gists_url !== undefined ? this.gists_url : null;
            data["gravatar_id"] = this.gravatar_id !== undefined ? this.gravatar_id : null;
            data["html_url"] = this.html_url !== undefined ? this.html_url : null;
            data["id"] = this.id !== undefined ? this.id : null;
            data["login"] = this.login !== undefined ? this.login : null;
            data["organizations_url"] = this.organizations_url !== undefined ? this.organizations_url : null;
            data["received_events_url"] = this.received_events_url !== undefined ? this.received_events_url : null;
            data["repos_url"] = this.repos_url !== undefined ? this.repos_url : null;
            data["site_admin"] = this.site_admin !== undefined ? this.site_admin : null;
            data["starred_url"] = this.starred_url !== undefined ? this.starred_url : null;
            data["subscriptions_url"] = this.subscriptions_url !== undefined ? this.subscriptions_url : null;
            data["type"] = this.type !== undefined ? this.type : null;
            data["url"] = this.url !== undefined ? this.url : null;
            return data;
        };
        return Author12;
    }());
    GithubApiClient.Author12 = Author12;
    var Commit10 = /** @class */ (function () {
        function Commit10(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Commit10.prototype.init = function (data) {
            if (data) {
                this.author = data["author"] ? Author19.fromJS(data["author"]) : null;
                this.committer = data["committer"] ? Committer16.fromJS(data["committer"]) : null;
                this.message = data["message"] !== undefined ? data["message"] : null;
                this.tree = data["tree"] ? Tree11.fromJS(data["tree"]) : null;
                this.url = data["url"] !== undefined ? data["url"] : null;
            }
        };
        Commit10.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Commit10();
            result.init(data);
            return result;
        };
        Commit10.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["author"] = this.author ? this.author.toJSON() : null;
            data["committer"] = this.committer ? this.committer.toJSON() : null;
            data["message"] = this.message !== undefined ? this.message : null;
            data["tree"] = this.tree ? this.tree.toJSON() : null;
            data["url"] = this.url !== undefined ? this.url : null;
            return data;
        };
        return Commit10;
    }());
    GithubApiClient.Commit10 = Commit10;
    var Committer9 = /** @class */ (function () {
        function Committer9(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Committer9.prototype.init = function (data) {
            if (data) {
                this.avatar_url = data["avatar_url"] !== undefined ? data["avatar_url"] : null;
                this.events_url = data["events_url"] !== undefined ? data["events_url"] : null;
                this.followers_url = data["followers_url"] !== undefined ? data["followers_url"] : null;
                this.following_url = data["following_url"] !== undefined ? data["following_url"] : null;
                this.gists_url = data["gists_url"] !== undefined ? data["gists_url"] : null;
                this.gravatar_id = data["gravatar_id"] !== undefined ? data["gravatar_id"] : null;
                this.html_url = data["html_url"] !== undefined ? data["html_url"] : null;
                this.id = data["id"] !== undefined ? data["id"] : null;
                this.login = data["login"] !== undefined ? data["login"] : null;
                this.organizations_url = data["organizations_url"] !== undefined ? data["organizations_url"] : null;
                this.received_events_url = data["received_events_url"] !== undefined ? data["received_events_url"] : null;
                this.repos_url = data["repos_url"] !== undefined ? data["repos_url"] : null;
                this.site_admin = data["site_admin"] !== undefined ? data["site_admin"] : null;
                this.starred_url = data["starred_url"] !== undefined ? data["starred_url"] : null;
                this.subscriptions_url = data["subscriptions_url"] !== undefined ? data["subscriptions_url"] : null;
                this.type = data["type"] !== undefined ? data["type"] : null;
                this.url = data["url"] !== undefined ? data["url"] : null;
            }
        };
        Committer9.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Committer9();
            result.init(data);
            return result;
        };
        Committer9.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["avatar_url"] = this.avatar_url !== undefined ? this.avatar_url : null;
            data["events_url"] = this.events_url !== undefined ? this.events_url : null;
            data["followers_url"] = this.followers_url !== undefined ? this.followers_url : null;
            data["following_url"] = this.following_url !== undefined ? this.following_url : null;
            data["gists_url"] = this.gists_url !== undefined ? this.gists_url : null;
            data["gravatar_id"] = this.gravatar_id !== undefined ? this.gravatar_id : null;
            data["html_url"] = this.html_url !== undefined ? this.html_url : null;
            data["id"] = this.id !== undefined ? this.id : null;
            data["login"] = this.login !== undefined ? this.login : null;
            data["organizations_url"] = this.organizations_url !== undefined ? this.organizations_url : null;
            data["received_events_url"] = this.received_events_url !== undefined ? this.received_events_url : null;
            data["repos_url"] = this.repos_url !== undefined ? this.repos_url : null;
            data["site_admin"] = this.site_admin !== undefined ? this.site_admin : null;
            data["starred_url"] = this.starred_url !== undefined ? this.starred_url : null;
            data["subscriptions_url"] = this.subscriptions_url !== undefined ? this.subscriptions_url : null;
            data["type"] = this.type !== undefined ? this.type : null;
            data["url"] = this.url !== undefined ? this.url : null;
            return data;
        };
        return Committer9;
    }());
    GithubApiClient.Committer9 = Committer9;
    var Parents6 = /** @class */ (function () {
        function Parents6(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Parents6.prototype.init = function (data) {
            if (data) {
                this.sha = data["sha"] !== undefined ? data["sha"] : null;
                this.url = data["url"] !== undefined ? data["url"] : null;
            }
        };
        Parents6.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Parents6();
            result.init(data);
            return result;
        };
        Parents6.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["sha"] = this.sha !== undefined ? this.sha : null;
            data["url"] = this.url !== undefined ? this.url : null;
            return data;
        };
        return Parents6;
    }());
    GithubApiClient.Parents6 = Parents6;
    var Author13 = /** @class */ (function () {
        function Author13(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Author13.prototype.init = function (data) {
            if (data) {
                this.avatar_url = data["avatar_url"] !== undefined ? data["avatar_url"] : null;
                this.events_url = data["events_url"] !== undefined ? data["events_url"] : null;
                this.followers_url = data["followers_url"] !== undefined ? data["followers_url"] : null;
                this.following_url = data["following_url"] !== undefined ? data["following_url"] : null;
                this.gists_url = data["gists_url"] !== undefined ? data["gists_url"] : null;
                this.gravatar_id = data["gravatar_id"] !== undefined ? data["gravatar_id"] : null;
                this.html_url = data["html_url"] !== undefined ? data["html_url"] : null;
                this.id = data["id"] !== undefined ? data["id"] : null;
                this.login = data["login"] !== undefined ? data["login"] : null;
                this.organizations_url = data["organizations_url"] !== undefined ? data["organizations_url"] : null;
                this.received_events_url = data["received_events_url"] !== undefined ? data["received_events_url"] : null;
                this.repos_url = data["repos_url"] !== undefined ? data["repos_url"] : null;
                this.site_admin = data["site_admin"] !== undefined ? data["site_admin"] : null;
                this.starred_url = data["starred_url"] !== undefined ? data["starred_url"] : null;
                this.subscriptions_url = data["subscriptions_url"] !== undefined ? data["subscriptions_url"] : null;
                this.type = data["type"] !== undefined ? data["type"] : null;
                this.url = data["url"] !== undefined ? data["url"] : null;
            }
        };
        Author13.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Author13();
            result.init(data);
            return result;
        };
        Author13.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["avatar_url"] = this.avatar_url !== undefined ? this.avatar_url : null;
            data["events_url"] = this.events_url !== undefined ? this.events_url : null;
            data["followers_url"] = this.followers_url !== undefined ? this.followers_url : null;
            data["following_url"] = this.following_url !== undefined ? this.following_url : null;
            data["gists_url"] = this.gists_url !== undefined ? this.gists_url : null;
            data["gravatar_id"] = this.gravatar_id !== undefined ? this.gravatar_id : null;
            data["html_url"] = this.html_url !== undefined ? this.html_url : null;
            data["id"] = this.id !== undefined ? this.id : null;
            data["login"] = this.login !== undefined ? this.login : null;
            data["organizations_url"] = this.organizations_url !== undefined ? this.organizations_url : null;
            data["received_events_url"] = this.received_events_url !== undefined ? this.received_events_url : null;
            data["repos_url"] = this.repos_url !== undefined ? this.repos_url : null;
            data["site_admin"] = this.site_admin !== undefined ? this.site_admin : null;
            data["starred_url"] = this.starred_url !== undefined ? this.starred_url : null;
            data["subscriptions_url"] = this.subscriptions_url !== undefined ? this.subscriptions_url : null;
            data["type"] = this.type !== undefined ? this.type : null;
            data["url"] = this.url !== undefined ? this.url : null;
            return data;
        };
        return Author13;
    }());
    GithubApiClient.Author13 = Author13;
    var Commit11 = /** @class */ (function () {
        function Commit11(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Commit11.prototype.init = function (data) {
            if (data) {
                this.author = data["author"] ? Author20.fromJS(data["author"]) : null;
                this.committer = data["committer"] ? Committer17.fromJS(data["committer"]) : null;
                this.message = data["message"] !== undefined ? data["message"] : null;
                this.tree = data["tree"] ? Tree12.fromJS(data["tree"]) : null;
                this.url = data["url"] !== undefined ? data["url"] : null;
            }
        };
        Commit11.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Commit11();
            result.init(data);
            return result;
        };
        Commit11.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["author"] = this.author ? this.author.toJSON() : null;
            data["committer"] = this.committer ? this.committer.toJSON() : null;
            data["message"] = this.message !== undefined ? this.message : null;
            data["tree"] = this.tree ? this.tree.toJSON() : null;
            data["url"] = this.url !== undefined ? this.url : null;
            return data;
        };
        return Commit11;
    }());
    GithubApiClient.Commit11 = Commit11;
    var Committer10 = /** @class */ (function () {
        function Committer10(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Committer10.prototype.init = function (data) {
            if (data) {
                this.avatar_url = data["avatar_url"] !== undefined ? data["avatar_url"] : null;
                this.events_url = data["events_url"] !== undefined ? data["events_url"] : null;
                this.followers_url = data["followers_url"] !== undefined ? data["followers_url"] : null;
                this.following_url = data["following_url"] !== undefined ? data["following_url"] : null;
                this.gists_url = data["gists_url"] !== undefined ? data["gists_url"] : null;
                this.gravatar_id = data["gravatar_id"] !== undefined ? data["gravatar_id"] : null;
                this.html_url = data["html_url"] !== undefined ? data["html_url"] : null;
                this.id = data["id"] !== undefined ? data["id"] : null;
                this.login = data["login"] !== undefined ? data["login"] : null;
                this.organizations_url = data["organizations_url"] !== undefined ? data["organizations_url"] : null;
                this.received_events_url = data["received_events_url"] !== undefined ? data["received_events_url"] : null;
                this.repos_url = data["repos_url"] !== undefined ? data["repos_url"] : null;
                this.site_admin = data["site_admin"] !== undefined ? data["site_admin"] : null;
                this.starred_url = data["starred_url"] !== undefined ? data["starred_url"] : null;
                this.subscriptions_url = data["subscriptions_url"] !== undefined ? data["subscriptions_url"] : null;
                this.type = data["type"] !== undefined ? data["type"] : null;
                this.url = data["url"] !== undefined ? data["url"] : null;
            }
        };
        Committer10.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Committer10();
            result.init(data);
            return result;
        };
        Committer10.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["avatar_url"] = this.avatar_url !== undefined ? this.avatar_url : null;
            data["events_url"] = this.events_url !== undefined ? this.events_url : null;
            data["followers_url"] = this.followers_url !== undefined ? this.followers_url : null;
            data["following_url"] = this.following_url !== undefined ? this.following_url : null;
            data["gists_url"] = this.gists_url !== undefined ? this.gists_url : null;
            data["gravatar_id"] = this.gravatar_id !== undefined ? this.gravatar_id : null;
            data["html_url"] = this.html_url !== undefined ? this.html_url : null;
            data["id"] = this.id !== undefined ? this.id : null;
            data["login"] = this.login !== undefined ? this.login : null;
            data["organizations_url"] = this.organizations_url !== undefined ? this.organizations_url : null;
            data["received_events_url"] = this.received_events_url !== undefined ? this.received_events_url : null;
            data["repos_url"] = this.repos_url !== undefined ? this.repos_url : null;
            data["site_admin"] = this.site_admin !== undefined ? this.site_admin : null;
            data["starred_url"] = this.starred_url !== undefined ? this.starred_url : null;
            data["subscriptions_url"] = this.subscriptions_url !== undefined ? this.subscriptions_url : null;
            data["type"] = this.type !== undefined ? this.type : null;
            data["url"] = this.url !== undefined ? this.url : null;
            return data;
        };
        return Committer10;
    }());
    GithubApiClient.Committer10 = Committer10;
    var Parents7 = /** @class */ (function () {
        function Parents7(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Parents7.prototype.init = function (data) {
            if (data) {
                this.sha = data["sha"] !== undefined ? data["sha"] : null;
                this.url = data["url"] !== undefined ? data["url"] : null;
            }
        };
        Parents7.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Parents7();
            result.init(data);
            return result;
        };
        Parents7.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["sha"] = this.sha !== undefined ? this.sha : null;
            data["url"] = this.url !== undefined ? this.url : null;
            return data;
        };
        return Parents7;
    }());
    GithubApiClient.Parents7 = Parents7;
    var Author14 = /** @class */ (function () {
        function Author14(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Author14.prototype.init = function (data) {
            if (data) {
                this.date = data["date"] !== undefined ? data["date"] : null;
                this.email = data["email"] !== undefined ? data["email"] : null;
                this.name = data["name"] !== undefined ? data["name"] : null;
            }
        };
        Author14.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Author14();
            result.init(data);
            return result;
        };
        Author14.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["date"] = this.date !== undefined ? this.date : null;
            data["email"] = this.email !== undefined ? this.email : null;
            data["name"] = this.name !== undefined ? this.name : null;
            return data;
        };
        return Author14;
    }());
    GithubApiClient.Author14 = Author14;
    var Committer11 = /** @class */ (function () {
        function Committer11(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Committer11.prototype.init = function (data) {
            if (data) {
                this.date = data["date"] !== undefined ? data["date"] : null;
                this.email = data["email"] !== undefined ? data["email"] : null;
                this.name = data["name"] !== undefined ? data["name"] : null;
            }
        };
        Committer11.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Committer11();
            result.init(data);
            return result;
        };
        Committer11.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["date"] = this.date !== undefined ? this.date : null;
            data["email"] = this.email !== undefined ? this.email : null;
            data["name"] = this.name !== undefined ? this.name : null;
            return data;
        };
        return Committer11;
    }());
    GithubApiClient.Committer11 = Committer11;
    var Parents8 = /** @class */ (function () {
        function Parents8(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Parents8.prototype.init = function (data) {
            if (data) {
                this.html_url = data["html_url"] !== undefined ? data["html_url"] : null;
                this.sha = data["sha"] !== undefined ? data["sha"] : null;
                this.url = data["url"] !== undefined ? data["url"] : null;
            }
        };
        Parents8.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Parents8();
            result.init(data);
            return result;
        };
        Parents8.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["html_url"] = this.html_url !== undefined ? this.html_url : null;
            data["sha"] = this.sha !== undefined ? this.sha : null;
            data["url"] = this.url !== undefined ? this.url : null;
            return data;
        };
        return Parents8;
    }());
    GithubApiClient.Parents8 = Parents8;
    var Tree6 = /** @class */ (function () {
        function Tree6(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Tree6.prototype.init = function (data) {
            if (data) {
                this.sha = data["sha"] !== undefined ? data["sha"] : null;
                this.url = data["url"] !== undefined ? data["url"] : null;
            }
        };
        Tree6.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Tree6();
            result.init(data);
            return result;
        };
        Tree6.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["sha"] = this.sha !== undefined ? this.sha : null;
            data["url"] = this.url !== undefined ? this.url : null;
            return data;
        };
        return Tree6;
    }());
    GithubApiClient.Tree6 = Tree6;
    var _links9 = /** @class */ (function () {
        function _links9(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        _links9.prototype.init = function (data) {
            if (data) {
                this.git = data["git"] !== undefined ? data["git"] : null;
                this.html = data["html"] !== undefined ? data["html"] : null;
                this.self = data["self"] !== undefined ? data["self"] : null;
            }
        };
        _links9.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new _links9();
            result.init(data);
            return result;
        };
        _links9.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["git"] = this.git !== undefined ? this.git : null;
            data["html"] = this.html !== undefined ? this.html : null;
            data["self"] = this.self !== undefined ? this.self : null;
            return data;
        };
        return _links9;
    }());
    GithubApiClient._links9 = _links9;
    var Author15 = /** @class */ (function () {
        function Author15(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Author15.prototype.init = function (data) {
            if (data) {
                this.date = data["date"] !== undefined ? data["date"] : null;
                this.email = data["email"] !== undefined ? data["email"] : null;
                this.name = data["name"] !== undefined ? data["name"] : null;
            }
        };
        Author15.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Author15();
            result.init(data);
            return result;
        };
        Author15.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["date"] = this.date !== undefined ? this.date : null;
            data["email"] = this.email !== undefined ? this.email : null;
            data["name"] = this.name !== undefined ? this.name : null;
            return data;
        };
        return Author15;
    }());
    GithubApiClient.Author15 = Author15;
    var Committer12 = /** @class */ (function () {
        function Committer12(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Committer12.prototype.init = function (data) {
            if (data) {
                this.date = data["date"] !== undefined ? data["date"] : null;
                this.email = data["email"] !== undefined ? data["email"] : null;
                this.name = data["name"] !== undefined ? data["name"] : null;
            }
        };
        Committer12.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Committer12();
            result.init(data);
            return result;
        };
        Committer12.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["date"] = this.date !== undefined ? this.date : null;
            data["email"] = this.email !== undefined ? this.email : null;
            data["name"] = this.name !== undefined ? this.name : null;
            return data;
        };
        return Committer12;
    }());
    GithubApiClient.Committer12 = Committer12;
    var Parents9 = /** @class */ (function () {
        function Parents9(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Parents9.prototype.init = function (data) {
            if (data) {
                this.html_url = data["html_url"] !== undefined ? data["html_url"] : null;
                this.sha = data["sha"] !== undefined ? data["sha"] : null;
                this.url = data["url"] !== undefined ? data["url"] : null;
            }
        };
        Parents9.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Parents9();
            result.init(data);
            return result;
        };
        Parents9.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["html_url"] = this.html_url !== undefined ? this.html_url : null;
            data["sha"] = this.sha !== undefined ? this.sha : null;
            data["url"] = this.url !== undefined ? this.url : null;
            return data;
        };
        return Parents9;
    }());
    GithubApiClient.Parents9 = Parents9;
    var Tree7 = /** @class */ (function () {
        function Tree7(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Tree7.prototype.init = function (data) {
            if (data) {
                this.sha = data["sha"] !== undefined ? data["sha"] : null;
                this.url = data["url"] !== undefined ? data["url"] : null;
            }
        };
        Tree7.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Tree7();
            result.init(data);
            return result;
        };
        Tree7.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["sha"] = this.sha !== undefined ? this.sha : null;
            data["url"] = this.url !== undefined ? this.url : null;
            return data;
        };
        return Tree7;
    }());
    GithubApiClient.Tree7 = Tree7;
    var Assignee2 = /** @class */ (function () {
        function Assignee2(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Assignee2.prototype.init = function (data) {
            if (data) {
                this.avatar_url = data["avatar_url"] !== undefined ? data["avatar_url"] : null;
                this.gravatar_id = data["gravatar_id"] !== undefined ? data["gravatar_id"] : null;
                this.id = data["id"] !== undefined ? data["id"] : null;
                this.login = data["login"] !== undefined ? data["login"] : null;
                this.url = data["url"] !== undefined ? data["url"] : null;
            }
        };
        Assignee2.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Assignee2();
            result.init(data);
            return result;
        };
        Assignee2.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["avatar_url"] = this.avatar_url !== undefined ? this.avatar_url : null;
            data["gravatar_id"] = this.gravatar_id !== undefined ? this.gravatar_id : null;
            data["id"] = this.id !== undefined ? this.id : null;
            data["login"] = this.login !== undefined ? this.login : null;
            data["url"] = this.url !== undefined ? this.url : null;
            return data;
        };
        return Assignee2;
    }());
    GithubApiClient.Assignee2 = Assignee2;
    var Labels2 = /** @class */ (function () {
        function Labels2(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Labels2.prototype.init = function (data) {
            if (data) {
                this.color = data["color"] !== undefined ? data["color"] : null;
                this.name = data["name"] !== undefined ? data["name"] : null;
                this.url = data["url"] !== undefined ? data["url"] : null;
            }
        };
        Labels2.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Labels2();
            result.init(data);
            return result;
        };
        Labels2.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["color"] = this.color !== undefined ? this.color : null;
            data["name"] = this.name !== undefined ? this.name : null;
            data["url"] = this.url !== undefined ? this.url : null;
            return data;
        };
        return Labels2;
    }());
    GithubApiClient.Labels2 = Labels2;
    var Milestone3 = /** @class */ (function () {
        function Milestone3(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Milestone3.prototype.init = function (data) {
            if (data) {
                this.closed_issues = data["closed_issues"] !== undefined ? data["closed_issues"] : null;
                this.created_at = data["created_at"] !== undefined ? data["created_at"] : null;
                this.creator = data["creator"] ? Creator7.fromJS(data["creator"]) : null;
                this.description = data["description"] !== undefined ? data["description"] : null;
                this.due_on = data["due_on"] !== undefined ? data["due_on"] : null;
                this.number = data["number"] !== undefined ? data["number"] : null;
                this.open_issues = data["open_issues"] !== undefined ? data["open_issues"] : null;
                this.state = data["state"] !== undefined ? data["state"] : null;
                this.title = data["title"] !== undefined ? data["title"] : null;
                this.url = data["url"] !== undefined ? data["url"] : null;
            }
        };
        Milestone3.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Milestone3();
            result.init(data);
            return result;
        };
        Milestone3.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["closed_issues"] = this.closed_issues !== undefined ? this.closed_issues : null;
            data["created_at"] = this.created_at !== undefined ? this.created_at : null;
            data["creator"] = this.creator ? this.creator.toJSON() : null;
            data["description"] = this.description !== undefined ? this.description : null;
            data["due_on"] = this.due_on !== undefined ? this.due_on : null;
            data["number"] = this.number !== undefined ? this.number : null;
            data["open_issues"] = this.open_issues !== undefined ? this.open_issues : null;
            data["state"] = this.state !== undefined ? this.state : null;
            data["title"] = this.title !== undefined ? this.title : null;
            data["url"] = this.url !== undefined ? this.url : null;
            return data;
        };
        return Milestone3;
    }());
    GithubApiClient.Milestone3 = Milestone3;
    var Pull_request2 = /** @class */ (function () {
        function Pull_request2(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Pull_request2.prototype.init = function (data) {
            if (data) {
                this.diff_url = data["diff_url"] !== undefined ? data["diff_url"] : null;
                this.html_url = data["html_url"] !== undefined ? data["html_url"] : null;
                this.patch_url = data["patch_url"] !== undefined ? data["patch_url"] : null;
            }
        };
        Pull_request2.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Pull_request2();
            result.init(data);
            return result;
        };
        Pull_request2.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["diff_url"] = this.diff_url !== undefined ? this.diff_url : null;
            data["html_url"] = this.html_url !== undefined ? this.html_url : null;
            data["patch_url"] = this.patch_url !== undefined ? this.patch_url : null;
            return data;
        };
        return Pull_request2;
    }());
    GithubApiClient.Pull_request2 = Pull_request2;
    var Issue2State;
    (function (Issue2State) {
        Issue2State[Issue2State["Open"] = "open"] = "Open";
        Issue2State[Issue2State["Closed"] = "closed"] = "Closed";
    })(Issue2State = GithubApiClient.Issue2State || (GithubApiClient.Issue2State = {}));
    var User14 = /** @class */ (function () {
        function User14(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        User14.prototype.init = function (data) {
            if (data) {
                this.avatar_url = data["avatar_url"] !== undefined ? data["avatar_url"] : null;
                this.gravatar_id = data["gravatar_id"] !== undefined ? data["gravatar_id"] : null;
                this.id = data["id"] !== undefined ? data["id"] : null;
                this.login = data["login"] !== undefined ? data["login"] : null;
                this.url = data["url"] !== undefined ? data["url"] : null;
            }
        };
        User14.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new User14();
            result.init(data);
            return result;
        };
        User14.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["avatar_url"] = this.avatar_url !== undefined ? this.avatar_url : null;
            data["gravatar_id"] = this.gravatar_id !== undefined ? this.gravatar_id : null;
            data["id"] = this.id !== undefined ? this.id : null;
            data["login"] = this.login !== undefined ? this.login : null;
            data["url"] = this.url !== undefined ? this.url : null;
            return data;
        };
        return User14;
    }());
    GithubApiClient.User14 = User14;
    var Current_user = /** @class */ (function () {
        function Current_user(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Current_user.prototype.init = function (data) {
            if (data) {
                this.href = data["href"] !== undefined ? data["href"] : null;
                this.type = data["type"] !== undefined ? data["type"] : null;
            }
        };
        Current_user.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Current_user();
            result.init(data);
            return result;
        };
        Current_user.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["href"] = this.href !== undefined ? this.href : null;
            data["type"] = this.type !== undefined ? this.type : null;
            return data;
        };
        return Current_user;
    }());
    GithubApiClient.Current_user = Current_user;
    var Current_user_actor = /** @class */ (function () {
        function Current_user_actor(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Current_user_actor.prototype.init = function (data) {
            if (data) {
                this.href = data["href"] !== undefined ? data["href"] : null;
                this.type = data["type"] !== undefined ? data["type"] : null;
            }
        };
        Current_user_actor.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Current_user_actor();
            result.init(data);
            return result;
        };
        Current_user_actor.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["href"] = this.href !== undefined ? this.href : null;
            data["type"] = this.type !== undefined ? this.type : null;
            return data;
        };
        return Current_user_actor;
    }());
    GithubApiClient.Current_user_actor = Current_user_actor;
    var Current_user_organization = /** @class */ (function () {
        function Current_user_organization(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Current_user_organization.prototype.init = function (data) {
            if (data) {
                this.href = data["href"] !== undefined ? data["href"] : null;
                this.type = data["type"] !== undefined ? data["type"] : null;
            }
        };
        Current_user_organization.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Current_user_organization();
            result.init(data);
            return result;
        };
        Current_user_organization.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["href"] = this.href !== undefined ? this.href : null;
            data["type"] = this.type !== undefined ? this.type : null;
            return data;
        };
        return Current_user_organization;
    }());
    GithubApiClient.Current_user_organization = Current_user_organization;
    var Current_user_public = /** @class */ (function () {
        function Current_user_public(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Current_user_public.prototype.init = function (data) {
            if (data) {
                this.href = data["href"] !== undefined ? data["href"] : null;
                this.type = data["type"] !== undefined ? data["type"] : null;
            }
        };
        Current_user_public.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Current_user_public();
            result.init(data);
            return result;
        };
        Current_user_public.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["href"] = this.href !== undefined ? this.href : null;
            data["type"] = this.type !== undefined ? this.type : null;
            return data;
        };
        return Current_user_public;
    }());
    GithubApiClient.Current_user_public = Current_user_public;
    var Timeline = /** @class */ (function () {
        function Timeline(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Timeline.prototype.init = function (data) {
            if (data) {
                this.href = data["href"] !== undefined ? data["href"] : null;
                this.type = data["type"] !== undefined ? data["type"] : null;
            }
        };
        Timeline.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Timeline();
            result.init(data);
            return result;
        };
        Timeline.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["href"] = this.href !== undefined ? this.href : null;
            data["type"] = this.type !== undefined ? this.type : null;
            return data;
        };
        return Timeline;
    }());
    GithubApiClient.Timeline = Timeline;
    var User15 = /** @class */ (function () {
        function User15(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        User15.prototype.init = function (data) {
            if (data) {
                this.href = data["href"] !== undefined ? data["href"] : null;
                this.type = data["type"] !== undefined ? data["type"] : null;
            }
        };
        User15.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new User15();
            result.init(data);
            return result;
        };
        User15.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["href"] = this.href !== undefined ? this.href : null;
            data["type"] = this.type !== undefined ? this.type : null;
            return data;
        };
        return User15;
    }());
    GithubApiClient.User15 = User15;
    var Ring_erl = /** @class */ (function () {
        function Ring_erl(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Ring_erl.prototype.init = function (data) {
            if (data) {
                this.filename = data["filename"] !== undefined ? data["filename"] : null;
                this.raw_url = data["raw_url"] !== undefined ? data["raw_url"] : null;
                this.size = data["size"] !== undefined ? data["size"] : null;
            }
        };
        Ring_erl.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Ring_erl();
            result.init(data);
            return result;
        };
        Ring_erl.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["filename"] = this.filename !== undefined ? this.filename : null;
            data["raw_url"] = this.raw_url !== undefined ? this.raw_url : null;
            data["size"] = this.size !== undefined ? this.size : null;
            return data;
        };
        return Ring_erl;
    }());
    GithubApiClient.Ring_erl = Ring_erl;
    var User16 = /** @class */ (function () {
        function User16(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        User16.prototype.init = function (data) {
            if (data) {
                this.avatar_url = data["avatar_url"] !== undefined ? data["avatar_url"] : null;
                this.gravatar_id = data["gravatar_id"] !== undefined ? data["gravatar_id"] : null;
                this.id = data["id"] !== undefined ? data["id"] : null;
                this.login = data["login"] !== undefined ? data["login"] : null;
                this.url = data["url"] !== undefined ? data["url"] : null;
            }
        };
        User16.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new User16();
            result.init(data);
            return result;
        };
        User16.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["avatar_url"] = this.avatar_url !== undefined ? this.avatar_url : null;
            data["gravatar_id"] = this.gravatar_id !== undefined ? this.gravatar_id : null;
            data["id"] = this.id !== undefined ? this.id : null;
            data["login"] = this.login !== undefined ? this.login : null;
            data["url"] = this.url !== undefined ? this.url : null;
            return data;
        };
        return User16;
    }());
    GithubApiClient.User16 = User16;
    var Change_status = /** @class */ (function () {
        function Change_status(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Change_status.prototype.init = function (data) {
            if (data) {
                this.additions = data["additions"] !== undefined ? data["additions"] : null;
                this.deletions = data["deletions"] !== undefined ? data["deletions"] : null;
                this.total = data["total"] !== undefined ? data["total"] : null;
            }
        };
        Change_status.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Change_status();
            result.init(data);
            return result;
        };
        Change_status.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["additions"] = this.additions !== undefined ? this.additions : null;
            data["deletions"] = this.deletions !== undefined ? this.deletions : null;
            data["total"] = this.total !== undefined ? this.total : null;
            return data;
        };
        return Change_status;
    }());
    GithubApiClient.Change_status = Change_status;
    var User17 = /** @class */ (function () {
        function User17(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        User17.prototype.init = function (data) {
            if (data) {
                this.avatar_url = data["avatar_url"] !== undefined ? data["avatar_url"] : null;
                this.gravatar_id = data["gravatar_id"] !== undefined ? data["gravatar_id"] : null;
                this.id = data["id"] !== undefined ? data["id"] : null;
                this.login = data["login"] !== undefined ? data["login"] : null;
                this.url = data["url"] !== undefined ? data["url"] : null;
            }
        };
        User17.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new User17();
            result.init(data);
            return result;
        };
        User17.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["avatar_url"] = this.avatar_url !== undefined ? this.avatar_url : null;
            data["gravatar_id"] = this.gravatar_id !== undefined ? this.gravatar_id : null;
            data["id"] = this.id !== undefined ? this.id : null;
            data["login"] = this.login !== undefined ? this.login : null;
            data["url"] = this.url !== undefined ? this.url : null;
            return data;
        };
        return User17;
    }());
    GithubApiClient.User17 = User17;
    var Author16 = /** @class */ (function () {
        function Author16(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Author16.prototype.init = function (data) {
            if (data) {
                this.date = data["date"] !== undefined ? data["date"] : null;
                this.email = data["email"] !== undefined ? data["email"] : null;
                this.name = data["name"] !== undefined ? data["name"] : null;
            }
        };
        Author16.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Author16();
            result.init(data);
            return result;
        };
        Author16.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["date"] = this.date !== undefined ? this.date : null;
            data["email"] = this.email !== undefined ? this.email : null;
            data["name"] = this.name !== undefined ? this.name : null;
            return data;
        };
        return Author16;
    }());
    GithubApiClient.Author16 = Author16;
    var Committer13 = /** @class */ (function () {
        function Committer13(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Committer13.prototype.init = function (data) {
            if (data) {
                this.date = data["date"] !== undefined ? data["date"] : null;
                this.email = data["email"] !== undefined ? data["email"] : null;
                this.name = data["name"] !== undefined ? data["name"] : null;
            }
        };
        Committer13.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Committer13();
            result.init(data);
            return result;
        };
        Committer13.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["date"] = this.date !== undefined ? this.date : null;
            data["email"] = this.email !== undefined ? this.email : null;
            data["name"] = this.name !== undefined ? this.name : null;
            return data;
        };
        return Committer13;
    }());
    GithubApiClient.Committer13 = Committer13;
    var Tree8 = /** @class */ (function () {
        function Tree8(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Tree8.prototype.init = function (data) {
            if (data) {
                this.sha = data["sha"] !== undefined ? data["sha"] : null;
                this.url = data["url"] !== undefined ? data["url"] : null;
            }
        };
        Tree8.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Tree8();
            result.init(data);
            return result;
        };
        Tree8.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["sha"] = this.sha !== undefined ? this.sha : null;
            data["url"] = this.url !== undefined ? this.url : null;
            return data;
        };
        return Tree8;
    }());
    GithubApiClient.Tree8 = Tree8;
    var Owner8 = /** @class */ (function () {
        function Owner8(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Owner8.prototype.init = function (data) {
            if (data) {
                this.avatar_url = data["avatar_url"] !== undefined ? data["avatar_url"] : null;
                this.gravatar_id = data["gravatar_id"] !== undefined ? data["gravatar_id"] : null;
                this.id = data["id"] !== undefined ? data["id"] : null;
                this.login = data["login"] !== undefined ? data["login"] : null;
                this.url = data["url"] !== undefined ? data["url"] : null;
            }
        };
        Owner8.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Owner8();
            result.init(data);
            return result;
        };
        Owner8.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["avatar_url"] = this.avatar_url !== undefined ? this.avatar_url : null;
            data["gravatar_id"] = this.gravatar_id !== undefined ? this.gravatar_id : null;
            data["id"] = this.id !== undefined ? this.id : null;
            data["login"] = this.login !== undefined ? this.login : null;
            data["url"] = this.url !== undefined ? this.url : null;
            return data;
        };
        return Owner8;
    }());
    GithubApiClient.Owner8 = Owner8;
    var File1_txt = /** @class */ (function () {
        function File1_txt(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        File1_txt.prototype.init = function (data) {
            if (data) {
                this.content = data["content"] !== undefined ? data["content"] : null;
            }
        };
        File1_txt.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new File1_txt();
            result.init(data);
            return result;
        };
        File1_txt.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["content"] = this.content !== undefined ? this.content : null;
            return data;
        };
        return File1_txt;
    }());
    GithubApiClient.File1_txt = File1_txt;
    var New_file_txt = /** @class */ (function () {
        function New_file_txt(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        New_file_txt.prototype.init = function (data) {
            if (data) {
                this.content = data["content"] !== undefined ? data["content"] : null;
            }
        };
        New_file_txt.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new New_file_txt();
            result.init(data);
            return result;
        };
        New_file_txt.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["content"] = this.content !== undefined ? this.content : null;
            return data;
        };
        return New_file_txt;
    }());
    GithubApiClient.New_file_txt = New_file_txt;
    var Old_name_txt = /** @class */ (function () {
        function Old_name_txt(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Old_name_txt.prototype.init = function (data) {
            if (data) {
                this.content = data["content"] !== undefined ? data["content"] : null;
                this.filename = data["filename"] !== undefined ? data["filename"] : null;
            }
        };
        Old_name_txt.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Old_name_txt();
            result.init(data);
            return result;
        };
        Old_name_txt.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["content"] = this.content !== undefined ? this.content : null;
            data["filename"] = this.filename !== undefined ? this.filename : null;
            return data;
        };
        return Old_name_txt;
    }());
    GithubApiClient.Old_name_txt = Old_name_txt;
    var File1_txt2 = /** @class */ (function () {
        function File1_txt2(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        File1_txt2.prototype.init = function (data) {
            if (data) {
                this.content = data["content"] !== undefined ? data["content"] : null;
            }
        };
        File1_txt2.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new File1_txt2();
            result.init(data);
            return result;
        };
        File1_txt2.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["content"] = this.content !== undefined ? this.content : null;
            return data;
        };
        return File1_txt2;
    }());
    GithubApiClient.File1_txt2 = File1_txt2;
    var Comments = /** @class */ (function () {
        function Comments(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Comments.prototype.init = function (data) {
            if (data) {
                this.href = data["href"] !== undefined ? data["href"] : null;
            }
        };
        Comments.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Comments();
            result.init(data);
            return result;
        };
        Comments.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["href"] = this.href !== undefined ? this.href : null;
            return data;
        };
        return Comments;
    }());
    GithubApiClient.Comments = Comments;
    var Html = /** @class */ (function () {
        function Html(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Html.prototype.init = function (data) {
            if (data) {
                this.href = data["href"] !== undefined ? data["href"] : null;
            }
        };
        Html.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Html();
            result.init(data);
            return result;
        };
        Html.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["href"] = this.href !== undefined ? this.href : null;
            return data;
        };
        return Html;
    }());
    GithubApiClient.Html = Html;
    var Review_comments = /** @class */ (function () {
        function Review_comments(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Review_comments.prototype.init = function (data) {
            if (data) {
                this.href = data["href"] !== undefined ? data["href"] : null;
            }
        };
        Review_comments.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Review_comments();
            result.init(data);
            return result;
        };
        Review_comments.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["href"] = this.href !== undefined ? this.href : null;
            return data;
        };
        return Review_comments;
    }());
    GithubApiClient.Review_comments = Review_comments;
    var Self = /** @class */ (function () {
        function Self(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Self.prototype.init = function (data) {
            if (data) {
                this.href = data["href"] !== undefined ? data["href"] : null;
            }
        };
        Self.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Self();
            result.init(data);
            return result;
        };
        Self.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["href"] = this.href !== undefined ? this.href : null;
            return data;
        };
        return Self;
    }());
    GithubApiClient.Self = Self;
    var Repo3 = /** @class */ (function () {
        function Repo3(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Repo3.prototype.init = function (data) {
            if (data) {
                this.clone_url = data["clone_url"] !== undefined ? data["clone_url"] : null;
                this.created_at = data["created_at"] !== undefined ? data["created_at"] : null;
                this.description = data["description"] !== undefined ? data["description"] : null;
                this.fork = data["fork"] !== undefined ? data["fork"] : null;
                this.forks = data["forks"] !== undefined ? data["forks"] : null;
                this.forks_count = data["forks_count"] !== undefined ? data["forks_count"] : null;
                this.full_name = data["full_name"] !== undefined ? data["full_name"] : null;
                this.git_url = data["git_url"] !== undefined ? data["git_url"] : null;
                this.homepage = data["homepage"] !== undefined ? data["homepage"] : null;
                this.html_url = data["html_url"] !== undefined ? data["html_url"] : null;
                this.id = data["id"] !== undefined ? data["id"] : null;
                this.language = data["language"] !== undefined ? data["language"] : null;
                this.master_branch = data["master_branch"] !== undefined ? data["master_branch"] : null;
                this.mirror_url = data["mirror_url"] !== undefined ? data["mirror_url"] : null;
                this.name = data["name"] !== undefined ? data["name"] : null;
                this.open_issues = data["open_issues"] !== undefined ? data["open_issues"] : null;
                this.open_issues_count = data["open_issues_count"] !== undefined ? data["open_issues_count"] : null;
                this.owner = data["owner"] ? Owner12.fromJS(data["owner"]) : null;
                this.private = data["private"] !== undefined ? data["private"] : null;
                this.pushed_at = data["pushed_at"] !== undefined ? data["pushed_at"] : null;
                this.size = data["size"] !== undefined ? data["size"] : null;
                this.ssh_url = data["ssh_url"] !== undefined ? data["ssh_url"] : null;
                this.svn_url = data["svn_url"] !== undefined ? data["svn_url"] : null;
                this.updated_at = data["updated_at"] !== undefined ? data["updated_at"] : null;
                this.url = data["url"] !== undefined ? data["url"] : null;
                this.watchers = data["watchers"] !== undefined ? data["watchers"] : null;
                this.watchers_count = data["watchers_count"] !== undefined ? data["watchers_count"] : null;
            }
        };
        Repo3.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Repo3();
            result.init(data);
            return result;
        };
        Repo3.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["clone_url"] = this.clone_url !== undefined ? this.clone_url : null;
            data["created_at"] = this.created_at !== undefined ? this.created_at : null;
            data["description"] = this.description !== undefined ? this.description : null;
            data["fork"] = this.fork !== undefined ? this.fork : null;
            data["forks"] = this.forks !== undefined ? this.forks : null;
            data["forks_count"] = this.forks_count !== undefined ? this.forks_count : null;
            data["full_name"] = this.full_name !== undefined ? this.full_name : null;
            data["git_url"] = this.git_url !== undefined ? this.git_url : null;
            data["homepage"] = this.homepage !== undefined ? this.homepage : null;
            data["html_url"] = this.html_url !== undefined ? this.html_url : null;
            data["id"] = this.id !== undefined ? this.id : null;
            data["language"] = this.language !== undefined ? this.language : null;
            data["master_branch"] = this.master_branch !== undefined ? this.master_branch : null;
            data["mirror_url"] = this.mirror_url !== undefined ? this.mirror_url : null;
            data["name"] = this.name !== undefined ? this.name : null;
            data["open_issues"] = this.open_issues !== undefined ? this.open_issues : null;
            data["open_issues_count"] = this.open_issues_count !== undefined ? this.open_issues_count : null;
            data["owner"] = this.owner ? this.owner.toJSON() : null;
            data["private"] = this.private !== undefined ? this.private : null;
            data["pushed_at"] = this.pushed_at !== undefined ? this.pushed_at : null;
            data["size"] = this.size !== undefined ? this.size : null;
            data["ssh_url"] = this.ssh_url !== undefined ? this.ssh_url : null;
            data["svn_url"] = this.svn_url !== undefined ? this.svn_url : null;
            data["updated_at"] = this.updated_at !== undefined ? this.updated_at : null;
            data["url"] = this.url !== undefined ? this.url : null;
            data["watchers"] = this.watchers !== undefined ? this.watchers : null;
            data["watchers_count"] = this.watchers_count !== undefined ? this.watchers_count : null;
            return data;
        };
        return Repo3;
    }());
    GithubApiClient.Repo3 = Repo3;
    var User18 = /** @class */ (function () {
        function User18(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        User18.prototype.init = function (data) {
            if (data) {
                this.avatar_url = data["avatar_url"] !== undefined ? data["avatar_url"] : null;
                this.gravatar_id = data["gravatar_id"] !== undefined ? data["gravatar_id"] : null;
                this.id = data["id"] !== undefined ? data["id"] : null;
                this.login = data["login"] !== undefined ? data["login"] : null;
                this.url = data["url"] !== undefined ? data["url"] : null;
            }
        };
        User18.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new User18();
            result.init(data);
            return result;
        };
        User18.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["avatar_url"] = this.avatar_url !== undefined ? this.avatar_url : null;
            data["gravatar_id"] = this.gravatar_id !== undefined ? this.gravatar_id : null;
            data["id"] = this.id !== undefined ? this.id : null;
            data["login"] = this.login !== undefined ? this.login : null;
            data["url"] = this.url !== undefined ? this.url : null;
            return data;
        };
        return User18;
    }());
    GithubApiClient.User18 = User18;
    var Repo4 = /** @class */ (function () {
        function Repo4(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Repo4.prototype.init = function (data) {
            if (data) {
                this.clone_url = data["clone_url"] !== undefined ? data["clone_url"] : null;
                this.created_at = data["created_at"] !== undefined ? data["created_at"] : null;
                this.description = data["description"] !== undefined ? data["description"] : null;
                this.fork = data["fork"] !== undefined ? data["fork"] : null;
                this.forks = data["forks"] !== undefined ? data["forks"] : null;
                this.forks_count = data["forks_count"] !== undefined ? data["forks_count"] : null;
                this.full_name = data["full_name"] !== undefined ? data["full_name"] : null;
                this.git_url = data["git_url"] !== undefined ? data["git_url"] : null;
                this.homepage = data["homepage"] !== undefined ? data["homepage"] : null;
                this.html_url = data["html_url"] !== undefined ? data["html_url"] : null;
                this.id = data["id"] !== undefined ? data["id"] : null;
                this.language = data["language"] !== undefined ? data["language"] : null;
                this.master_branch = data["master_branch"] !== undefined ? data["master_branch"] : null;
                this.mirror_url = data["mirror_url"] !== undefined ? data["mirror_url"] : null;
                this.name = data["name"] !== undefined ? data["name"] : null;
                this.open_issues = data["open_issues"] !== undefined ? data["open_issues"] : null;
                this.open_issues_count = data["open_issues_count"] !== undefined ? data["open_issues_count"] : null;
                this.owner = data["owner"] ? Owner13.fromJS(data["owner"]) : null;
                this.private = data["private"] !== undefined ? data["private"] : null;
                this.pushed_at = data["pushed_at"] !== undefined ? data["pushed_at"] : null;
                this.size = data["size"] !== undefined ? data["size"] : null;
                this.ssh_url = data["ssh_url"] !== undefined ? data["ssh_url"] : null;
                this.svn_url = data["svn_url"] !== undefined ? data["svn_url"] : null;
                this.updated_at = data["updated_at"] !== undefined ? data["updated_at"] : null;
                this.url = data["url"] !== undefined ? data["url"] : null;
                this.watchers = data["watchers"] !== undefined ? data["watchers"] : null;
                this.watchers_count = data["watchers_count"] !== undefined ? data["watchers_count"] : null;
            }
        };
        Repo4.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Repo4();
            result.init(data);
            return result;
        };
        Repo4.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["clone_url"] = this.clone_url !== undefined ? this.clone_url : null;
            data["created_at"] = this.created_at !== undefined ? this.created_at : null;
            data["description"] = this.description !== undefined ? this.description : null;
            data["fork"] = this.fork !== undefined ? this.fork : null;
            data["forks"] = this.forks !== undefined ? this.forks : null;
            data["forks_count"] = this.forks_count !== undefined ? this.forks_count : null;
            data["full_name"] = this.full_name !== undefined ? this.full_name : null;
            data["git_url"] = this.git_url !== undefined ? this.git_url : null;
            data["homepage"] = this.homepage !== undefined ? this.homepage : null;
            data["html_url"] = this.html_url !== undefined ? this.html_url : null;
            data["id"] = this.id !== undefined ? this.id : null;
            data["language"] = this.language !== undefined ? this.language : null;
            data["master_branch"] = this.master_branch !== undefined ? this.master_branch : null;
            data["mirror_url"] = this.mirror_url !== undefined ? this.mirror_url : null;
            data["name"] = this.name !== undefined ? this.name : null;
            data["open_issues"] = this.open_issues !== undefined ? this.open_issues : null;
            data["open_issues_count"] = this.open_issues_count !== undefined ? this.open_issues_count : null;
            data["owner"] = this.owner ? this.owner.toJSON() : null;
            data["private"] = this.private !== undefined ? this.private : null;
            data["pushed_at"] = this.pushed_at !== undefined ? this.pushed_at : null;
            data["size"] = this.size !== undefined ? this.size : null;
            data["ssh_url"] = this.ssh_url !== undefined ? this.ssh_url : null;
            data["svn_url"] = this.svn_url !== undefined ? this.svn_url : null;
            data["updated_at"] = this.updated_at !== undefined ? this.updated_at : null;
            data["url"] = this.url !== undefined ? this.url : null;
            data["watchers"] = this.watchers !== undefined ? this.watchers : null;
            data["watchers_count"] = this.watchers_count !== undefined ? this.watchers_count : null;
            return data;
        };
        return Repo4;
    }());
    GithubApiClient.Repo4 = Repo4;
    var User19 = /** @class */ (function () {
        function User19(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        User19.prototype.init = function (data) {
            if (data) {
                this.avatar_url = data["avatar_url"] !== undefined ? data["avatar_url"] : null;
                this.gravatar_id = data["gravatar_id"] !== undefined ? data["gravatar_id"] : null;
                this.id = data["id"] !== undefined ? data["id"] : null;
                this.login = data["login"] !== undefined ? data["login"] : null;
                this.url = data["url"] !== undefined ? data["url"] : null;
            }
        };
        User19.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new User19();
            result.init(data);
            return result;
        };
        User19.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["avatar_url"] = this.avatar_url !== undefined ? this.avatar_url : null;
            data["gravatar_id"] = this.gravatar_id !== undefined ? this.gravatar_id : null;
            data["id"] = this.id !== undefined ? this.id : null;
            data["login"] = this.login !== undefined ? this.login : null;
            data["url"] = this.url !== undefined ? this.url : null;
            return data;
        };
        return User19;
    }());
    GithubApiClient.User19 = User19;
    var Html2 = /** @class */ (function () {
        function Html2(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Html2.prototype.init = function (data) {
            if (data) {
                this.href = data["href"] !== undefined ? data["href"] : null;
            }
        };
        Html2.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Html2();
            result.init(data);
            return result;
        };
        Html2.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["href"] = this.href !== undefined ? this.href : null;
            return data;
        };
        return Html2;
    }());
    GithubApiClient.Html2 = Html2;
    var Pull_request3 = /** @class */ (function () {
        function Pull_request3(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Pull_request3.prototype.init = function (data) {
            if (data) {
                this.href = data["href"] !== undefined ? data["href"] : null;
            }
        };
        Pull_request3.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Pull_request3();
            result.init(data);
            return result;
        };
        Pull_request3.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["href"] = this.href !== undefined ? this.href : null;
            return data;
        };
        return Pull_request3;
    }());
    GithubApiClient.Pull_request3 = Pull_request3;
    var Self2 = /** @class */ (function () {
        function Self2(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Self2.prototype.init = function (data) {
            if (data) {
                this.href = data["href"] !== undefined ? data["href"] : null;
            }
        };
        Self2.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Self2();
            result.init(data);
            return result;
        };
        Self2.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["href"] = this.href !== undefined ? this.href : null;
            return data;
        };
        return Self2;
    }());
    GithubApiClient.Self2 = Self2;
    var Uploader3 = /** @class */ (function () {
        function Uploader3(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Uploader3.prototype.init = function (data) {
            if (data) {
                this.avatar_url = data["avatar_url"] !== undefined ? data["avatar_url"] : null;
                this.events_url = data["events_url"] !== undefined ? data["events_url"] : null;
                this.followers_url = data["followers_url"] !== undefined ? data["followers_url"] : null;
                this.following_url = data["following_url"] !== undefined ? data["following_url"] : null;
                this.gists_url = data["gists_url"] !== undefined ? data["gists_url"] : null;
                this.gravatar_id = data["gravatar_id"] !== undefined ? data["gravatar_id"] : null;
                this.html_url = data["html_url"] !== undefined ? data["html_url"] : null;
                this.id = data["id"] !== undefined ? data["id"] : null;
                this.login = data["login"] !== undefined ? data["login"] : null;
                this.organizations_url = data["organizations_url"] !== undefined ? data["organizations_url"] : null;
                this.received_events_url = data["received_events_url"] !== undefined ? data["received_events_url"] : null;
                this.repos_url = data["repos_url"] !== undefined ? data["repos_url"] : null;
                this.site_admin = data["site_admin"] !== undefined ? data["site_admin"] : null;
                this.starred_url = data["starred_url"] !== undefined ? data["starred_url"] : null;
                this.subscriptions_url = data["subscriptions_url"] !== undefined ? data["subscriptions_url"] : null;
                this.type = data["type"] !== undefined ? data["type"] : null;
                this.url = data["url"] !== undefined ? data["url"] : null;
            }
        };
        Uploader3.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Uploader3();
            result.init(data);
            return result;
        };
        Uploader3.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["avatar_url"] = this.avatar_url !== undefined ? this.avatar_url : null;
            data["events_url"] = this.events_url !== undefined ? this.events_url : null;
            data["followers_url"] = this.followers_url !== undefined ? this.followers_url : null;
            data["following_url"] = this.following_url !== undefined ? this.following_url : null;
            data["gists_url"] = this.gists_url !== undefined ? this.gists_url : null;
            data["gravatar_id"] = this.gravatar_id !== undefined ? this.gravatar_id : null;
            data["html_url"] = this.html_url !== undefined ? this.html_url : null;
            data["id"] = this.id !== undefined ? this.id : null;
            data["login"] = this.login !== undefined ? this.login : null;
            data["organizations_url"] = this.organizations_url !== undefined ? this.organizations_url : null;
            data["received_events_url"] = this.received_events_url !== undefined ? this.received_events_url : null;
            data["repos_url"] = this.repos_url !== undefined ? this.repos_url : null;
            data["site_admin"] = this.site_admin !== undefined ? this.site_admin : null;
            data["starred_url"] = this.starred_url !== undefined ? this.starred_url : null;
            data["subscriptions_url"] = this.subscriptions_url !== undefined ? this.subscriptions_url : null;
            data["type"] = this.type !== undefined ? this.type : null;
            data["url"] = this.url !== undefined ? this.url : null;
            return data;
        };
        return Uploader3;
    }());
    GithubApiClient.Uploader3 = Uploader3;
    var Owner9 = /** @class */ (function () {
        function Owner9(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Owner9.prototype.init = function (data) {
            if (data) {
                this.avatar_url = data["avatar_url"] !== undefined ? data["avatar_url"] : null;
                this.gravatar_id = data["gravatar_id"] !== undefined ? data["gravatar_id"] : null;
                this.id = data["id"] !== undefined ? data["id"] : null;
                this.login = data["login"] !== undefined ? data["login"] : null;
                this.url = data["url"] !== undefined ? data["url"] : null;
            }
        };
        Owner9.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Owner9();
            result.init(data);
            return result;
        };
        Owner9.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["avatar_url"] = this.avatar_url !== undefined ? this.avatar_url : null;
            data["gravatar_id"] = this.gravatar_id !== undefined ? this.gravatar_id : null;
            data["id"] = this.id !== undefined ? this.id : null;
            data["login"] = this.login !== undefined ? this.login : null;
            data["url"] = this.url !== undefined ? this.url : null;
            return data;
        };
        return Owner9;
    }());
    GithubApiClient.Owner9 = Owner9;
    var Owner10 = /** @class */ (function () {
        function Owner10(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Owner10.prototype.init = function (data) {
            if (data) {
                this.avatar_url = data["avatar_url"] !== undefined ? data["avatar_url"] : null;
                this.gravatar_id = data["gravatar_id"] !== undefined ? data["gravatar_id"] : null;
                this.id = data["id"] !== undefined ? data["id"] : null;
                this.login = data["login"] !== undefined ? data["login"] : null;
                this.url = data["url"] !== undefined ? data["url"] : null;
            }
        };
        Owner10.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Owner10();
            result.init(data);
            return result;
        };
        Owner10.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["avatar_url"] = this.avatar_url !== undefined ? this.avatar_url : null;
            data["gravatar_id"] = this.gravatar_id !== undefined ? this.gravatar_id : null;
            data["id"] = this.id !== undefined ? this.id : null;
            data["login"] = this.login !== undefined ? this.login : null;
            data["url"] = this.url !== undefined ? this.url : null;
            return data;
        };
        return Owner10;
    }());
    GithubApiClient.Owner10 = Owner10;
    var Repository2 = /** @class */ (function () {
        function Repository2(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Repository2.prototype.init = function (data) {
            if (data) {
                this.archive_url = data["archive_url"] !== undefined ? data["archive_url"] : null;
                this.assignees_url = data["assignees_url"] !== undefined ? data["assignees_url"] : null;
                this.blobs_url = data["blobs_url"] !== undefined ? data["blobs_url"] : null;
                this.branches_url = data["branches_url"] !== undefined ? data["branches_url"] : null;
                this.collaborators_url = data["collaborators_url"] !== undefined ? data["collaborators_url"] : null;
                this.comments_url = data["comments_url"] !== undefined ? data["comments_url"] : null;
                this.commits_url = data["commits_url"] !== undefined ? data["commits_url"] : null;
                this.compare_url = data["compare_url"] !== undefined ? data["compare_url"] : null;
                this.contents_url = data["contents_url"] !== undefined ? data["contents_url"] : null;
                this.contributors_url = data["contributors_url"] !== undefined ? data["contributors_url"] : null;
                this.description = data["description"] !== undefined ? data["description"] : null;
                this.downloads_url = data["downloads_url"] !== undefined ? data["downloads_url"] : null;
                this.events_url = data["events_url"] !== undefined ? data["events_url"] : null;
                this.fork = data["fork"] !== undefined ? data["fork"] : null;
                this.forks_url = data["forks_url"] !== undefined ? data["forks_url"] : null;
                this.full_name = data["full_name"] !== undefined ? data["full_name"] : null;
                this.git_commits_url = data["git_commits_url"] !== undefined ? data["git_commits_url"] : null;
                this.git_refs_url = data["git_refs_url"] !== undefined ? data["git_refs_url"] : null;
                this.git_tags_url = data["git_tags_url"] !== undefined ? data["git_tags_url"] : null;
                this.hooks_url = data["hooks_url"] !== undefined ? data["hooks_url"] : null;
                this.html_url = data["html_url"] !== undefined ? data["html_url"] : null;
                this.id = data["id"] !== undefined ? data["id"] : null;
                this.issue_comment_url = data["issue_comment_url"] !== undefined ? data["issue_comment_url"] : null;
                this.issue_events_url = data["issue_events_url"] !== undefined ? data["issue_events_url"] : null;
                this.issues_url = data["issues_url"] !== undefined ? data["issues_url"] : null;
                this.keys_url = data["keys_url"] !== undefined ? data["keys_url"] : null;
                this.labels_url = data["labels_url"] !== undefined ? data["labels_url"] : null;
                this.languages_url = data["languages_url"] !== undefined ? data["languages_url"] : null;
                this.merges_url = data["merges_url"] !== undefined ? data["merges_url"] : null;
                this.milestones_url = data["milestones_url"] !== undefined ? data["milestones_url"] : null;
                this.name = data["name"] !== undefined ? data["name"] : null;
                this.notifications_url = data["notifications_url"] !== undefined ? data["notifications_url"] : null;
                this.owner = data["owner"] ? Owner14.fromJS(data["owner"]) : null;
                this.private = data["private"] !== undefined ? data["private"] : null;
                this.pulls_url = data["pulls_url"] !== undefined ? data["pulls_url"] : null;
                this.stargazers_url = data["stargazers_url"] !== undefined ? data["stargazers_url"] : null;
                this.statuses_url = data["statuses_url"] !== undefined ? data["statuses_url"] : null;
                this.subscribers_url = data["subscribers_url"] !== undefined ? data["subscribers_url"] : null;
                this.subscription_url = data["subscription_url"] !== undefined ? data["subscription_url"] : null;
                this.tags_url = data["tags_url"] !== undefined ? data["tags_url"] : null;
                this.teams_url = data["teams_url"] !== undefined ? data["teams_url"] : null;
                this.trees_url = data["trees_url"] !== undefined ? data["trees_url"] : null;
                this.url = data["url"] !== undefined ? data["url"] : null;
            }
        };
        Repository2.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Repository2();
            result.init(data);
            return result;
        };
        Repository2.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["archive_url"] = this.archive_url !== undefined ? this.archive_url : null;
            data["assignees_url"] = this.assignees_url !== undefined ? this.assignees_url : null;
            data["blobs_url"] = this.blobs_url !== undefined ? this.blobs_url : null;
            data["branches_url"] = this.branches_url !== undefined ? this.branches_url : null;
            data["collaborators_url"] = this.collaborators_url !== undefined ? this.collaborators_url : null;
            data["comments_url"] = this.comments_url !== undefined ? this.comments_url : null;
            data["commits_url"] = this.commits_url !== undefined ? this.commits_url : null;
            data["compare_url"] = this.compare_url !== undefined ? this.compare_url : null;
            data["contents_url"] = this.contents_url !== undefined ? this.contents_url : null;
            data["contributors_url"] = this.contributors_url !== undefined ? this.contributors_url : null;
            data["description"] = this.description !== undefined ? this.description : null;
            data["downloads_url"] = this.downloads_url !== undefined ? this.downloads_url : null;
            data["events_url"] = this.events_url !== undefined ? this.events_url : null;
            data["fork"] = this.fork !== undefined ? this.fork : null;
            data["forks_url"] = this.forks_url !== undefined ? this.forks_url : null;
            data["full_name"] = this.full_name !== undefined ? this.full_name : null;
            data["git_commits_url"] = this.git_commits_url !== undefined ? this.git_commits_url : null;
            data["git_refs_url"] = this.git_refs_url !== undefined ? this.git_refs_url : null;
            data["git_tags_url"] = this.git_tags_url !== undefined ? this.git_tags_url : null;
            data["hooks_url"] = this.hooks_url !== undefined ? this.hooks_url : null;
            data["html_url"] = this.html_url !== undefined ? this.html_url : null;
            data["id"] = this.id !== undefined ? this.id : null;
            data["issue_comment_url"] = this.issue_comment_url !== undefined ? this.issue_comment_url : null;
            data["issue_events_url"] = this.issue_events_url !== undefined ? this.issue_events_url : null;
            data["issues_url"] = this.issues_url !== undefined ? this.issues_url : null;
            data["keys_url"] = this.keys_url !== undefined ? this.keys_url : null;
            data["labels_url"] = this.labels_url !== undefined ? this.labels_url : null;
            data["languages_url"] = this.languages_url !== undefined ? this.languages_url : null;
            data["merges_url"] = this.merges_url !== undefined ? this.merges_url : null;
            data["milestones_url"] = this.milestones_url !== undefined ? this.milestones_url : null;
            data["name"] = this.name !== undefined ? this.name : null;
            data["notifications_url"] = this.notifications_url !== undefined ? this.notifications_url : null;
            data["owner"] = this.owner ? this.owner.toJSON() : null;
            data["private"] = this.private !== undefined ? this.private : null;
            data["pulls_url"] = this.pulls_url !== undefined ? this.pulls_url : null;
            data["stargazers_url"] = this.stargazers_url !== undefined ? this.stargazers_url : null;
            data["statuses_url"] = this.statuses_url !== undefined ? this.statuses_url : null;
            data["subscribers_url"] = this.subscribers_url !== undefined ? this.subscribers_url : null;
            data["subscription_url"] = this.subscription_url !== undefined ? this.subscription_url : null;
            data["tags_url"] = this.tags_url !== undefined ? this.tags_url : null;
            data["teams_url"] = this.teams_url !== undefined ? this.teams_url : null;
            data["trees_url"] = this.trees_url !== undefined ? this.trees_url : null;
            data["url"] = this.url !== undefined ? this.url : null;
            return data;
        };
        return Repository2;
    }());
    GithubApiClient.Repository2 = Repository2;
    var Assignee3 = /** @class */ (function () {
        function Assignee3(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Assignee3.prototype.init = function (data) {
            if (data) {
            }
        };
        Assignee3.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Assignee3();
            result.init(data);
            return result;
        };
        Assignee3.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            return data;
        };
        return Assignee3;
    }());
    GithubApiClient.Assignee3 = Assignee3;
    var Closed_at = /** @class */ (function () {
        function Closed_at(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Closed_at.prototype.init = function (data) {
            if (data) {
            }
        };
        Closed_at.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Closed_at();
            result.init(data);
            return result;
        };
        Closed_at.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            return data;
        };
        return Closed_at;
    }());
    GithubApiClient.Closed_at = Closed_at;
    var Labels3 = /** @class */ (function () {
        function Labels3(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Labels3.prototype.init = function (data) {
            if (data) {
                this.color = data["color"] !== undefined ? data["color"] : null;
                this.name = data["name"] !== undefined ? data["name"] : null;
                this.url = data["url"] !== undefined ? data["url"] : null;
            }
        };
        Labels3.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Labels3();
            result.init(data);
            return result;
        };
        Labels3.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["color"] = this.color !== undefined ? this.color : null;
            data["name"] = this.name !== undefined ? this.name : null;
            data["url"] = this.url !== undefined ? this.url : null;
            return data;
        };
        return Labels3;
    }());
    GithubApiClient.Labels3 = Labels3;
    var Milestone4 = /** @class */ (function () {
        function Milestone4(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Milestone4.prototype.init = function (data) {
            if (data) {
            }
        };
        Milestone4.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Milestone4();
            result.init(data);
            return result;
        };
        Milestone4.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            return data;
        };
        return Milestone4;
    }());
    GithubApiClient.Milestone4 = Milestone4;
    var Pull_request4 = /** @class */ (function () {
        function Pull_request4(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Pull_request4.prototype.init = function (data) {
            if (data) {
                this.diff_url = data["diff_url"] !== undefined ? data["diff_url"] : null;
                this.html_url = data["html_url"] !== undefined ? data["html_url"] : null;
                this.patch_url = data["patch_url"] !== undefined ? data["patch_url"] : null;
            }
        };
        Pull_request4.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Pull_request4();
            result.init(data);
            return result;
        };
        Pull_request4.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["diff_url"] = this.diff_url !== undefined ? this.diff_url : null;
            data["html_url"] = this.html_url !== undefined ? this.html_url : null;
            data["patch_url"] = this.patch_url !== undefined ? this.patch_url : null;
            return data;
        };
        return Pull_request4;
    }());
    GithubApiClient.Pull_request4 = Pull_request4;
    var User20 = /** @class */ (function () {
        function User20(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        User20.prototype.init = function (data) {
            if (data) {
                this.avatar_url = data["avatar_url"] !== undefined ? data["avatar_url"] : null;
                this.events_url = data["events_url"] !== undefined ? data["events_url"] : null;
                this.followers_url = data["followers_url"] !== undefined ? data["followers_url"] : null;
                this.following_url = data["following_url"] !== undefined ? data["following_url"] : null;
                this.gists_url = data["gists_url"] !== undefined ? data["gists_url"] : null;
                this.gravatar_id = data["gravatar_id"] !== undefined ? data["gravatar_id"] : null;
                this.html_url = data["html_url"] !== undefined ? data["html_url"] : null;
                this.id = data["id"] !== undefined ? data["id"] : null;
                this.login = data["login"] !== undefined ? data["login"] : null;
                this.organizations_url = data["organizations_url"] !== undefined ? data["organizations_url"] : null;
                this.received_events_url = data["received_events_url"] !== undefined ? data["received_events_url"] : null;
                this.repos_url = data["repos_url"] !== undefined ? data["repos_url"] : null;
                this.starred_url = data["starred_url"] !== undefined ? data["starred_url"] : null;
                this.subscriptions_url = data["subscriptions_url"] !== undefined ? data["subscriptions_url"] : null;
                this.type = data["type"] !== undefined ? data["type"] : null;
                this.url = data["url"] !== undefined ? data["url"] : null;
            }
        };
        User20.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new User20();
            result.init(data);
            return result;
        };
        User20.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["avatar_url"] = this.avatar_url !== undefined ? this.avatar_url : null;
            data["events_url"] = this.events_url !== undefined ? this.events_url : null;
            data["followers_url"] = this.followers_url !== undefined ? this.followers_url : null;
            data["following_url"] = this.following_url !== undefined ? this.following_url : null;
            data["gists_url"] = this.gists_url !== undefined ? this.gists_url : null;
            data["gravatar_id"] = this.gravatar_id !== undefined ? this.gravatar_id : null;
            data["html_url"] = this.html_url !== undefined ? this.html_url : null;
            data["id"] = this.id !== undefined ? this.id : null;
            data["login"] = this.login !== undefined ? this.login : null;
            data["organizations_url"] = this.organizations_url !== undefined ? this.organizations_url : null;
            data["received_events_url"] = this.received_events_url !== undefined ? this.received_events_url : null;
            data["repos_url"] = this.repos_url !== undefined ? this.repos_url : null;
            data["starred_url"] = this.starred_url !== undefined ? this.starred_url : null;
            data["subscriptions_url"] = this.subscriptions_url !== undefined ? this.subscriptions_url : null;
            data["type"] = this.type !== undefined ? this.type : null;
            data["url"] = this.url !== undefined ? this.url : null;
            return data;
        };
        return User20;
    }());
    GithubApiClient.User20 = User20;
    var Owner11 = /** @class */ (function () {
        function Owner11(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Owner11.prototype.init = function (data) {
            if (data) {
                this.avatar_url = data["avatar_url"] !== undefined ? data["avatar_url"] : null;
                this.gravatar_id = data["gravatar_id"] !== undefined ? data["gravatar_id"] : null;
                this.id = data["id"] !== undefined ? data["id"] : null;
                this.login = data["login"] !== undefined ? data["login"] : null;
                this.received_events_url = data["received_events_url"] !== undefined ? data["received_events_url"] : null;
                this.type = data["type"] !== undefined ? data["type"] : null;
                this.url = data["url"] !== undefined ? data["url"] : null;
            }
        };
        Owner11.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Owner11();
            result.init(data);
            return result;
        };
        Owner11.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["avatar_url"] = this.avatar_url !== undefined ? this.avatar_url : null;
            data["gravatar_id"] = this.gravatar_id !== undefined ? this.gravatar_id : null;
            data["id"] = this.id !== undefined ? this.id : null;
            data["login"] = this.login !== undefined ? this.login : null;
            data["received_events_url"] = this.received_events_url !== undefined ? this.received_events_url : null;
            data["type"] = this.type !== undefined ? this.type : null;
            data["url"] = this.url !== undefined ? this.url : null;
            return data;
        };
        return Owner11;
    }());
    GithubApiClient.Owner11 = Owner11;
    var Tree4Mode;
    (function (Tree4Mode) {
        Tree4Mode[Tree4Mode["_100644"] = "100644"] = "_100644";
        Tree4Mode[Tree4Mode["_100755"] = "100755"] = "_100755";
        Tree4Mode[Tree4Mode["_040000"] = "040000"] = "_040000";
        Tree4Mode[Tree4Mode["_160000"] = "160000"] = "_160000";
        Tree4Mode[Tree4Mode["_120000"] = "120000"] = "_120000";
    })(Tree4Mode = GithubApiClient.Tree4Mode || (GithubApiClient.Tree4Mode = {}));
    var Tree4Type;
    (function (Tree4Type) {
        Tree4Type[Tree4Type["Blob"] = "blob"] = "Blob";
        Tree4Type[Tree4Type["Tree"] = "tree"] = "Tree";
        Tree4Type[Tree4Type["Commit"] = "commit"] = "Commit";
    })(Tree4Type = GithubApiClient.Tree4Type || (GithubApiClient.Tree4Type = {}));
    var Ring_erl2 = /** @class */ (function () {
        function Ring_erl2(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Ring_erl2.prototype.init = function (data) {
            if (data) {
                this.filename = data["filename"] !== undefined ? data["filename"] : null;
                this.raw_url = data["raw_url"] !== undefined ? data["raw_url"] : null;
                this.size = data["size"] !== undefined ? data["size"] : null;
            }
        };
        Ring_erl2.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Ring_erl2();
            result.init(data);
            return result;
        };
        Ring_erl2.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["filename"] = this.filename !== undefined ? this.filename : null;
            data["raw_url"] = this.raw_url !== undefined ? this.raw_url : null;
            data["size"] = this.size !== undefined ? this.size : null;
            return data;
        };
        return Ring_erl2;
    }());
    GithubApiClient.Ring_erl2 = Ring_erl2;
    var Creator6 = /** @class */ (function () {
        function Creator6(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Creator6.prototype.init = function (data) {
            if (data) {
                this.avatar_url = data["avatar_url"] !== undefined ? data["avatar_url"] : null;
                this.gravatar_id = data["gravatar_id"] !== undefined ? data["gravatar_id"] : null;
                this.id = data["id"] !== undefined ? data["id"] : null;
                this.login = data["login"] !== undefined ? data["login"] : null;
                this.url = data["url"] !== undefined ? data["url"] : null;
            }
        };
        Creator6.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Creator6();
            result.init(data);
            return result;
        };
        Creator6.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["avatar_url"] = this.avatar_url !== undefined ? this.avatar_url : null;
            data["gravatar_id"] = this.gravatar_id !== undefined ? this.gravatar_id : null;
            data["id"] = this.id !== undefined ? this.id : null;
            data["login"] = this.login !== undefined ? this.login : null;
            data["url"] = this.url !== undefined ? this.url : null;
            return data;
        };
        return Creator6;
    }());
    GithubApiClient.Creator6 = Creator6;
    var Milestone2State;
    (function (Milestone2State) {
        Milestone2State[Milestone2State["Open"] = "open"] = "Open";
        Milestone2State[Milestone2State["Closed"] = "closed"] = "Closed";
    })(Milestone2State = GithubApiClient.Milestone2State || (GithubApiClient.Milestone2State = {}));
    var Author17 = /** @class */ (function () {
        function Author17(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Author17.prototype.init = function (data) {
            if (data) {
                this.date = data["date"] !== undefined ? data["date"] : null;
                this.email = data["email"] !== undefined ? data["email"] : null;
                this.name = data["name"] !== undefined ? data["name"] : null;
            }
        };
        Author17.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Author17();
            result.init(data);
            return result;
        };
        Author17.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["date"] = this.date !== undefined ? this.date : null;
            data["email"] = this.email !== undefined ? this.email : null;
            data["name"] = this.name !== undefined ? this.name : null;
            return data;
        };
        return Author17;
    }());
    GithubApiClient.Author17 = Author17;
    var Committer14 = /** @class */ (function () {
        function Committer14(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Committer14.prototype.init = function (data) {
            if (data) {
                this.date = data["date"] !== undefined ? data["date"] : null;
                this.email = data["email"] !== undefined ? data["email"] : null;
                this.name = data["name"] !== undefined ? data["name"] : null;
            }
        };
        Committer14.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Committer14();
            result.init(data);
            return result;
        };
        Committer14.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["date"] = this.date !== undefined ? this.date : null;
            data["email"] = this.email !== undefined ? this.email : null;
            data["name"] = this.name !== undefined ? this.name : null;
            return data;
        };
        return Committer14;
    }());
    GithubApiClient.Committer14 = Committer14;
    var Tree9 = /** @class */ (function () {
        function Tree9(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Tree9.prototype.init = function (data) {
            if (data) {
                this.sha = data["sha"] !== undefined ? data["sha"] : null;
                this.url = data["url"] !== undefined ? data["url"] : null;
            }
        };
        Tree9.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Tree9();
            result.init(data);
            return result;
        };
        Tree9.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["sha"] = this.sha !== undefined ? this.sha : null;
            data["url"] = this.url !== undefined ? this.url : null;
            return data;
        };
        return Tree9;
    }());
    GithubApiClient.Tree9 = Tree9;
    var Html3 = /** @class */ (function () {
        function Html3(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Html3.prototype.init = function (data) {
            if (data) {
                this.href = data["href"] !== undefined ? data["href"] : null;
            }
        };
        Html3.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Html3();
            result.init(data);
            return result;
        };
        Html3.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["href"] = this.href !== undefined ? this.href : null;
            return data;
        };
        return Html3;
    }());
    GithubApiClient.Html3 = Html3;
    var Pull_request5 = /** @class */ (function () {
        function Pull_request5(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Pull_request5.prototype.init = function (data) {
            if (data) {
                this.href = data["href"] !== undefined ? data["href"] : null;
            }
        };
        Pull_request5.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Pull_request5();
            result.init(data);
            return result;
        };
        Pull_request5.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["href"] = this.href !== undefined ? this.href : null;
            return data;
        };
        return Pull_request5;
    }());
    GithubApiClient.Pull_request5 = Pull_request5;
    var Self3 = /** @class */ (function () {
        function Self3(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Self3.prototype.init = function (data) {
            if (data) {
                this.href = data["href"] !== undefined ? data["href"] : null;
            }
        };
        Self3.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Self3();
            result.init(data);
            return result;
        };
        Self3.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["href"] = this.href !== undefined ? this.href : null;
            return data;
        };
        return Self3;
    }());
    GithubApiClient.Self3 = Self3;
    var Comments2 = /** @class */ (function () {
        function Comments2(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Comments2.prototype.init = function (data) {
            if (data) {
                this.href = data["href"] !== undefined ? data["href"] : null;
            }
        };
        Comments2.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Comments2();
            result.init(data);
            return result;
        };
        Comments2.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["href"] = this.href !== undefined ? this.href : null;
            return data;
        };
        return Comments2;
    }());
    GithubApiClient.Comments2 = Comments2;
    var Html4 = /** @class */ (function () {
        function Html4(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Html4.prototype.init = function (data) {
            if (data) {
                this.href = data["href"] !== undefined ? data["href"] : null;
            }
        };
        Html4.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Html4();
            result.init(data);
            return result;
        };
        Html4.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["href"] = this.href !== undefined ? this.href : null;
            return data;
        };
        return Html4;
    }());
    GithubApiClient.Html4 = Html4;
    var Review_comments2 = /** @class */ (function () {
        function Review_comments2(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Review_comments2.prototype.init = function (data) {
            if (data) {
                this.href = data["href"] !== undefined ? data["href"] : null;
            }
        };
        Review_comments2.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Review_comments2();
            result.init(data);
            return result;
        };
        Review_comments2.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["href"] = this.href !== undefined ? this.href : null;
            return data;
        };
        return Review_comments2;
    }());
    GithubApiClient.Review_comments2 = Review_comments2;
    var Self4 = /** @class */ (function () {
        function Self4(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Self4.prototype.init = function (data) {
            if (data) {
                this.href = data["href"] !== undefined ? data["href"] : null;
            }
        };
        Self4.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Self4();
            result.init(data);
            return result;
        };
        Self4.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["href"] = this.href !== undefined ? this.href : null;
            return data;
        };
        return Self4;
    }());
    GithubApiClient.Self4 = Self4;
    var Repo5 = /** @class */ (function () {
        function Repo5(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Repo5.prototype.init = function (data) {
            if (data) {
                this.clone_url = data["clone_url"] !== undefined ? data["clone_url"] : null;
                this.created_at = data["created_at"] !== undefined ? data["created_at"] : null;
                this.description = data["description"] !== undefined ? data["description"] : null;
                this.fork = data["fork"] !== undefined ? data["fork"] : null;
                this.forks = data["forks"] !== undefined ? data["forks"] : null;
                this.forks_count = data["forks_count"] !== undefined ? data["forks_count"] : null;
                this.full_name = data["full_name"] !== undefined ? data["full_name"] : null;
                this.git_url = data["git_url"] !== undefined ? data["git_url"] : null;
                this.homepage = data["homepage"] !== undefined ? data["homepage"] : null;
                this.html_url = data["html_url"] !== undefined ? data["html_url"] : null;
                this.id = data["id"] !== undefined ? data["id"] : null;
                this.language = data["language"] !== undefined ? data["language"] : null;
                this.master_branch = data["master_branch"] !== undefined ? data["master_branch"] : null;
                this.mirror_url = data["mirror_url"] !== undefined ? data["mirror_url"] : null;
                this.name = data["name"] !== undefined ? data["name"] : null;
                this.open_issues = data["open_issues"] !== undefined ? data["open_issues"] : null;
                this.open_issues_count = data["open_issues_count"] !== undefined ? data["open_issues_count"] : null;
                this.owner = data["owner"] ? Owner15.fromJS(data["owner"]) : null;
                this.private = data["private"] !== undefined ? data["private"] : null;
                this.pushed_at = data["pushed_at"] !== undefined ? data["pushed_at"] : null;
                this.size = data["size"] !== undefined ? data["size"] : null;
                this.ssh_url = data["ssh_url"] !== undefined ? data["ssh_url"] : null;
                this.svn_url = data["svn_url"] !== undefined ? data["svn_url"] : null;
                this.updated_at = data["updated_at"] !== undefined ? data["updated_at"] : null;
                this.url = data["url"] !== undefined ? data["url"] : null;
                this.watchers = data["watchers"] !== undefined ? data["watchers"] : null;
                this.watchers_count = data["watchers_count"] !== undefined ? data["watchers_count"] : null;
            }
        };
        Repo5.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Repo5();
            result.init(data);
            return result;
        };
        Repo5.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["clone_url"] = this.clone_url !== undefined ? this.clone_url : null;
            data["created_at"] = this.created_at !== undefined ? this.created_at : null;
            data["description"] = this.description !== undefined ? this.description : null;
            data["fork"] = this.fork !== undefined ? this.fork : null;
            data["forks"] = this.forks !== undefined ? this.forks : null;
            data["forks_count"] = this.forks_count !== undefined ? this.forks_count : null;
            data["full_name"] = this.full_name !== undefined ? this.full_name : null;
            data["git_url"] = this.git_url !== undefined ? this.git_url : null;
            data["homepage"] = this.homepage !== undefined ? this.homepage : null;
            data["html_url"] = this.html_url !== undefined ? this.html_url : null;
            data["id"] = this.id !== undefined ? this.id : null;
            data["language"] = this.language !== undefined ? this.language : null;
            data["master_branch"] = this.master_branch !== undefined ? this.master_branch : null;
            data["mirror_url"] = this.mirror_url !== undefined ? this.mirror_url : null;
            data["name"] = this.name !== undefined ? this.name : null;
            data["open_issues"] = this.open_issues !== undefined ? this.open_issues : null;
            data["open_issues_count"] = this.open_issues_count !== undefined ? this.open_issues_count : null;
            data["owner"] = this.owner ? this.owner.toJSON() : null;
            data["private"] = this.private !== undefined ? this.private : null;
            data["pushed_at"] = this.pushed_at !== undefined ? this.pushed_at : null;
            data["size"] = this.size !== undefined ? this.size : null;
            data["ssh_url"] = this.ssh_url !== undefined ? this.ssh_url : null;
            data["svn_url"] = this.svn_url !== undefined ? this.svn_url : null;
            data["updated_at"] = this.updated_at !== undefined ? this.updated_at : null;
            data["url"] = this.url !== undefined ? this.url : null;
            data["watchers"] = this.watchers !== undefined ? this.watchers : null;
            data["watchers_count"] = this.watchers_count !== undefined ? this.watchers_count : null;
            return data;
        };
        return Repo5;
    }());
    GithubApiClient.Repo5 = Repo5;
    var User21 = /** @class */ (function () {
        function User21(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        User21.prototype.init = function (data) {
            if (data) {
                this.avatar_url = data["avatar_url"] !== undefined ? data["avatar_url"] : null;
                this.gravatar_id = data["gravatar_id"] !== undefined ? data["gravatar_id"] : null;
                this.id = data["id"] !== undefined ? data["id"] : null;
                this.login = data["login"] !== undefined ? data["login"] : null;
                this.url = data["url"] !== undefined ? data["url"] : null;
            }
        };
        User21.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new User21();
            result.init(data);
            return result;
        };
        User21.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["avatar_url"] = this.avatar_url !== undefined ? this.avatar_url : null;
            data["gravatar_id"] = this.gravatar_id !== undefined ? this.gravatar_id : null;
            data["id"] = this.id !== undefined ? this.id : null;
            data["login"] = this.login !== undefined ? this.login : null;
            data["url"] = this.url !== undefined ? this.url : null;
            return data;
        };
        return User21;
    }());
    GithubApiClient.User21 = User21;
    var Repo6 = /** @class */ (function () {
        function Repo6(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Repo6.prototype.init = function (data) {
            if (data) {
                this.clone_url = data["clone_url"] !== undefined ? data["clone_url"] : null;
                this.created_at = data["created_at"] !== undefined ? data["created_at"] : null;
                this.description = data["description"] !== undefined ? data["description"] : null;
                this.fork = data["fork"] !== undefined ? data["fork"] : null;
                this.forks = data["forks"] !== undefined ? data["forks"] : null;
                this.forks_count = data["forks_count"] !== undefined ? data["forks_count"] : null;
                this.full_name = data["full_name"] !== undefined ? data["full_name"] : null;
                this.git_url = data["git_url"] !== undefined ? data["git_url"] : null;
                this.homepage = data["homepage"] !== undefined ? data["homepage"] : null;
                this.html_url = data["html_url"] !== undefined ? data["html_url"] : null;
                this.id = data["id"] !== undefined ? data["id"] : null;
                this.language = data["language"] !== undefined ? data["language"] : null;
                this.master_branch = data["master_branch"] !== undefined ? data["master_branch"] : null;
                this.mirror_url = data["mirror_url"] !== undefined ? data["mirror_url"] : null;
                this.name = data["name"] !== undefined ? data["name"] : null;
                this.open_issues = data["open_issues"] !== undefined ? data["open_issues"] : null;
                this.open_issues_count = data["open_issues_count"] !== undefined ? data["open_issues_count"] : null;
                this.owner = data["owner"] ? Owner16.fromJS(data["owner"]) : null;
                this.private = data["private"] !== undefined ? data["private"] : null;
                this.pushed_at = data["pushed_at"] !== undefined ? data["pushed_at"] : null;
                this.size = data["size"] !== undefined ? data["size"] : null;
                this.ssh_url = data["ssh_url"] !== undefined ? data["ssh_url"] : null;
                this.svn_url = data["svn_url"] !== undefined ? data["svn_url"] : null;
                this.updated_at = data["updated_at"] !== undefined ? data["updated_at"] : null;
                this.url = data["url"] !== undefined ? data["url"] : null;
                this.watchers = data["watchers"] !== undefined ? data["watchers"] : null;
                this.watchers_count = data["watchers_count"] !== undefined ? data["watchers_count"] : null;
            }
        };
        Repo6.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Repo6();
            result.init(data);
            return result;
        };
        Repo6.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["clone_url"] = this.clone_url !== undefined ? this.clone_url : null;
            data["created_at"] = this.created_at !== undefined ? this.created_at : null;
            data["description"] = this.description !== undefined ? this.description : null;
            data["fork"] = this.fork !== undefined ? this.fork : null;
            data["forks"] = this.forks !== undefined ? this.forks : null;
            data["forks_count"] = this.forks_count !== undefined ? this.forks_count : null;
            data["full_name"] = this.full_name !== undefined ? this.full_name : null;
            data["git_url"] = this.git_url !== undefined ? this.git_url : null;
            data["homepage"] = this.homepage !== undefined ? this.homepage : null;
            data["html_url"] = this.html_url !== undefined ? this.html_url : null;
            data["id"] = this.id !== undefined ? this.id : null;
            data["language"] = this.language !== undefined ? this.language : null;
            data["master_branch"] = this.master_branch !== undefined ? this.master_branch : null;
            data["mirror_url"] = this.mirror_url !== undefined ? this.mirror_url : null;
            data["name"] = this.name !== undefined ? this.name : null;
            data["open_issues"] = this.open_issues !== undefined ? this.open_issues : null;
            data["open_issues_count"] = this.open_issues_count !== undefined ? this.open_issues_count : null;
            data["owner"] = this.owner ? this.owner.toJSON() : null;
            data["private"] = this.private !== undefined ? this.private : null;
            data["pushed_at"] = this.pushed_at !== undefined ? this.pushed_at : null;
            data["size"] = this.size !== undefined ? this.size : null;
            data["ssh_url"] = this.ssh_url !== undefined ? this.ssh_url : null;
            data["svn_url"] = this.svn_url !== undefined ? this.svn_url : null;
            data["updated_at"] = this.updated_at !== undefined ? this.updated_at : null;
            data["url"] = this.url !== undefined ? this.url : null;
            data["watchers"] = this.watchers !== undefined ? this.watchers : null;
            data["watchers_count"] = this.watchers_count !== undefined ? this.watchers_count : null;
            return data;
        };
        return Repo6;
    }());
    GithubApiClient.Repo6 = Repo6;
    var User22 = /** @class */ (function () {
        function User22(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        User22.prototype.init = function (data) {
            if (data) {
                this.avatar_url = data["avatar_url"] !== undefined ? data["avatar_url"] : null;
                this.gravatar_id = data["gravatar_id"] !== undefined ? data["gravatar_id"] : null;
                this.id = data["id"] !== undefined ? data["id"] : null;
                this.login = data["login"] !== undefined ? data["login"] : null;
                this.url = data["url"] !== undefined ? data["url"] : null;
            }
        };
        User22.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new User22();
            result.init(data);
            return result;
        };
        User22.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["avatar_url"] = this.avatar_url !== undefined ? this.avatar_url : null;
            data["gravatar_id"] = this.gravatar_id !== undefined ? this.gravatar_id : null;
            data["id"] = this.id !== undefined ? this.id : null;
            data["login"] = this.login !== undefined ? this.login : null;
            data["url"] = this.url !== undefined ? this.url : null;
            return data;
        };
        return User22;
    }());
    GithubApiClient.User22 = User22;
    var Uploader4 = /** @class */ (function () {
        function Uploader4(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Uploader4.prototype.init = function (data) {
            if (data) {
                this.avatar_url = data["avatar_url"] !== undefined ? data["avatar_url"] : null;
                this.events_url = data["events_url"] !== undefined ? data["events_url"] : null;
                this.followers_url = data["followers_url"] !== undefined ? data["followers_url"] : null;
                this.following_url = data["following_url"] !== undefined ? data["following_url"] : null;
                this.gists_url = data["gists_url"] !== undefined ? data["gists_url"] : null;
                this.gravatar_id = data["gravatar_id"] !== undefined ? data["gravatar_id"] : null;
                this.html_url = data["html_url"] !== undefined ? data["html_url"] : null;
                this.id = data["id"] !== undefined ? data["id"] : null;
                this.login = data["login"] !== undefined ? data["login"] : null;
                this.organizations_url = data["organizations_url"] !== undefined ? data["organizations_url"] : null;
                this.received_events_url = data["received_events_url"] !== undefined ? data["received_events_url"] : null;
                this.repos_url = data["repos_url"] !== undefined ? data["repos_url"] : null;
                this.site_admin = data["site_admin"] !== undefined ? data["site_admin"] : null;
                this.starred_url = data["starred_url"] !== undefined ? data["starred_url"] : null;
                this.subscriptions_url = data["subscriptions_url"] !== undefined ? data["subscriptions_url"] : null;
                this.type = data["type"] !== undefined ? data["type"] : null;
                this.url = data["url"] !== undefined ? data["url"] : null;
            }
        };
        Uploader4.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Uploader4();
            result.init(data);
            return result;
        };
        Uploader4.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["avatar_url"] = this.avatar_url !== undefined ? this.avatar_url : null;
            data["events_url"] = this.events_url !== undefined ? this.events_url : null;
            data["followers_url"] = this.followers_url !== undefined ? this.followers_url : null;
            data["following_url"] = this.following_url !== undefined ? this.following_url : null;
            data["gists_url"] = this.gists_url !== undefined ? this.gists_url : null;
            data["gravatar_id"] = this.gravatar_id !== undefined ? this.gravatar_id : null;
            data["html_url"] = this.html_url !== undefined ? this.html_url : null;
            data["id"] = this.id !== undefined ? this.id : null;
            data["login"] = this.login !== undefined ? this.login : null;
            data["organizations_url"] = this.organizations_url !== undefined ? this.organizations_url : null;
            data["received_events_url"] = this.received_events_url !== undefined ? this.received_events_url : null;
            data["repos_url"] = this.repos_url !== undefined ? this.repos_url : null;
            data["site_admin"] = this.site_admin !== undefined ? this.site_admin : null;
            data["starred_url"] = this.starred_url !== undefined ? this.starred_url : null;
            data["subscriptions_url"] = this.subscriptions_url !== undefined ? this.subscriptions_url : null;
            data["type"] = this.type !== undefined ? this.type : null;
            data["url"] = this.url !== undefined ? this.url : null;
            return data;
        };
        return Uploader4;
    }());
    GithubApiClient.Uploader4 = Uploader4;
    var Author18 = /** @class */ (function () {
        function Author18(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Author18.prototype.init = function (data) {
            if (data) {
                this.date = data["date"] !== undefined ? data["date"] : null;
                this.email = data["email"] !== undefined ? data["email"] : null;
                this.name = data["name"] !== undefined ? data["name"] : null;
            }
        };
        Author18.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Author18();
            result.init(data);
            return result;
        };
        Author18.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["date"] = this.date !== undefined ? this.date : null;
            data["email"] = this.email !== undefined ? this.email : null;
            data["name"] = this.name !== undefined ? this.name : null;
            return data;
        };
        return Author18;
    }());
    GithubApiClient.Author18 = Author18;
    var Committer15 = /** @class */ (function () {
        function Committer15(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Committer15.prototype.init = function (data) {
            if (data) {
                this.date = data["date"] !== undefined ? data["date"] : null;
                this.email = data["email"] !== undefined ? data["email"] : null;
                this.name = data["name"] !== undefined ? data["name"] : null;
            }
        };
        Committer15.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Committer15();
            result.init(data);
            return result;
        };
        Committer15.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["date"] = this.date !== undefined ? this.date : null;
            data["email"] = this.email !== undefined ? this.email : null;
            data["name"] = this.name !== undefined ? this.name : null;
            return data;
        };
        return Committer15;
    }());
    GithubApiClient.Committer15 = Committer15;
    var Tree10 = /** @class */ (function () {
        function Tree10(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Tree10.prototype.init = function (data) {
            if (data) {
                this.sha = data["sha"] !== undefined ? data["sha"] : null;
                this.url = data["url"] !== undefined ? data["url"] : null;
            }
        };
        Tree10.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Tree10();
            result.init(data);
            return result;
        };
        Tree10.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["sha"] = this.sha !== undefined ? this.sha : null;
            data["url"] = this.url !== undefined ? this.url : null;
            return data;
        };
        return Tree10;
    }());
    GithubApiClient.Tree10 = Tree10;
    var Author19 = /** @class */ (function () {
        function Author19(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Author19.prototype.init = function (data) {
            if (data) {
                this.date = data["date"] !== undefined ? data["date"] : null;
                this.email = data["email"] !== undefined ? data["email"] : null;
                this.name = data["name"] !== undefined ? data["name"] : null;
            }
        };
        Author19.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Author19();
            result.init(data);
            return result;
        };
        Author19.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["date"] = this.date !== undefined ? this.date : null;
            data["email"] = this.email !== undefined ? this.email : null;
            data["name"] = this.name !== undefined ? this.name : null;
            return data;
        };
        return Author19;
    }());
    GithubApiClient.Author19 = Author19;
    var Committer16 = /** @class */ (function () {
        function Committer16(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Committer16.prototype.init = function (data) {
            if (data) {
                this.date = data["date"] !== undefined ? data["date"] : null;
                this.email = data["email"] !== undefined ? data["email"] : null;
                this.name = data["name"] !== undefined ? data["name"] : null;
            }
        };
        Committer16.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Committer16();
            result.init(data);
            return result;
        };
        Committer16.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["date"] = this.date !== undefined ? this.date : null;
            data["email"] = this.email !== undefined ? this.email : null;
            data["name"] = this.name !== undefined ? this.name : null;
            return data;
        };
        return Committer16;
    }());
    GithubApiClient.Committer16 = Committer16;
    var Tree11 = /** @class */ (function () {
        function Tree11(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Tree11.prototype.init = function (data) {
            if (data) {
                this.sha = data["sha"] !== undefined ? data["sha"] : null;
                this.url = data["url"] !== undefined ? data["url"] : null;
            }
        };
        Tree11.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Tree11();
            result.init(data);
            return result;
        };
        Tree11.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["sha"] = this.sha !== undefined ? this.sha : null;
            data["url"] = this.url !== undefined ? this.url : null;
            return data;
        };
        return Tree11;
    }());
    GithubApiClient.Tree11 = Tree11;
    var Author20 = /** @class */ (function () {
        function Author20(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Author20.prototype.init = function (data) {
            if (data) {
                this.date = data["date"] !== undefined ? data["date"] : null;
                this.email = data["email"] !== undefined ? data["email"] : null;
                this.name = data["name"] !== undefined ? data["name"] : null;
            }
        };
        Author20.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Author20();
            result.init(data);
            return result;
        };
        Author20.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["date"] = this.date !== undefined ? this.date : null;
            data["email"] = this.email !== undefined ? this.email : null;
            data["name"] = this.name !== undefined ? this.name : null;
            return data;
        };
        return Author20;
    }());
    GithubApiClient.Author20 = Author20;
    var Committer17 = /** @class */ (function () {
        function Committer17(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Committer17.prototype.init = function (data) {
            if (data) {
                this.date = data["date"] !== undefined ? data["date"] : null;
                this.email = data["email"] !== undefined ? data["email"] : null;
                this.name = data["name"] !== undefined ? data["name"] : null;
            }
        };
        Committer17.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Committer17();
            result.init(data);
            return result;
        };
        Committer17.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["date"] = this.date !== undefined ? this.date : null;
            data["email"] = this.email !== undefined ? this.email : null;
            data["name"] = this.name !== undefined ? this.name : null;
            return data;
        };
        return Committer17;
    }());
    GithubApiClient.Committer17 = Committer17;
    var Tree12 = /** @class */ (function () {
        function Tree12(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Tree12.prototype.init = function (data) {
            if (data) {
                this.sha = data["sha"] !== undefined ? data["sha"] : null;
                this.url = data["url"] !== undefined ? data["url"] : null;
            }
        };
        Tree12.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Tree12();
            result.init(data);
            return result;
        };
        Tree12.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["sha"] = this.sha !== undefined ? this.sha : null;
            data["url"] = this.url !== undefined ? this.url : null;
            return data;
        };
        return Tree12;
    }());
    GithubApiClient.Tree12 = Tree12;
    var Creator7 = /** @class */ (function () {
        function Creator7(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Creator7.prototype.init = function (data) {
            if (data) {
                this.avatar_url = data["avatar_url"] !== undefined ? data["avatar_url"] : null;
                this.gravatar_id = data["gravatar_id"] !== undefined ? data["gravatar_id"] : null;
                this.id = data["id"] !== undefined ? data["id"] : null;
                this.login = data["login"] !== undefined ? data["login"] : null;
                this.url = data["url"] !== undefined ? data["url"] : null;
            }
        };
        Creator7.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Creator7();
            result.init(data);
            return result;
        };
        Creator7.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["avatar_url"] = this.avatar_url !== undefined ? this.avatar_url : null;
            data["gravatar_id"] = this.gravatar_id !== undefined ? this.gravatar_id : null;
            data["id"] = this.id !== undefined ? this.id : null;
            data["login"] = this.login !== undefined ? this.login : null;
            data["url"] = this.url !== undefined ? this.url : null;
            return data;
        };
        return Creator7;
    }());
    GithubApiClient.Creator7 = Creator7;
    var Milestone3State;
    (function (Milestone3State) {
        Milestone3State[Milestone3State["Open"] = "open"] = "Open";
        Milestone3State[Milestone3State["Closed"] = "closed"] = "Closed";
    })(Milestone3State = GithubApiClient.Milestone3State || (GithubApiClient.Milestone3State = {}));
    var Language2 = /** @class */ (function () {
        function Language2(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Language2.prototype.init = function (data) {
            if (data) {
            }
        };
        Language2.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Language2();
            result.init(data);
            return result;
        };
        Language2.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            return data;
        };
        return Language2;
    }());
    GithubApiClient.Language2 = Language2;
    var Owner12 = /** @class */ (function () {
        function Owner12(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Owner12.prototype.init = function (data) {
            if (data) {
                this.avatar_url = data["avatar_url"] !== undefined ? data["avatar_url"] : null;
                this.gravatar_id = data["gravatar_id"] !== undefined ? data["gravatar_id"] : null;
                this.id = data["id"] !== undefined ? data["id"] : null;
                this.login = data["login"] !== undefined ? data["login"] : null;
                this.url = data["url"] !== undefined ? data["url"] : null;
            }
        };
        Owner12.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Owner12();
            result.init(data);
            return result;
        };
        Owner12.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["avatar_url"] = this.avatar_url !== undefined ? this.avatar_url : null;
            data["gravatar_id"] = this.gravatar_id !== undefined ? this.gravatar_id : null;
            data["id"] = this.id !== undefined ? this.id : null;
            data["login"] = this.login !== undefined ? this.login : null;
            data["url"] = this.url !== undefined ? this.url : null;
            return data;
        };
        return Owner12;
    }());
    GithubApiClient.Owner12 = Owner12;
    var Language3 = /** @class */ (function () {
        function Language3(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Language3.prototype.init = function (data) {
            if (data) {
            }
        };
        Language3.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Language3();
            result.init(data);
            return result;
        };
        Language3.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            return data;
        };
        return Language3;
    }());
    GithubApiClient.Language3 = Language3;
    var Owner13 = /** @class */ (function () {
        function Owner13(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Owner13.prototype.init = function (data) {
            if (data) {
                this.avatar_url = data["avatar_url"] !== undefined ? data["avatar_url"] : null;
                this.gravatar_id = data["gravatar_id"] !== undefined ? data["gravatar_id"] : null;
                this.id = data["id"] !== undefined ? data["id"] : null;
                this.login = data["login"] !== undefined ? data["login"] : null;
                this.url = data["url"] !== undefined ? data["url"] : null;
            }
        };
        Owner13.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Owner13();
            result.init(data);
            return result;
        };
        Owner13.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["avatar_url"] = this.avatar_url !== undefined ? this.avatar_url : null;
            data["gravatar_id"] = this.gravatar_id !== undefined ? this.gravatar_id : null;
            data["id"] = this.id !== undefined ? this.id : null;
            data["login"] = this.login !== undefined ? this.login : null;
            data["url"] = this.url !== undefined ? this.url : null;
            return data;
        };
        return Owner13;
    }());
    GithubApiClient.Owner13 = Owner13;
    var Owner14 = /** @class */ (function () {
        function Owner14(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Owner14.prototype.init = function (data) {
            if (data) {
                this.avatar_url = data["avatar_url"] !== undefined ? data["avatar_url"] : null;
                this.events_url = data["events_url"] !== undefined ? data["events_url"] : null;
                this.followers_url = data["followers_url"] !== undefined ? data["followers_url"] : null;
                this.following_url = data["following_url"] !== undefined ? data["following_url"] : null;
                this.gists_url = data["gists_url"] !== undefined ? data["gists_url"] : null;
                this.gravatar_id = data["gravatar_id"] !== undefined ? data["gravatar_id"] : null;
                this.html_url = data["html_url"] !== undefined ? data["html_url"] : null;
                this.id = data["id"] !== undefined ? data["id"] : null;
                this.login = data["login"] !== undefined ? data["login"] : null;
                this.organizations_url = data["organizations_url"] !== undefined ? data["organizations_url"] : null;
                this.received_events_url = data["received_events_url"] !== undefined ? data["received_events_url"] : null;
                this.repos_url = data["repos_url"] !== undefined ? data["repos_url"] : null;
                this.starred_url = data["starred_url"] !== undefined ? data["starred_url"] : null;
                this.subscriptions_url = data["subscriptions_url"] !== undefined ? data["subscriptions_url"] : null;
                this.type = data["type"] !== undefined ? data["type"] : null;
                this.url = data["url"] !== undefined ? data["url"] : null;
            }
        };
        Owner14.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Owner14();
            result.init(data);
            return result;
        };
        Owner14.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["avatar_url"] = this.avatar_url !== undefined ? this.avatar_url : null;
            data["events_url"] = this.events_url !== undefined ? this.events_url : null;
            data["followers_url"] = this.followers_url !== undefined ? this.followers_url : null;
            data["following_url"] = this.following_url !== undefined ? this.following_url : null;
            data["gists_url"] = this.gists_url !== undefined ? this.gists_url : null;
            data["gravatar_id"] = this.gravatar_id !== undefined ? this.gravatar_id : null;
            data["html_url"] = this.html_url !== undefined ? this.html_url : null;
            data["id"] = this.id !== undefined ? this.id : null;
            data["login"] = this.login !== undefined ? this.login : null;
            data["organizations_url"] = this.organizations_url !== undefined ? this.organizations_url : null;
            data["received_events_url"] = this.received_events_url !== undefined ? this.received_events_url : null;
            data["repos_url"] = this.repos_url !== undefined ? this.repos_url : null;
            data["starred_url"] = this.starred_url !== undefined ? this.starred_url : null;
            data["subscriptions_url"] = this.subscriptions_url !== undefined ? this.subscriptions_url : null;
            data["type"] = this.type !== undefined ? this.type : null;
            data["url"] = this.url !== undefined ? this.url : null;
            return data;
        };
        return Owner14;
    }());
    GithubApiClient.Owner14 = Owner14;
    var Diff_url = /** @class */ (function () {
        function Diff_url(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Diff_url.prototype.init = function (data) {
            if (data) {
            }
        };
        Diff_url.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Diff_url();
            result.init(data);
            return result;
        };
        Diff_url.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            return data;
        };
        return Diff_url;
    }());
    GithubApiClient.Diff_url = Diff_url;
    var Html_url = /** @class */ (function () {
        function Html_url(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Html_url.prototype.init = function (data) {
            if (data) {
            }
        };
        Html_url.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Html_url();
            result.init(data);
            return result;
        };
        Html_url.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            return data;
        };
        return Html_url;
    }());
    GithubApiClient.Html_url = Html_url;
    var Patch_url = /** @class */ (function () {
        function Patch_url(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Patch_url.prototype.init = function (data) {
            if (data) {
            }
        };
        Patch_url.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Patch_url();
            result.init(data);
            return result;
        };
        Patch_url.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            return data;
        };
        return Patch_url;
    }());
    GithubApiClient.Patch_url = Patch_url;
    var Owner15 = /** @class */ (function () {
        function Owner15(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Owner15.prototype.init = function (data) {
            if (data) {
                this.avatar_url = data["avatar_url"] !== undefined ? data["avatar_url"] : null;
                this.gravatar_id = data["gravatar_id"] !== undefined ? data["gravatar_id"] : null;
                this.id = data["id"] !== undefined ? data["id"] : null;
                this.login = data["login"] !== undefined ? data["login"] : null;
                this.url = data["url"] !== undefined ? data["url"] : null;
            }
        };
        Owner15.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Owner15();
            result.init(data);
            return result;
        };
        Owner15.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["avatar_url"] = this.avatar_url !== undefined ? this.avatar_url : null;
            data["gravatar_id"] = this.gravatar_id !== undefined ? this.gravatar_id : null;
            data["id"] = this.id !== undefined ? this.id : null;
            data["login"] = this.login !== undefined ? this.login : null;
            data["url"] = this.url !== undefined ? this.url : null;
            return data;
        };
        return Owner15;
    }());
    GithubApiClient.Owner15 = Owner15;
    var Owner16 = /** @class */ (function () {
        function Owner16(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        Owner16.prototype.init = function (data) {
            if (data) {
                this.avatar_url = data["avatar_url"] !== undefined ? data["avatar_url"] : null;
                this.gravatar_id = data["gravatar_id"] !== undefined ? data["gravatar_id"] : null;
                this.id = data["id"] !== undefined ? data["id"] : null;
                this.login = data["login"] !== undefined ? data["login"] : null;
                this.url = data["url"] !== undefined ? data["url"] : null;
            }
        };
        Owner16.fromJS = function (data) {
            data = typeof data === 'object' ? data : {};
            var result = new Owner16();
            result.init(data);
            return result;
        };
        Owner16.prototype.toJSON = function (data) {
            data = typeof data === 'object' ? data : {};
            data["avatar_url"] = this.avatar_url !== undefined ? this.avatar_url : null;
            data["gravatar_id"] = this.gravatar_id !== undefined ? this.gravatar_id : null;
            data["id"] = this.id !== undefined ? this.id : null;
            data["login"] = this.login !== undefined ? this.login : null;
            data["url"] = this.url !== undefined ? this.url : null;
            return data;
        };
        return Owner16;
    }());
    GithubApiClient.Owner16 = Owner16;
    var SwaggerException = /** @class */ (function (_super) {
        __extends(SwaggerException, _super);
        function SwaggerException(message, status, response, headers, result) {
            var _this = _super.call(this) || this;
            _this.isSwaggerException = true;
            _this.message = message;
            _this.status = status;
            _this.response = response;
            _this.headers = headers;
            _this.result = result;
            return _this;
        }
        SwaggerException.isSwaggerException = function (obj) {
            return obj.isSwaggerException === true;
        };
        return SwaggerException;
    }(Error));
    GithubApiClient.SwaggerException = SwaggerException;
    function throwException(message, status, response, headers, result) {
        if (result !== null && result !== undefined)
            throw result;
        else
            throw new SwaggerException(message, status, response, headers, null);
    }
})(GithubApiClient || (GithubApiClient = {}));
//# sourceMappingURL=GithubApiClient.js.map